priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

########################################
#			Colorful Comments 		   #
########################################

snippet todo "TODO Comment"
# TODO: ${1: What would you like to do?}

$0
endsnippet

snippet fix "FIX Comment"
# FIX: ${1: What do you need to fix now?}

$0
endsnippet

snippet inprogress "INPROGRESS Comment"
# INPROGRESS: ${1: What are you working on?}

$0
endsnippet

snippet question "QUESTION Comment"
# QUESTION: ${1: You had a question?}

$0
endsnippet

snippet caveat "CAVEAT Comment"
# CAVEAT: ${1: Is there a problem?}

$0
endsnippet

snippet warn "WARN Comment"
# WARN: ${1: Be careful!}

$0
endsnippet

snippet title "TITLE Comment"
# TITLE: ${1: What are we calling this one?}

$0
endsnippet

snippet link "LINK Comment"
# LINK: ${1: URL Please.}

$0
endsnippet

snippet about "ABOUT Comment"
# ABOUT: ${1: May I have some info?}

$0
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #! "#!/usr/bin/env (!env)" b
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n" `
endsnippet

snippet /case|sw(itch)?/ "case .. esac (case)" rb
case ${1:word} in
	${2:pattern} )
		${0:${VISUAL}};;
esac
endsnippet

snippet elif "elif .. (elif)" b
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
endsnippet

snippet for "for ... done (for)" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:${VISUAL}}
done
endsnippet

snippet /ift(est)?/ "if ... then (if)" rb
if ${2:[ ${1:condition} ]}; then
	${0:${VISUAL}}
fi
endsnippet

snippet if "if ... then (if)" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet until "until ... (done)" b
until ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet /wh(ile)?/ "while ... (done)" rb
while ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet func "function() {...}" b
${1:function} () {
	${0:${VISUAL}}
}
endsnippet

# vim:ft=snippets:
