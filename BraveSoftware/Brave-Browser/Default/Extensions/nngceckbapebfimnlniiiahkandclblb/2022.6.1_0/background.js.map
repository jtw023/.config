{"version":3,"file":"background.js","mappings":"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CA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,UAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,UACA,YACA,gBACA,cACA,cACA,YACA,cACA,YACA,mBACA,iBACA,mBACA,iBACA,cACA,gBACA,iBACA,mBACA,yBACA,uBACA,cACA,qBACA,uBACA,gBACA,gBACA,UAGc,GAAAC,cAA0B,CACxC,MACA,MACA,OACA,SACA,SACA,WACA,WACA,MACA,MACA,OACA,MACA,OACA,UACA,YACA,gBACA,gBACA,SACA,aACA,oBACA,MACA,OAGc,GAAAC,oBAAgC,CAC9C,UACA,YACA,aACA,WACA,WAKc,GAAAC,UAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,GAAAC,cAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/C,GAAAC,aAAe,CAAC,OAAQ,OAAQ,OAAQ,KAAM,OAAQ,QAGjE,MAAMC,IACK,GAAAC,mBAA+B,CAC7C,mBACA,cACA,WACA,SACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,mBAA+B,CAAC,OAAQ,YAAa,aAErD,GAAAC,wBAAoC,CA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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///../../node_modules/@angular/core/__ivy_ngcc__/bundles/ lazy namespace object","webpack:///../../libs/common/src/enums/authenticationStatus.ts","webpack:///../../libs/common/src/enums/cipherRepromptType.ts","webpack:///../../libs/common/src/enums/cipherType.ts","webpack:///../../libs/common/src/enums/stateVersion.ts","webpack:///../../libs/common/src/enums/themeType.ts","webpack:///../../libs/common/src/enums/deviceType.ts","webpack:///../../libs/common/src/factories/accountFactory.ts","webpack:///../../libs/common/src/factories/globalStateFactory.ts","webpack:///../../libs/common/src/factories/stateFactory.ts","webpack:///../../libs/common/src/models/domain/environmentUrls.ts","webpack:///../../libs/common/src/models/domain/windowState.ts","webpack:///../../libs/common/src/models/domain/globalState.ts","webpack:///../../libs/common/src/models/request/deviceRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequestTwoFactor.ts","webpack:///../../libs/common/src/models/response/baseResponse.ts","webpack:///../../libs/common/src/models/response/billingResponse.ts","webpack:///../../libs/common/src/models/response/billingHistoryResponse.ts","webpack:///../../libs/common/src/models/response/billingPaymentResponse.ts","webpack:///../../libs/common/src/models/response/organizationConnectionResponse.ts","webpack:///../../libs/common/src/models/response/ssoPreValidateResponse.ts","webpack:///../../libs/common/src/misc/utils.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/apiTokenRequest.ts","webpack:///../../libs/common/src/models/response/apiKeyResponse.ts","webpack:///../../libs/common/src/models/response/attachmentResponse.ts","webpack:///../../libs/common/src/models/api/cardApi.ts","webpack:///../../libs/common/src/models/api/fieldApi.ts","webpack:///../../libs/common/src/models/api/identityApi.ts","webpack:///../../libs/common/src/models/api/loginUriApi.ts","webpack:///../../libs/common/src/models/api/loginApi.ts","webpack:///../../libs/common/src/models/api/secureNoteApi.ts","webpack:///../../libs/common/src/models/response/passwordHistoryResponse.ts","webpack:///../../libs/common/src/models/response/cipherResponse.ts","webpack:///../../libs/common/src/models/response/attachmentUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/breachAccountResponse.ts","webpack:///../../libs/common/src/models/response/selectionReadOnlyResponse.ts","webpack:///../../libs/common/src/models/response/collectionResponse.ts","webpack:///../../libs/common/src/models/response/deviceVerificationResponse.ts","webpack:///../../libs/common/src/models/response/globalDomainResponse.ts","webpack:///../../libs/common/src/models/response/domainsResponse.ts","webpack:///../../libs/common/src/models/response/emergencyAccessResponse.ts","webpack:///../../libs/common/src/models/response/errorResponse.ts","webpack:///../../libs/common/src/models/response/eventResponse.ts","webpack:///../../libs/common/src/models/response/folderResponse.ts","webpack:///../../libs/common/src/models/response/groupResponse.ts","webpack:///../../libs/common/src/models/response/identityCaptchaResponse.ts","webpack:///../../libs/common/src/models/response/identityTokenResponse.ts","webpack:///../../libs/common/src/models/response/identityTwoFactorResponse.ts","webpack:///../../libs/common/src/models/response/keyConnectorUserKeyResponse.ts","webpack:///../../libs/common/src/models/response/listResponse.ts","webpack:///../../libs/common/src/enums/ssoEnums.ts","webpack:///../../libs/common/src/models/api/ssoConfigApi.ts","webpack:///../../libs/common/src/models/response/organization/organizationSsoResponse.ts","webpack:///../../libs/common/src/models/response/organizationApiKeyInformationResponse.ts","webpack:///../../libs/common/src/models/response/organizationAutoEnrollStatusResponse.ts","webpack:///../../libs/common/src/models/response/keysResponse.ts","webpack:///../../libs/common/src/models/response/organizationKeysResponse.ts","webpack:///../../libs/common/src/models/response/planResponse.ts","webpack:///../../libs/common/src/models/response/organizationResponse.ts","webpack:///../../libs/common/src/models/response/organizationSponsorshipSyncStatusResponse.ts","webpack:///../../libs/common/src/models/response/subscriptionResponse.ts","webpack:///../../libs/common/src/models/response/organizationSubscriptionResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkResponse.ts","webpack:///../../libs/common/src/models/api/permissionsApi.ts","webpack:///../../libs/common/src/models/response/organizationUserResponse.ts","webpack:///../../libs/common/src/models/response/profileOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderResponse.ts","webpack:///../../libs/common/src/models/response/profileResponse.ts","webpack:///../../libs/common/src/models/response/paymentResponse.ts","webpack:///../../libs/common/src/models/response/policyResponse.ts","webpack:///../../libs/common/src/models/response/preloginResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserResponse.ts","webpack:///../../libs/common/src/models/api/sendFileApi.ts","webpack:///../../libs/common/src/models/api/sendTextApi.ts","webpack:///../../libs/common/src/models/response/sendAccessResponse.ts","webpack:///../../libs/common/src/models/response/sendFileDownloadDataResponse.ts","webpack:///../../libs/common/src/models/response/sendResponse.ts","webpack:///../../libs/common/src/models/response/sendFileUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/syncResponse.ts","webpack:///../../libs/common/src/models/response/taxInfoResponse.ts","webpack:///../../libs/common/src/models/response/taxRateResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorAuthenticatorResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorDuoResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorEmailResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorProviderResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorRescoverResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorWebAuthnResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorYubiKeyResponse.ts","webpack:///../../libs/common/src/models/response/userKeyResponse.ts","webpack:///../../libs/common/src/enums/htmlStorageLocation.ts","webpack:///../../libs/common/src/services/api.service.ts","webpack:///../../libs/common/src/services/appId.service.ts","webpack:///../../libs/common/src/services/audit.service.ts","webpack:///../../libs/common/src/misc/throttle.ts","webpack:///../../libs/common/src/enums/authenticationType.ts","webpack:///../../libs/common/src/enums/keySuffixOptions.ts","webpack:///../../libs/common/src/enums/twoFactorProviderType.ts","webpack:///../../libs/common/src/models/domain/account.ts","webpack:///../../libs/common/src/models/domain/authResult.ts","webpack:///../../libs/common/src/models/request/keysRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/logIn.strategy.ts","webpack:///../../libs/common/src/enums/hashPurpose.ts","webpack:///../../libs/common/src/misc/logInStrategies/apiLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/passwordTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/passwordLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/ssoTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/ssoLogin.strategy.ts","webpack:///../../libs/common/src/models/request/preloginRequest.ts","webpack:///../../libs/common/src/services/auth.service.ts","webpack:///../../libs/common/src/enums/fieldType.ts","webpack:///../../libs/common/src/enums/uriMatchType.ts","webpack:///../../libs/common/src/enums/encryptionType.ts","webpack:///../../libs/common/src/misc/sequentialize.ts","webpack:///../../libs/common/src/models/data/attachmentData.ts","webpack:///../../libs/common/src/models/data/cardData.ts","webpack:///../../libs/common/src/models/data/fieldData.ts","webpack:///../../libs/common/src/models/data/identityData.ts","webpack:///../../libs/common/src/models/data/loginUriData.ts","webpack:///../../libs/common/src/models/data/loginData.ts","webpack:///../../libs/common/src/models/data/passwordHistoryData.ts","webpack:///../../libs/common/src/models/data/secureNoteData.ts","webpack:///../../libs/common/src/models/data/cipherData.ts","webpack:///../../libs/common/src/models/view/attachmentView.ts","webpack:///../../libs/common/src/models/domain/encString.ts","webpack:///../../libs/common/src/models/domain/domainBase.ts","webpack:///../../libs/common/src/models/domain/symmetricCryptoKey.ts","webpack:///../../libs/common/src/enums/linkedIdType.ts","webpack:///../../libs/common/src/models/domain/attachment.ts","webpack:///../../libs/common/src/misc/linkedFieldOption.decorator.ts","webpack:///../../libs/common/src/models/view/itemView.ts","webpack:///../../libs/common/src/models/view/cardView.ts","webpack:///../../libs/common/src/models/domain/card.ts","webpack:///../../libs/common/src/models/view/identityView.ts","webpack:///../../libs/common/src/models/view/loginView.ts","webpack:///../../libs/common/src/models/view/secureNoteView.ts","webpack:///../../libs/common/src/models/view/cipherView.ts","webpack:///../../libs/common/src/models/view/fieldView.ts","webpack:///../../libs/common/src/models/domain/field.ts","webpack:///../../libs/common/src/models/domain/identity.ts","webpack:///../../libs/common/src/models/view/loginUriView.ts","webpack:///../../libs/common/src/models/domain/loginUri.ts","webpack:///../../libs/common/src/models/domain/login.ts","webpack:///../../libs/common/src/models/view/passwordHistoryView.ts","webpack:///../../libs/common/src/models/domain/password.ts","webpack:///../../libs/common/src/models/domain/secureNote.ts","webpack:///../../libs/common/src/models/domain/cipher.ts","webpack:///../../libs/common/src/models/domain/sortedCiphersCache.ts","webpack:///../../libs/common/src/models/request/cipherBulkDeleteRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkMoveRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkRestoreRequest.ts","webpack:///../../libs/common/src/models/request/attachmentRequest.ts","webpack:///../../libs/common/src/models/request/cipherRequest.ts","webpack:///../../libs/common/src/models/request/cipherWithIdRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkShareRequest.ts","webpack:///../../libs/common/src/models/request/cipherCollectionsRequest.ts","webpack:///../../libs/common/src/models/request/cipherCreateRequest.ts","webpack:///../../libs/common/src/models/request/cipherShareRequest.ts","webpack:///../../libs/common/src/services/cipher.service.ts","webpack:///../../libs/common/src/models/domain/treeNode.ts","webpack:///../../libs/common/src/misc/serviceUtils.ts","webpack:///../../libs/common/src/models/data/collectionData.ts","webpack:///../../libs/common/src/models/view/collectionView.ts","webpack:///../../libs/common/src/models/domain/collection.ts","webpack:///../../libs/common/src/services/collection.service.ts","webpack:///../../libs/common/src/enums/logLevelType.ts","webpack:///../../libs/common/src/services/consoleLog.service.ts","webpack:///../../libs/common/src/services/container.service.ts","webpack:///../../libs/common/src/services/environment.service.ts","webpack:///../../libs/common/src/models/data/eventData.ts","webpack:///../../libs/common/src/models/request/eventRequest.ts","webpack:///../../libs/common/src/services/event.service.ts","webpack:///../../libs/common/src/enums/kdfType.ts","webpack:///../../libs/common/src/models/export/cardExport.ts","webpack:///../../libs/common/src/models/export/fieldExport.ts","webpack:///../../libs/common/src/models/export/identityExport.ts","webpack:///../../libs/common/src/models/export/loginUriExport.ts","webpack:///../../libs/common/src/models/export/loginExport.ts","webpack:///../../libs/common/src/enums/secureNoteType.ts","webpack:///../../libs/common/src/enums/eventType.ts","webpack:///../../libs/common/src/models/export/secureNoteExport.ts","webpack:///../../libs/common/src/models/export/cipherExport.ts","webpack:///../../libs/common/src/models/export/cipherWithIdsExport.ts","webpack:///../../libs/common/src/models/export/collectionExport.ts","webpack:///../../libs/common/src/models/export/collectionWithIdExport.ts","webpack:///../../libs/common/src/models/export/eventExport.ts","webpack:///../../libs/common/src/models/view/folderView.ts","webpack:///../../libs/common/src/models/domain/folder.ts","webpack:///../../libs/common/src/models/export/folderExport.ts","webpack:///../../libs/common/src/models/export/folderWithIdExport.ts","webpack:///../../libs/common/src/enums/fileUploadType.ts","webpack:///../../libs/common/src/services/export.service.ts","webpack:///../../libs/common/src/services/azureFileUpload.service.ts","webpack:///../../libs/common/src/services/bitwardenFileUpload.service.ts","webpack:///../../libs/common/src/services/fileUpload.service.ts","webpack:///../../libs/common/src/models/data/folderData.ts","webpack:///../../libs/common/src/models/request/folderRequest.ts","webpack:///../../libs/common/src/services/folder.service.ts","webpack:///../../libs/common/src/enums/organizationUserType.ts","webpack:///../../libs/common/src/models/request/account/setKeyConnectorKeyRequest.ts","webpack:///../../libs/common/src/models/request/keyConnectorUserKeyRequest.ts","webpack:///../../libs/common/src/services/keyConnector.service.ts","webpack:///../../libs/common/src/enums/notificationType.ts","webpack:///../../libs/common/src/models/response/notificationResponse.ts","webpack:///../../libs/common/src/enums/organizationUserStatusType.ts","webpack:///../../libs/common/src/enums/permissions.ts","webpack:///../../libs/common/src/services/notifications.service.ts","webpack:///../../libs/common/src/models/domain/organization.ts","webpack:///../../libs/common/src/services/organization.service.ts","webpack:///../../libs/common/src/enums/policyType.ts","webpack:///../../libs/common/src/misc/wordlist.ts","webpack:///../../libs/common/src/models/domain/generatedPasswordHistory.ts","webpack:///../../libs/common/src/models/domain/passwordGeneratorPolicyOptions.ts","webpack:///../../libs/common/src/services/passwordGeneration.service.ts","webpack:///../../libs/common/src/models/data/policyData.ts","webpack:///../../libs/common/src/models/domain/masterPasswordPolicyOptions.ts","webpack:///../../libs/common/src/models/domain/policy.ts","webpack:///../../libs/common/src/models/domain/resetPasswordPolicyOptions.ts","webpack:///../../libs/common/src/enums/providerUserStatusType.ts","webpack:///../../libs/common/src/enums/providerUserType.ts","webpack:///../../libs/common/src/services/policy.service.ts","webpack:///../../libs/common/src/models/domain/provider.ts","webpack:///../../libs/common/src/services/provider.service.ts","webpack:///../../libs/common/src/enums/sendType.ts","webpack:///../../libs/common/src/services/search.service.ts","webpack:///../../libs/common/src/models/data/sendFileData.ts","webpack:///../../libs/common/src/models/data/sendTextData.ts","webpack:///../../libs/common/src/models/data/sendData.ts","webpack:///../../libs/common/src/models/view/sendFileView.ts","webpack:///../../libs/common/src/models/view/sendTextView.ts","webpack:///../../libs/common/src/models/view/sendView.ts","webpack:///../../libs/common/src/models/domain/sendFile.ts","webpack:///../../libs/common/src/models/domain/sendText.ts","webpack:///../../libs/common/src/models/domain/send.ts","webpack:///../../libs/common/src/models/request/sendRequest.ts","webpack:///../../libs/common/src/services/send.service.ts","webpack:///../../libs/common/src/services/settings.service.ts","webpack:///../../libs/common/src/services/token.service.ts","webpack:///../../libs/common/src/services/stateMigration.service.ts","webpack:///../../libs/common/src/models/data/organizationData.ts","webpack:///../../libs/common/src/models/data/providerData.ts","webpack:///../../libs/common/src/services/sync.service.ts","webpack:///../../libs/common/src/services/system.service.ts","webpack:///../../libs/common/src/services/totp.service.ts","webpack:///../../libs/common/src/services/twoFactor.service.ts","webpack:///../../libs/common/src/enums/verificationType.ts","webpack:///../../libs/common/src/models/request/account/verifyOTPRequest.ts","webpack:///../../libs/common/src/models/request/secretVerificationRequest.ts","webpack:///../../libs/common/src/services/userVerification.service.ts","webpack:///../../libs/common/src/services/usernameGeneration.service.ts","webpack:///../../libs/common/src/models/domain/decryptParameters.ts","webpack:///../../libs/common/src/services/webCryptoFunction.service.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/browser/browserApi.ts","webpack:///./src/models/browserComponentState.ts","webpack:///./src/models/browserGroupingsComponentState.ts","webpack:///./src/models/browserSendComponentState.ts","webpack:///./src/models/account.ts","webpack:///./src/popup/services/popup-utils.service.ts","webpack:///./src/models/autofillScript.ts","webpack:///./src/services/autofillConstants.ts","webpack:///./src/services/autofill.service.ts","webpack:///../../libs/common/src/models/domain/encArrayBuffer.ts","webpack:///../../libs/common/src/models/domain/encryptedObject.ts","webpack:///../../libs/common/src/services/crypto.service.ts","webpack:///../../libs/common/src/enums/clientType.ts","webpack:///./src/services/browserCrypto.service.ts","webpack:///./src/services/browserMessaging.service.ts","webpack:///./src/services/browserMessagingPrivateModeBackground.service.ts","webpack:///./src/services/browserPlatformUtils.service.ts","webpack:///./src/services/browserStorage.service.ts","webpack:///./src/services/i18n.service.ts","webpack:///../../libs/common/src/services/i18n.service.ts","webpack:///../../libs/common/src/enums/storageLocation.ts","webpack:///../../libs/common/src/models/domain/state.ts","webpack:///../../libs/common/src/services/state.service.ts","webpack:///./src/services/state.service.ts","webpack:///../../libs/angular/src/modules/vault-filter/models/vault-filter.model.ts","webpack:///../../libs/angular/src/modules/vault-filter/models/dynamic-tree-node.model.ts","webpack:///../../libs/common/src/abstractions/state.service.ts","webpack:///../../libs/common/src/abstractions/organization.service.ts","webpack:///../../libs/common/src/abstractions/folder.service.ts","webpack:///../../libs/common/src/abstractions/cipher.service.ts","webpack:///../../libs/common/src/abstractions/collection.service.ts","webpack:///../../libs/common/src/abstractions/policy.service.ts","webpack:///../../libs/angular/src/modules/vault-filter/vault-filter.service.ts","webpack:///./src/services/vaultFilter.service.ts","webpack:///./src/services/vaultTimeout.service.ts","webpack:///../../libs/common/src/services/vaultTimeout.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/contextMenus.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/background/models/notificationQueueMessageType.ts","webpack:///./src/background/notification.background.ts","webpack:///./src/background/runtime.background.ts","webpack:///./src/background/tabs.background.ts","webpack:///./src/background/webRequest.background.ts","webpack:///./src/background.ts","webpack:///./src/background/main.background.ts","webpack:///../../libs/common/src/abstractions/messaging.service.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 28536;\nmodule.exports = webpackEmptyAsyncContext;","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum StateVersion {\n  One = 1, // Original flat key/value pair store\n  Two = 2, // Move to a typed State object\n  Three = 3, // Fix migration of users' premium status\n  Four = 4, // Fix 'Never Lock' option by removing stale data\n  Latest = Four,\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/globalState\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/globalState\";\n\nimport { AccountFactory } from \"./accountFactory\";\nimport { GlobalStateFactory } from \"./globalStateFactory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","export class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n}\n","export class WindowState {\n  width?: number;\n  height?: number;\n  isMaximized?: boolean;\n  // TODO: displayBounds is an Electron.Rectangle.\n  // We need to establish some kind of client-specific global state, similiar to the way we already extend a base Account.\n  displayBounds: any;\n  x?: number;\n  y?: number;\n}\n","import { StateVersion } from \"../../enums/stateVersion\";\nimport { ThemeType } from \"../../enums/themeType\";\n\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { WindowState } from \"./windowState\";\n\nexport class GlobalState {\n  enableAlwaysOnTop?: boolean;\n  installedVersion?: string;\n  locale?: string;\n  organizationInvitation?: any;\n  ssoCodeVerifier?: string;\n  ssoOrganizationIdentifier?: string;\n  ssoState?: string;\n  rememberedEmail?: string;\n  theme?: ThemeType = ThemeType.System;\n  window?: WindowState = new WindowState();\n  twoFactorToken?: string;\n  disableFavicon?: boolean;\n  biometricAwaitingAcceptance?: boolean;\n  biometricFingerprintValidated?: boolean;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n  loginRedirect?: any;\n  mainWindowSize?: number;\n  enableBiometrics?: boolean;\n  biometricText?: string;\n  noAutoPromptBiometrics?: boolean;\n  noAutoPromptBiometricsText?: string;\n  stateVersion: StateVersion = StateVersion.One;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n}\n","import { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { DeviceType } from \"../../enums/deviceType\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n}\n","import { TwoFactorProviderType } from \"jslib-common/enums/twoFactorProviderType\";\n\nexport class TokenRequestTwoFactor {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false\n  ) {}\n}\n","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { PaymentMethodType } from \"../../enums/paymentMethodType\";\nimport { TransactionType } from \"../../enums/transactionType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billingResponse\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingSourceResponse } from \"./billingResponse\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { OrganizationConnectionType } from \"jslib-common/enums/organizationConnectionType\";\n\nimport { BillingSyncConfigApi } from \"../api/billingSyncConfigApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SsoPreValidateResponse extends BaseResponse {\n  token: string;\n\n  constructor(response: any) {\n    super(response);\n    this.token = this.getResponseProperty(\"Token\");\n  }\n}\n","/* eslint-disable no-useless-escape */\nimport * as tldjs from \"tldjs\";\n\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof window === \"undefined\" ? require(\"url\") : null;\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: any = null;\n  static tldEndingRegex =\n    /.*\\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n    Utils.global = Utils.isNode && !Utils.isBrowser ? global : window;\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = window.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"utf8\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      const encodedString = String.fromCharCode.apply(null, bytes);\n      return decodeURIComponent(escape(encodedString));\n    }\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(window.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(window.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static isGuid(id: string) {\n    return RegExp(\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/,\n      \"i\"\n    ).test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.hostname !== \"\" ? url.hostname : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    let httpUrl = uriString.startsWith(\"http://\") || uriString.startsWith(\"https://\");\n    if (\n      !httpUrl &&\n      uriString.indexOf(\"://\") < 0 &&\n      Utils.tldEndingRegex.test(uriString) &&\n      uriString.indexOf(\"@\") < 0\n    ) {\n      uriString = \"http://\" + uriString;\n      httpUrl = true;\n    }\n\n    if (httpUrl) {\n      try {\n        const url = Utils.getUrlObject(uriString);\n        const validHostname = tldjs?.isValid != null ? tldjs.isValid(url.hostname) : true;\n        if (!validHostname) {\n          return null;\n        }\n\n        if (url.hostname === \"localhost\" || Utils.validIpAddress(url.hostname)) {\n          return url.hostname;\n        }\n\n        const urlDomain =\n          tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(url.hostname) : null;\n        return urlDomain != null ? urlDomain : url.hostname;\n      } catch (e) {\n        // Invalid domain, try another approach below.\n      }\n    }\n\n    try {\n      const domain = tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(uriString) : null;\n\n      if (domain != null) {\n        return domain;\n      }\n    } catch {\n      return null;\n    }\n\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1])\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction(i18nService: I18nService, prop: string) {\n    return (a: any, b: any) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop], b[prop])\n        : a[prop].localeCompare(b[prop]);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    let url = Utils.getUrlObject(uriString);\n    if (url == null) {\n      const hasHttpProtocol =\n        uriString.indexOf(\"http://\") === 0 || uriString.indexOf(\"https://\") === 0;\n      if (!hasHttpProtocol && uriString.indexOf(\".\") > -1) {\n        url = Utils.getUrlObject(\"http://\" + uriString);\n      }\n    }\n    return url;\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  private static validIpAddress(ipString: string): boolean {\n    const ipRegex =\n      /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return ipRegex.test(ipString);\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4)\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      } else if (typeof URL === \"function\") {\n        return new URL(uriString);\n      } else if (window != null) {\n        const hasProtocol = uriString.indexOf(\"://\") > -1;\n        if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n          uriString = \"http://\" + uriString;\n        } else if (!hasProtocol) {\n          return null;\n        }\n        const anchor = window.document.createElement(\"a\");\n        anchor.href = uriString;\n        return anchor as any;\n      }\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n\n  constructor(protected twoFactor: TokenRequestTwoFactor, device?: DeviceRequest) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenRequestTwoFactor) {\n    this.twoFactor = twoFactor;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    if (this.twoFactor.token && this.twoFactor.provider != null) {\n      obj.twoFactorToken = this.twoFactor.token;\n      obj.twoFactorProvider = this.twoFactor.provider;\n      obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n    }\n\n    return obj;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class ApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nimport { LoginUriApi } from \"./loginUriApi\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nimport { AttachmentResponse } from \"./attachmentResponse\";\nimport { BaseResponse } from \"./baseResponse\";\nimport { PasswordHistoryResponse } from \"./passwordHistoryResponse\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n  }\n}\n\nexport class CollectionGroupDetailsResponse extends CollectionResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class DeviceVerificationResponse extends BaseResponse {\n  isDeviceVerificationSectionEnabled: boolean;\n  unknownDeviceVerificationEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.isDeviceVerificationSectionEnabled = this.getResponseProperty(\n      \"IsDeviceVerificationSectionEnabled\"\n    );\n    this.unknownDeviceVerificationEnabled = this.getResponseProperty(\n      \"UnknownDeviceVerificationEnabled\"\n    );\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { GlobalDomainResponse } from \"./globalDomainResponse\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d)\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { EmergencyAccessStatusType } from \"../../enums/emergencyAccessStatusType\";\nimport { EmergencyAccessType } from \"../../enums/emergencyAccessType\";\nimport { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class EmergencyAccessGranteeDetailsResponse extends BaseResponse {\n  id: string;\n  granteeId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.granteeId = this.getResponseProperty(\"GranteeId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessGrantorDetailsResponse extends BaseResponse {\n  id: string;\n  grantorId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.grantorId = this.getResponseProperty(\"GrantorId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessTakeoverResponse extends BaseResponse {\n  keyEncrypted: string;\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n\nexport class EmergencyAccessViewResponse extends BaseResponse {\n  keyEncrypted: string;\n  ciphers: CipherResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    } else {\n      if (status === 429) {\n        this.message = \"Rate limit exceeded. Try again later.\";\n      }\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","import { DeviceType } from \"../../enums/deviceType\";\nimport { EventType } from \"../../enums/eventType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class GroupResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  accessAll: boolean;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class GroupDetailsResponse extends GroupResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  forcePasswordReset: boolean;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  twoFactorProviders: TwoFactorProviderType[];\n  twoFactorProviders2 = new Map<TwoFactorProviderType, { [key: string]: string }>();\n  captchaToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    const twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    if (twoFactorProviders2 != null) {\n      for (const prop in twoFactorProviders2) {\n        // eslint-disable-next-line\n        if (twoFactorProviders2.hasOwnProperty(prop)) {\n          this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);\n        }\n      }\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","export enum SsoType {\n  None = 0,\n  OpenIdConnect = 1,\n  Saml2 = 2,\n}\n\nexport enum OpenIdConnectRedirectBehavior {\n  RedirectGet = 0,\n  FormPost = 1,\n}\n\nexport enum Saml2BindingType {\n  HttpRedirect = 1,\n  HttpPost = 2,\n}\n\nexport enum Saml2NameIdFormat {\n  NotConfigured = 0,\n  Unspecified = 1,\n  EmailAddress = 2,\n  X509SubjectName = 3,\n  WindowsDomainQualifiedName = 4,\n  KerberosPrincipalName = 5,\n  EntityIdentifier = 6,\n  Persistent = 7,\n  Transient = 8,\n}\n\nexport enum Saml2SigningBehavior {\n  IfIdpWantAuthnRequestsSigned = 0,\n  Always = 1,\n  Never = 3,\n}\n","import {\n  OpenIdConnectRedirectBehavior,\n  Saml2BindingType,\n  Saml2NameIdFormat,\n  Saml2SigningBehavior,\n  SsoType,\n} from \"../../enums/ssoEnums\";\nimport { BaseResponse } from \"../response/baseResponse\";\nimport { SsoConfigView } from \"../view/ssoConfigView\";\n\nexport class SsoConfigApi extends BaseResponse {\n  static fromView(view: SsoConfigView, api = new SsoConfigApi()) {\n    api.configType = view.configType;\n\n    api.keyConnectorEnabled = view.keyConnectorEnabled;\n    api.keyConnectorUrl = view.keyConnectorUrl;\n\n    if (api.configType === SsoType.OpenIdConnect) {\n      api.authority = view.openId.authority;\n      api.clientId = view.openId.clientId;\n      api.clientSecret = view.openId.clientSecret;\n      api.metadataAddress = view.openId.metadataAddress;\n      api.redirectBehavior = view.openId.redirectBehavior;\n      api.getClaimsFromUserInfoEndpoint = view.openId.getClaimsFromUserInfoEndpoint;\n      api.additionalScopes = view.openId.additionalScopes;\n      api.additionalUserIdClaimTypes = view.openId.additionalUserIdClaimTypes;\n      api.additionalEmailClaimTypes = view.openId.additionalEmailClaimTypes;\n      api.additionalNameClaimTypes = view.openId.additionalNameClaimTypes;\n      api.acrValues = view.openId.acrValues;\n      api.expectedReturnAcrValue = view.openId.expectedReturnAcrValue;\n    } else if (api.configType === SsoType.Saml2) {\n      api.spNameIdFormat = view.saml.spNameIdFormat;\n      api.spOutboundSigningAlgorithm = view.saml.spOutboundSigningAlgorithm;\n      api.spSigningBehavior = view.saml.spSigningBehavior;\n      api.spMinIncomingSigningAlgorithm = view.saml.spMinIncomingSigningAlgorithm;\n      api.spWantAssertionsSigned = view.saml.spWantAssertionsSigned;\n      api.spValidateCertificates = view.saml.spValidateCertificates;\n\n      api.idpEntityId = view.saml.idpEntityId;\n      api.idpBindingType = view.saml.idpBindingType;\n      api.idpSingleSignOnServiceUrl = view.saml.idpSingleSignOnServiceUrl;\n      api.idpSingleLogoutServiceUrl = view.saml.idpSingleLogoutServiceUrl;\n      api.idpX509PublicCert = view.saml.idpX509PublicCert;\n      api.idpOutboundSigningAlgorithm = view.saml.idpOutboundSigningAlgorithm;\n      api.idpAllowUnsolicitedAuthnResponse = view.saml.idpAllowUnsolicitedAuthnResponse;\n      api.idpWantAuthnRequestsSigned = view.saml.idpWantAuthnRequestsSigned;\n\n      // Value is inverted in the api model (disable instead of allow)\n      api.idpDisableOutboundLogoutRequests = !view.saml.idpAllowOutboundLogoutRequests;\n    }\n\n    return api;\n  }\n  configType: SsoType;\n\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n\n  // OpenId\n  authority: string;\n  clientId: string;\n  clientSecret: string;\n  metadataAddress: string;\n  redirectBehavior: OpenIdConnectRedirectBehavior;\n  getClaimsFromUserInfoEndpoint: boolean;\n  additionalScopes: string;\n  additionalUserIdClaimTypes: string;\n  additionalEmailClaimTypes: string;\n  additionalNameClaimTypes: string;\n  acrValues: string;\n  expectedReturnAcrValue: string;\n\n  // SAML\n  spNameIdFormat: Saml2NameIdFormat;\n  spOutboundSigningAlgorithm: string;\n  spSigningBehavior: Saml2SigningBehavior;\n  spMinIncomingSigningAlgorithm: boolean;\n  spWantAssertionsSigned: boolean;\n  spValidateCertificates: boolean;\n\n  idpEntityId: string;\n  idpBindingType: Saml2BindingType;\n  idpSingleSignOnServiceUrl: string;\n  idpSingleLogoutServiceUrl: string;\n  idpX509PublicCert: string;\n  idpOutboundSigningAlgorithm: string;\n  idpAllowUnsolicitedAuthnResponse: boolean;\n  idpDisableOutboundLogoutRequests: boolean;\n  idpWantAuthnRequestsSigned: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n\n    this.configType = this.getResponseProperty(\"ConfigType\");\n\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n\n    this.authority = this.getResponseProperty(\"Authority\");\n    this.clientId = this.getResponseProperty(\"ClientId\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.metadataAddress = this.getResponseProperty(\"MetadataAddress\");\n    this.redirectBehavior = this.getResponseProperty(\"RedirectBehavior\");\n    this.getClaimsFromUserInfoEndpoint = this.getResponseProperty(\"GetClaimsFromUserInfoEndpoint\");\n    this.additionalScopes = this.getResponseProperty(\"AdditionalScopes\");\n    this.additionalUserIdClaimTypes = this.getResponseProperty(\"AdditionalUserIdClaimTypes\");\n    this.additionalEmailClaimTypes = this.getResponseProperty(\"AdditionalEmailClaimTypes\");\n    this.additionalNameClaimTypes = this.getResponseProperty(\"AdditionalNameClaimTypes\");\n    this.acrValues = this.getResponseProperty(\"AcrValues\");\n    this.expectedReturnAcrValue = this.getResponseProperty(\"ExpectedReturnAcrValue\");\n\n    this.spNameIdFormat = this.getResponseProperty(\"SpNameIdFormat\");\n    this.spOutboundSigningAlgorithm = this.getResponseProperty(\"SpOutboundSigningAlgorithm\");\n    this.spSigningBehavior = this.getResponseProperty(\"SpSigningBehavior\");\n    this.spMinIncomingSigningAlgorithm = this.getResponseProperty(\"SpMinIncomingSigningAlgorithm\");\n    this.spWantAssertionsSigned = this.getResponseProperty(\"SpWantAssertionsSigned\");\n    this.spValidateCertificates = this.getResponseProperty(\"SpValidateCertificates\");\n\n    this.idpEntityId = this.getResponseProperty(\"IdpEntityId\");\n    this.idpBindingType = this.getResponseProperty(\"IdpBindingType\");\n    this.idpSingleSignOnServiceUrl = this.getResponseProperty(\"IdpSingleSignOnServiceUrl\");\n    this.idpSingleLogoutServiceUrl = this.getResponseProperty(\"IdpSingleLogoutServiceUrl\");\n    this.idpX509PublicCert = this.getResponseProperty(\"IdpX509PublicCert\");\n    this.idpOutboundSigningAlgorithm = this.getResponseProperty(\"IdpOutboundSigningAlgorithm\");\n    this.idpAllowUnsolicitedAuthnResponse = this.getResponseProperty(\n      \"IdpAllowUnsolicitedAuthnResponse\"\n    );\n    this.idpDisableOutboundLogoutRequests = this.getResponseProperty(\n      \"IdpDisableOutboundLogoutRequests\"\n    );\n    this.idpWantAuthnRequestsSigned = this.getResponseProperty(\"IdpWantAuthnRequestsSigned\");\n  }\n}\n","import { SsoConfigApi } from \"../../api/ssoConfigApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class OrganizationSsoResponse extends BaseResponse {\n  enabled: boolean;\n  data: SsoConfigApi;\n  urls: SsoUrls;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.data =\n      this.getResponseProperty(\"Data\") != null\n        ? new SsoConfigApi(this.getResponseProperty(\"Data\"))\n        : null;\n    this.urls = new SsoUrls(this.getResponseProperty(\"Urls\"));\n  }\n}\n\nclass SsoUrls extends BaseResponse {\n  callbackPath: string;\n  signedOutCallbackPath: string;\n  spEntityId: string;\n  spMetadataUrl: string;\n  spAcsUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.callbackPath = this.getResponseProperty(\"CallbackPath\");\n    this.signedOutCallbackPath = this.getResponseProperty(\"SignedOutCallbackPath\");\n    this.spEntityId = this.getResponseProperty(\"SpEntityId\");\n    this.spMetadataUrl = this.getResponseProperty(\"SpMetadataUrl\");\n    this.spAcsUrl = this.getResponseProperty(\"SpAcsUrl\");\n  }\n}\n","import { OrganizationApiKeyType } from \"../../enums/organizationApiKeyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationApiKeyInformationResponse extends BaseResponse {\n  keyType: OrganizationApiKeyType;\n\n  constructor(response: any) {\n    super(response);\n    this.keyType = this.getResponseProperty(\"KeyType\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationAutoEnrollStatusResponse extends BaseResponse {\n  id: string;\n  resetPasswordEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.resetPasswordEnabled = this.getResponseProperty(\"ResetPasswordEnabled\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeysResponse extends BaseResponse {\n  privateKey: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","import { KeysResponse } from \"./keysResponse\";\n\nexport class OrganizationKeysResponse extends KeysResponse {\n  constructor(response: any) {\n    super(response);\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\nimport { ProductType } from \"../../enums/productType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  product: ProductType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  baseSeats: number;\n  baseStorageGb: number;\n  maxCollections: number;\n  maxUsers: number;\n\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasPremiumAccessOption: boolean;\n  trialPeriodDays: number;\n\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripeStoragePlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  additionalStoragePricePerGb: number;\n  premiumAccessOptionPrice: number;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.product = this.getResponseProperty(\"Product\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxUsers = this.getResponseProperty(\"MaxUsers\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"SortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { PlanResponse } from \"./planResponse\";\n\nexport class OrganizationResponse extends BaseResponse {\n  id: string;\n  identifier: string;\n  name: string;\n  businessName: string;\n  businessAddress1: string;\n  businessAddress2: string;\n  businessAddress3: string;\n  businessCountry: string;\n  businessTaxNumber: string;\n  billingEmail: string;\n  plan: PlanResponse;\n  planType: PlanType;\n  seats: number;\n  maxAutoscaleSeats: number;\n  maxCollections: number;\n  maxStorageGb: number;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useResetPassword: boolean;\n  hasPublicAndPrivateKeys: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.businessAddress1 = this.getResponseProperty(\"BusinessAddress1\");\n    this.businessAddress2 = this.getResponseProperty(\"BusinessAddress2\");\n    this.businessAddress3 = this.getResponseProperty(\"BusinessAddress3\");\n    this.businessCountry = this.getResponseProperty(\"BusinessCountry\");\n    this.businessTaxNumber = this.getResponseProperty(\"BusinessTaxNumber\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n    const plan = this.getResponseProperty(\"Plan\");\n    this.plan = plan == null ? null : new PlanResponse(plan);\n    this.planType = this.getResponseProperty(\"PlanType\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxAutoscaleSeats = this.getResponseProperty(\"MaxAutoscaleSeats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  license: any;\n  expiration: string;\n  usingInAppPurchase: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    this.usingInAppPurchase = this.getResponseProperty(\"UsingInAppPurchase\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.trialEndDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n","import { OrganizationResponse } from \"./organizationResponse\";\nimport {\n  BillingSubscriptionResponse,\n  BillingSubscriptionUpcomingInvoiceResponse,\n} from \"./subscriptionResponse\";\n\nexport class OrganizationSubscriptionResponse extends OrganizationResponse {\n  storageName: string;\n  storageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  expiration: string;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n    this.expiration = this.getResponseProperty(\"Expiration\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAllCollections: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAssignedCollections: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    // For backwards compatibility with Server <= 1.43.0\n    this.manageAllCollections = this.getResponseProperty(\"ManageAllCollections\");\n    this.manageAssignedCollections = this.getResponseProperty(\"ManageAssignedCollections\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\nimport { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class OrganizationUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n  }\n}\n\nexport class OrganizationUserUserDetailsResponse extends OrganizationUserResponse {\n  name: string;\n  email: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n  }\n}\n\nexport class OrganizationUserDetailsResponse extends OrganizationUserResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n\nexport class OrganizationUserResetPasswordDetailsReponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  resetPasswordKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.resetPasswordKey = this.getResponseProperty(\"ResetPasswordKey\");\n    this.encryptedPrivateKey = this.getResponseProperty(\"EncryptedPrivateKey\");\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  providerId: string;\n  providerName: string;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.planProductType = this.getResponseProperty(\"PlanProductType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\"\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\"\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"./profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"./profileProviderResponse\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: string;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  masterPasswordHint: string;\n  premiumPersonally: boolean;\n  premiumFromOrganization: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.masterPasswordHint = this.getResponseProperty(\"MasterPasswordHint\");\n    this.premiumPersonally = this.getResponseProperty(\"Premium\");\n    this.premiumFromOrganization = this.getResponseProperty(\"PremiumFromOrganization\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o)\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  businessName: string;\n  billingEmail: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"../organizationUserBulkPublicKeyResponse\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { ProviderUserStatusType } from \"../../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../../enums/providerUserType\";\nimport { PermissionsApi } from \"../../api/permissionsApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\nimport { CollectionDetailsResponse } from \"./collectionResponse\";\nimport { DomainsResponse } from \"./domainsResponse\";\nimport { FolderResponse } from \"./folderResponse\";\nimport { PolicyResponse } from \"./policyResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  secretKey: string;\n  integrationKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.secretKey = this.getResponseProperty(\"SecretKey\");\n    this.integrationKey = this.getResponseProperty(\"IntegrationKey\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","import { AppIdService } from \"jslib-common/abstractions/appId.service\";\nimport { OrganizationConnectionType } from \"jslib-common/enums/organizationConnectionType\";\nimport { DeviceRequest } from \"jslib-common/models/request/deviceRequest\";\nimport { TokenRequestTwoFactor } from \"jslib-common/models/request/identityToken/tokenRequestTwoFactor\";\nimport { OrganizationConnectionRequest } from \"jslib-common/models/request/organizationConnectionRequest\";\nimport { BillingHistoryResponse } from \"jslib-common/models/response/billingHistoryResponse\";\nimport { BillingPaymentResponse } from \"jslib-common/models/response/billingPaymentResponse\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"jslib-common/models/response/organizationConnectionResponse\";\nimport { SsoPreValidateResponse } from \"jslib-common/models/response/ssoPreValidateResponse\";\n\nimport { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { DeviceType } from \"../enums/deviceType\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { Utils } from \"../misc/utils\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { VerifyOTPRequest } from \"../models/request/account/verifyOTPRequest\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { BitPayInvoiceRequest } from \"../models/request/bitPayInvoiceRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CollectionRequest } from \"../models/request/collectionRequest\";\nimport { DeleteRecoverRequest } from \"../models/request/deleteRecoverRequest\";\nimport { DeviceVerificationRequest } from \"../models/request/deviceVerificationRequest\";\nimport { EmailRequest } from \"../models/request/emailRequest\";\nimport { EmailTokenRequest } from \"../models/request/emailTokenRequest\";\nimport { EmergencyAccessAcceptRequest } from \"../models/request/emergencyAccessAcceptRequest\";\nimport { EmergencyAccessConfirmRequest } from \"../models/request/emergencyAccessConfirmRequest\";\nimport { EmergencyAccessInviteRequest } from \"../models/request/emergencyAccessInviteRequest\";\nimport { EmergencyAccessPasswordRequest } from \"../models/request/emergencyAccessPasswordRequest\";\nimport { EmergencyAccessUpdateRequest } from \"../models/request/emergencyAccessUpdateRequest\";\nimport { EventRequest } from \"../models/request/eventRequest\";\nimport { FolderRequest } from \"../models/request/folderRequest\";\nimport { GroupRequest } from \"../models/request/groupRequest\";\nimport { IapCheckRequest } from \"../models/request/iapCheckRequest\";\nimport { ApiTokenRequest } from \"../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../models/request/identityToken/ssoTokenRequest\";\nimport { ImportCiphersRequest } from \"../models/request/importCiphersRequest\";\nimport { ImportDirectoryRequest } from \"../models/request/importDirectoryRequest\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/importOrganizationCiphersRequest\";\nimport { KdfRequest } from \"../models/request/kdfRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { OrganizationSponsorshipCreateRequest } from \"../models/request/organization/organizationSponsorshipCreateRequest\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../models/request/organization/organizationSponsorshipRedeemRequest\";\nimport { OrganizationSsoRequest } from \"../models/request/organization/organizationSsoRequest\";\nimport { OrganizationApiKeyRequest } from \"../models/request/organizationApiKeyRequest\";\nimport { OrganizationCreateRequest } from \"../models/request/organizationCreateRequest\";\nimport { OrganizationImportRequest } from \"../models/request/organizationImportRequest\";\nimport { OrganizationKeysRequest } from \"../models/request/organizationKeysRequest\";\nimport { OrganizationSubscriptionUpdateRequest } from \"../models/request/organizationSubscriptionUpdateRequest\";\nimport { OrganizationTaxInfoUpdateRequest } from \"../models/request/organizationTaxInfoUpdateRequest\";\nimport { OrganizationUpdateRequest } from \"../models/request/organizationUpdateRequest\";\nimport { OrganizationUpgradeRequest } from \"../models/request/organizationUpgradeRequest\";\nimport { OrganizationUserAcceptRequest } from \"../models/request/organizationUserAcceptRequest\";\nimport { OrganizationUserBulkConfirmRequest } from \"../models/request/organizationUserBulkConfirmRequest\";\nimport { OrganizationUserBulkRequest } from \"../models/request/organizationUserBulkRequest\";\nimport { OrganizationUserConfirmRequest } from \"../models/request/organizationUserConfirmRequest\";\nimport { OrganizationUserInviteRequest } from \"../models/request/organizationUserInviteRequest\";\nimport { OrganizationUserResetPasswordEnrollmentRequest } from \"../models/request/organizationUserResetPasswordEnrollmentRequest\";\nimport { OrganizationUserResetPasswordRequest } from \"../models/request/organizationUserResetPasswordRequest\";\nimport { OrganizationUserUpdateGroupsRequest } from \"../models/request/organizationUserUpdateGroupsRequest\";\nimport { OrganizationUserUpdateRequest } from \"../models/request/organizationUserUpdateRequest\";\nimport { PasswordHintRequest } from \"../models/request/passwordHintRequest\";\nimport { PasswordRequest } from \"../models/request/passwordRequest\";\nimport { PaymentRequest } from \"../models/request/paymentRequest\";\nimport { PolicyRequest } from \"../models/request/policyRequest\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ProviderAddOrganizationRequest } from \"../models/request/provider/providerAddOrganizationRequest\";\nimport { ProviderOrganizationCreateRequest } from \"../models/request/provider/providerOrganizationCreateRequest\";\nimport { ProviderSetupRequest } from \"../models/request/provider/providerSetupRequest\";\nimport { ProviderUpdateRequest } from \"../models/request/provider/providerUpdateRequest\";\nimport { ProviderUserAcceptRequest } from \"../models/request/provider/providerUserAcceptRequest\";\nimport { ProviderUserBulkConfirmRequest } from \"../models/request/provider/providerUserBulkConfirmRequest\";\nimport { ProviderUserBulkRequest } from \"../models/request/provider/providerUserBulkRequest\";\nimport { ProviderUserConfirmRequest } from \"../models/request/provider/providerUserConfirmRequest\";\nimport { ProviderUserInviteRequest } from \"../models/request/provider/providerUserInviteRequest\";\nimport { ProviderUserUpdateRequest } from \"../models/request/provider/providerUserUpdateRequest\";\nimport { RegisterRequest } from \"../models/request/registerRequest\";\nimport { SeatRequest } from \"../models/request/seatRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { SelectionReadOnlyRequest } from \"../models/request/selectionReadOnlyRequest\";\nimport { SendAccessRequest } from \"../models/request/sendAccessRequest\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { SetPasswordRequest } from \"../models/request/setPasswordRequest\";\nimport { StorageRequest } from \"../models/request/storageRequest\";\nimport { TaxInfoUpdateRequest } from \"../models/request/taxInfoUpdateRequest\";\nimport { TwoFactorEmailRequest } from \"../models/request/twoFactorEmailRequest\";\nimport { TwoFactorProviderRequest } from \"../models/request/twoFactorProviderRequest\";\nimport { TwoFactorRecoveryRequest } from \"../models/request/twoFactorRecoveryRequest\";\nimport { UpdateDomainsRequest } from \"../models/request/updateDomainsRequest\";\nimport { UpdateKeyRequest } from \"../models/request/updateKeyRequest\";\nimport { UpdateProfileRequest } from \"../models/request/updateProfileRequest\";\nimport { UpdateTempPasswordRequest } from \"../models/request/updateTempPasswordRequest\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../models/request/updateTwoFactorAuthenticatorRequest\";\nimport { UpdateTwoFactorDuoRequest } from \"../models/request/updateTwoFactorDuoRequest\";\nimport { UpdateTwoFactorEmailRequest } from \"../models/request/updateTwoFactorEmailRequest\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../models/request/updateTwoFactorWebAuthnDeleteRequest\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../models/request/updateTwoFactorWebAuthnRequest\";\nimport { UpdateTwoFactorYubioOtpRequest } from \"../models/request/updateTwoFactorYubioOtpRequest\";\nimport { VerifyBankRequest } from \"../models/request/verifyBankRequest\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verifyDeleteRecoverRequest\";\nimport { VerifyEmailRequest } from \"../models/request/verifyEmailRequest\";\nimport { ApiKeyResponse } from \"../models/response/apiKeyResponse\";\nimport { AttachmentResponse } from \"../models/response/attachmentResponse\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { BillingResponse } from \"../models/response/billingResponse\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport {\n  CollectionGroupDetailsResponse,\n  CollectionResponse,\n} from \"../models/response/collectionResponse\";\nimport { DeviceVerificationResponse } from \"../models/response/deviceVerificationResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport {\n  EmergencyAccessGranteeDetailsResponse,\n  EmergencyAccessGrantorDetailsResponse,\n  EmergencyAccessTakeoverResponse,\n  EmergencyAccessViewResponse,\n} from \"../models/response/emergencyAccessResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { EventResponse } from \"../models/response/eventResponse\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport { GroupDetailsResponse, GroupResponse } from \"../models/response/groupResponse\";\nimport { IdentityCaptchaResponse } from \"../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\nimport { KeyConnectorUserKeyResponse } from \"../models/response/keyConnectorUserKeyResponse\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { OrganizationSsoResponse } from \"../models/response/organization/organizationSsoResponse\";\nimport { OrganizationApiKeyInformationResponse } from \"../models/response/organizationApiKeyInformationResponse\";\nimport { OrganizationAutoEnrollStatusResponse } from \"../models/response/organizationAutoEnrollStatusResponse\";\nimport { OrganizationKeysResponse } from \"../models/response/organizationKeysResponse\";\nimport { OrganizationResponse } from \"../models/response/organizationResponse\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../models/response/organizationSponsorshipSyncStatusResponse\";\nimport { OrganizationSubscriptionResponse } from \"../models/response/organizationSubscriptionResponse\";\nimport { OrganizationUserBulkPublicKeyResponse } from \"../models/response/organizationUserBulkPublicKeyResponse\";\nimport { OrganizationUserBulkResponse } from \"../models/response/organizationUserBulkResponse\";\nimport {\n  OrganizationUserDetailsResponse,\n  OrganizationUserResetPasswordDetailsReponse,\n  OrganizationUserUserDetailsResponse,\n} from \"../models/response/organizationUserResponse\";\nimport { PaymentResponse } from \"../models/response/paymentResponse\";\nimport { PlanResponse } from \"../models/response/planResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { PreloginResponse } from \"../models/response/preloginResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../models/response/provider/providerOrganizationResponse\";\nimport { ProviderResponse } from \"../models/response/provider/providerResponse\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../models/response/provider/providerUserBulkPublicKeyResponse\";\nimport { ProviderUserBulkResponse } from \"../models/response/provider/providerUserBulkResponse\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../models/response/provider/providerUserResponse\";\nimport { SelectionReadOnlyResponse } from \"../models/response/selectionReadOnlyResponse\";\nimport { SendAccessResponse } from \"../models/response/sendAccessResponse\";\nimport { SendFileDownloadDataResponse } from \"../models/response/sendFileDownloadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SubscriptionResponse } from \"../models/response/subscriptionResponse\";\nimport { SyncResponse } from \"../models/response/syncResponse\";\nimport { TaxInfoResponse } from \"../models/response/taxInfoResponse\";\nimport { TaxRateResponse } from \"../models/response/taxRateResponse\";\nimport { TwoFactorAuthenticatorResponse } from \"../models/response/twoFactorAuthenticatorResponse\";\nimport { TwoFactorDuoResponse } from \"../models/response/twoFactorDuoResponse\";\nimport { TwoFactorEmailResponse } from \"../models/response/twoFactorEmailResponse\";\nimport { TwoFactorProviderResponse } from \"../models/response/twoFactorProviderResponse\";\nimport { TwoFactorRecoverResponse } from \"../models/response/twoFactorRescoverResponse\";\nimport {\n  TwoFactorWebAuthnResponse,\n  ChallengeResponse,\n} from \"../models/response/twoFactorWebAuthnResponse\";\nimport { TwoFactorYubiKeyResponse } from \"../models/response/twoFactorYubiKeyResponse\";\nimport { UserKeyResponse } from \"../models/response/userKeyResponse\";\nimport { SendAccessView } from \"../models/view/sendAccessView\";\n\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private customUserAgent: string = null\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof ApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        await this.tokenService.clearTwoFactorToken();\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.doAuthRefresh();\n    } catch (e) {\n      return Promise.reject(null);\n    }\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  deleteAccount(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/accounts\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  postRegister(request: RegisterRequest): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      false,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postIapCheck(request: IapCheckRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/iap-check\", request, true, false);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  postCancelPremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/cancel-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountKey(request: UpdateKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/key\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountVerifyPassword(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-password\", request, true, false);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  postAccountRequestOTP(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Folder APIs\n\n  async getFolder(id: string): Promise<FolderResponse> {\n    const r = await this.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  deleteFolder(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n\n  // Send APIs\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + sendId + \"/file/\" + fileId, null, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id + \"/remove-password\", null, true, true);\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  putCipherCollections(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections\", request, true, false);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkDeleteRequest\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionDetails(\n    organizationId: string,\n    id: string\n  ): Promise<CollectionGroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new CollectionGroupDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[]\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupDetails(organizationId: string, id: string): Promise<GroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new GroupDetailsResponse(r);\n  }\n\n  async getGroups(organizationId: string): Promise<ListResponse<GroupResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, GroupResponse);\n  }\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async postGroup(organizationId: string, request: GroupRequest): Promise<GroupResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroup(\n    organizationId: string,\n    id: string,\n    request: GroupRequest\n  ): Promise<GroupResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroupUsers(organizationId: string, id: string, request: string[]): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteGroup(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Policy APIs\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        encodeURIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByInvitedUser(\n    organizationId: string,\n    userId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/invited-user?\" + \"userId=\" + userId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async putPolicy(\n    organizationId: string,\n    type: PolicyType,\n    request: PolicyRequest\n  ): Promise<PolicyResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  // Organization User APIs\n\n  async getOrganizationUser(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserDetailsResponse(r);\n  }\n\n  async getOrganizationUserGroups(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async getOrganizationUsers(\n    organizationId: string\n  ): Promise<ListResponse<OrganizationUserUserDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserUserDetailsResponse);\n  }\n\n  async getOrganizationUserResetPasswordDetails(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserResetPasswordDetailsReponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password-details\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserResetPasswordDetailsReponse(r);\n  }\n\n  async getOrganizationAutoEnrollStatus(\n    identifier: string\n  ): Promise<OrganizationAutoEnrollStatusResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + identifier + \"/auto-enroll-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationAutoEnrollStatusResponse(r);\n  }\n\n  postOrganizationUserInvite(\n    organizationId: string,\n    request: OrganizationUserInviteRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/invite\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserReinvite(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyOrganizationUserReinvite(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  postOrganizationUserAccept(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserConfirm(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postOrganizationUsersPublicKey(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkPublicKeyResponse);\n  }\n\n  async postOrganizationUserBulkConfirm(\n    organizationId: string,\n    request: OrganizationUserBulkConfirmRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  putOrganizationUser(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserGroups(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateGroupsRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPasswordEnrollment(\n    organizationId: string,\n    userId: string,\n    request: OrganizationUserResetPasswordEnrollmentRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + userId + \"/reset-password-enrollment\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPassword(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserResetPasswordRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans/\", null, true, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async postImportDirectory(organizationId: string, request: ImportDirectoryRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + organizationId + \"/import\", request, true, false);\n  }\n\n  async postPublicImportDirectory(request: OrganizationImportRequest): Promise<any> {\n    return this.send(\"POST\", \"/public/organization/import\", request, true, false);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubioOtpRequest\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  async getDeviceVerificationSettings(): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/two-factor/get-device-verification-settings\",\n      null,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  async putDeviceVerificationSettings(\n    request: DeviceVerificationRequest\n  ): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/two-factor/device-verification-settings\",\n      request,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  // Emergency Access APIs\n\n  async getEmergencyAccessTrusted(): Promise<ListResponse<EmergencyAccessGranteeDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/trusted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGranteeDetailsResponse);\n  }\n\n  async getEmergencyAccessGranted(): Promise<ListResponse<EmergencyAccessGrantorDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/granted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGrantorDetailsResponse);\n  }\n\n  async getEmergencyAccess(id: string): Promise<EmergencyAccessGranteeDetailsResponse> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id, null, true, true);\n    return new EmergencyAccessGranteeDetailsResponse(r);\n  }\n\n  async getEmergencyGrantorPolicies(id: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id + \"/policies\", null, true, true);\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  putEmergencyAccess(id: string, request: EmergencyAccessUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/emergency-access/\" + id, request, true, false);\n  }\n\n  deleteEmergencyAccess(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/emergency-access/\" + id, null, true, false);\n  }\n\n  postEmergencyAccessInvite(request: EmergencyAccessInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/invite\", request, true, false);\n  }\n\n  postEmergencyAccessReinvite(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reinvite\", null, true, false);\n  }\n\n  postEmergencyAccessAccept(id: string, request: EmergencyAccessAcceptRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/accept\", request, true, false);\n  }\n\n  postEmergencyAccessConfirm(id: string, request: EmergencyAccessConfirmRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/confirm\", request, true, false);\n  }\n\n  postEmergencyAccessInitiate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/initiate\", null, true, false);\n  }\n\n  postEmergencyAccessApprove(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/approve\", null, true, false);\n  }\n\n  postEmergencyAccessReject(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reject\", null, true, false);\n  }\n\n  async postEmergencyAccessTakeover(id: string): Promise<EmergencyAccessTakeoverResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/takeover\", null, true, true);\n    return new EmergencyAccessTakeoverResponse(r);\n  }\n\n  async postEmergencyAccessPassword(\n    id: string,\n    request: EmergencyAccessPasswordRequest\n  ): Promise<any> {\n    await this.send(\"POST\", \"/emergency-access/\" + id + \"/password\", request, true, true);\n  }\n\n  async postEmergencyAccessView(id: string): Promise<EmergencyAccessViewResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/view\", null, true, true);\n    return new EmergencyAccessViewResponse(r);\n  }\n\n  // Organization APIs\n\n  async getOrganization(id: string): Promise<OrganizationResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id, null, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async getOrganizationBilling(id: string): Promise<BillingResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/billing\", null, true, true);\n    return new BillingResponse(r);\n  }\n\n  async getOrganizationSubscription(id: string): Promise<OrganizationSubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/subscription\", null, true, true);\n    return new OrganizationSubscriptionResponse(r);\n  }\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  async getOrganizationLicense(id: string, installationId: string): Promise<any> {\n    return this.send(\n      \"GET\",\n      \"/organizations/\" + id + \"/license?installationId=\" + installationId,\n      null,\n      true,\n      true\n    );\n  }\n\n  async getOrganizationTaxInfo(id: string): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async getOrganizationSso(id: string): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/sso\", null, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganization(request: OrganizationCreateRequest): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations\", request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganization(\n    id: string,\n    request: OrganizationUpdateRequest\n  ): Promise<OrganizationResponse> {\n    const r = await this.send(\"PUT\", \"/organizations/\" + id, request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganizationTaxInfo(\n    id: string,\n    request: OrganizationTaxInfoUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/organizations/\" + id + \"/tax\", request, true, false);\n  }\n\n  postLeaveOrganization(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/leave\", null, true, false);\n  }\n\n  async postOrganizationLicense(data: FormData): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations/license\", data, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async postOrganizationLicenseUpdate(id: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/license\", data, true, false);\n  }\n\n  async postOrganizationApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async getOrganizationApiKeyInformation(\n    id: string\n  ): Promise<ListResponse<OrganizationApiKeyInformationResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + id + \"/api-key-information\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationApiKeyInformationResponse);\n  }\n\n  async postOrganizationRotateApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + id + \"/rotate-api-key\",\n      request,\n      true,\n      true\n    );\n    return new ApiKeyResponse(r);\n  }\n\n  async postOrganizationSso(\n    id: string,\n    request: OrganizationSsoRequest\n  ): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/sso\", request, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganizationUpgrade(\n    id: string,\n    request: OrganizationUpgradeRequest\n  ): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/upgrade\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationUpdateSubscription(\n    id: string,\n    request: OrganizationSubscriptionUpdateRequest\n  ): Promise<void> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/subscription\", request, true, false);\n  }\n\n  async postOrganizationSeat(id: string, request: SeatRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/seat\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationStorage(id: string, request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postOrganizationPayment(id: string, request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/payment\", request, true, false);\n  }\n\n  postOrganizationVerifyBank(id: string, request: VerifyBankRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/verify-bank\", request, true, false);\n  }\n\n  postOrganizationCancel(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/cancel\", null, true, false);\n  }\n\n  postOrganizationReinstate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/reinstate\", null, true, false);\n  }\n\n  deleteOrganization(id: string, request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/organizations/\" + id, request, true, false);\n  }\n\n  async getOrganizationKeys(id: string): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/keys\", null, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  async postOrganizationKeys(\n    id: string,\n    request: OrganizationKeysRequest\n  ): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/keys\", request, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  // Provider APIs\n\n  async postProviderSetup(id: string, request: ProviderSetupRequest) {\n    const r = await this.send(\"POST\", \"/providers/\" + id + \"/setup\", request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async getProvider(id: string) {\n    const r = await this.send(\"GET\", \"/providers/\" + id, null, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async putProvider(id: string, request: ProviderUpdateRequest) {\n    const r = await this.send(\"PUT\", \"/providers/\" + id, request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[]): Promise<any> {\n    const authHeader = await this.getActiveBearerToken();\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const response = await this.fetch(\n      new Request(this.environmentService.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      })\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getUserKeyFromKeyConnector(keyConnectorUrl: string): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      await this.doAuthRefresh();\n      accessToken = await this.tokenService.getToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersion()\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<SsoPreValidateResponse> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      })\n    );\n\n    if (response.status === 200) {\n      const body = await response.json();\n      return new SsoPreValidateResponse(body);\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false\n    );\n  }\n\n  protected async doAuthRefresh(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.doRefreshToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.doApiTokenRefresh();\n    }\n\n    throw new Error(\"Cannot refresh token, no refresh token or api keys are stored\");\n  }\n\n  protected async doRefreshToken(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const decodedToken = await this.tokenService.decodeToken();\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n      await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        tokenResponse.refreshToken,\n        null\n      );\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async doApiTokenRefresh(): Promise<void> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n\n    const tokenRequest = new ApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenRequestTwoFactor(),\n      deviceRequest\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    await this.tokenService.setToken(response.accessToken);\n  }\n\n  private async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void\n  ): Promise<any> {\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? this.environmentService.getApiUrl() : apiUrl;\n\n    const requestUrl = apiUrl + path;\n    // Prevent directory traversal from malicious paths\n    if (new URL(requestUrl).href !== requestUrl) {\n      return Promise.reject(\"Invalid request url path.\");\n    }\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    if (hasResponse && response.status === 200) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean\n  ): Promise<ErrorResponse> {\n    if (\n      authed &&\n      ((tokenError && response.status === 400) ||\n        response.status === 401 ||\n        response.status === 403)\n    ) {\n      await this.logoutCallback(true);\n      return null;\n    }\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private getCredentials(): RequestCredentials {\n    if (!this.isWebClient || this.environmentService.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { AppIdService as AppIdServiceAbstraction } from \"../abstractions/appId.service\";\nimport { StorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { Utils } from \"../misc/utils\";\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  constructor(private storageService: StorageService) {}\n\n  getAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"appId\");\n  }\n\n  getAnonymousAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"anonymousAppId\");\n  }\n\n  private async makeAndGetAppId(key: string) {\n    const existingId = await this.storageService.get<string>(key, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    if (existingId != null) {\n      return existingId;\n    }\n\n    const guid = Utils.newGuid();\n    await this.storageService.save(key, guid, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    return guid;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { throttle } from \"../misc/throttle\";\nimport { Utils } from \"../misc/utils\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  Api = 2,\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n}\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","import { AuthenticationStatus } from \"../../enums/authenticationStatus\";\nimport { KdfType } from \"../../enums/kdfType\";\nimport { UriMatchType } from \"../../enums/uriMatchType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CollectionData } from \"../data/collectionData\";\nimport { EventData } from \"../data/eventData\";\nimport { FolderData } from \"../data/folderData\";\nimport { OrganizationData } from \"../data/organizationData\";\nimport { PolicyData } from \"../data/policyData\";\nimport { ProviderData } from \"../data/providerData\";\nimport { SendData } from \"../data/sendData\";\nimport { CipherView } from \"../view/cipherView\";\nimport { CollectionView } from \"../view/collectionView\";\nimport { FolderView } from \"../view/folderView\";\nimport { SendView } from \"../view/sendView\";\n\nimport { EncString } from \"./encString\";\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { GeneratedPasswordHistory } from \"./generatedPasswordHistory\";\nimport { Policy } from \"./policy\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n}\n\nexport class DataEncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n  decrypted?: TDecrypted[];\n}\n\nexport class AccountData {\n  ciphers?: DataEncryptionPair<CipherData, CipherView> = new DataEncryptionPair<\n    CipherData,\n    CipherView\n  >();\n  folders?: DataEncryptionPair<FolderData, FolderView> = new DataEncryptionPair<\n    FolderData,\n    FolderView\n  >();\n  localData?: any;\n  sends?: DataEncryptionPair<SendData, SendView> = new DataEncryptionPair<SendData, SendView>();\n  collections?: DataEncryptionPair<CollectionData, CollectionView> = new DataEncryptionPair<\n    CollectionData,\n    CollectionView\n  >();\n  policies?: DataEncryptionPair<PolicyData, Policy> = new DataEncryptionPair<PolicyData, Policy>();\n  passwordGenerationHistory?: EncryptionPair<\n    GeneratedPasswordHistory[],\n    GeneratedPasswordHistory[]\n  > = new EncryptionPair<GeneratedPasswordHistory[], GeneratedPasswordHistory[]>();\n  addEditCipherInfo?: any;\n  eventCollection?: EventData[];\n  organizations?: { [id: string]: OrganizationData };\n  providers?: { [id: string]: ProviderData };\n}\n\nexport class AccountKeys {\n  cryptoMasterKey?: SymmetricCryptoKey;\n  cryptoMasterKeyAuto?: string;\n  cryptoMasterKeyB64?: string;\n  cryptoMasterKeyBiometric?: string;\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n  organizationKeys?: EncryptionPair<any, Map<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Map<string, SymmetricCryptoKey>\n  >();\n  providerKeys?: EncryptionPair<any, Map<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Map<string, SymmetricCryptoKey>\n  >();\n  privateKey?: EncryptionPair<string, ArrayBuffer> = new EncryptionPair<string, ArrayBuffer>();\n  legacyEtmKey?: SymmetricCryptoKey;\n  publicKey?: ArrayBuffer;\n  apiKeyClientSecret?: string;\n}\n\nexport class AccountProfile {\n  apiKeyClientId?: string;\n  authenticationStatus?: AuthenticationStatus;\n  convertAccountToKeyConnector?: boolean;\n  email?: string;\n  emailVerified?: boolean;\n  entityId?: string;\n  entityType?: string;\n  everBeenUnlocked?: boolean;\n  forcePasswordReset?: boolean;\n  hasPremiumPersonally?: boolean;\n  hasPremiumFromOrganization?: boolean;\n  lastSync?: string;\n  userId?: string;\n  usesKeyConnector?: boolean;\n  keyHash?: string;\n  kdfIterations?: number;\n  kdfType?: KdfType;\n}\n\nexport class AccountSettings {\n  autoConfirmFingerPrints?: boolean;\n  autoFillOnPageLoadDefault?: boolean;\n  biometricLocked?: boolean;\n  biometricUnlock?: boolean;\n  clearClipboard?: number;\n  collapsedGroupings?: string[];\n  defaultUriMatch?: UriMatchType;\n  disableAddLoginNotification?: boolean;\n  disableAutoBiometricsPrompt?: boolean;\n  disableAutoTotpCopy?: boolean;\n  disableBadgeCounter?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n  disableGa?: boolean;\n  dontShowCardsCurrentTab?: boolean;\n  dontShowIdentitiesCurrentTab?: boolean;\n  enableAlwaysOnTop?: boolean;\n  enableAutoFillOnPageLoad?: boolean;\n  enableBiometric?: boolean;\n  enableFullWidth?: boolean;\n  enableGravitars?: boolean;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  equivalentDomains?: any;\n  minimizeOnCopyToClipboard?: boolean;\n  neverDomains?: { [id: string]: any };\n  passwordGenerationOptions?: any;\n  usernameGenerationOptions?: any;\n  generatorOptions?: any;\n  pinProtected?: EncryptionPair<string, EncString> = new EncryptionPair<string, EncString>();\n  protectedPin?: string;\n  settings?: any; // TODO: Merge whatever is going on here into the AccountSettings model properly\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string = \"lock\";\n}\n\nexport class AccountTokens {\n  accessToken?: string;\n  decodedToken?: any;\n  refreshToken?: string;\n  securityStamp?: string;\n}\n\nexport class Account {\n  data?: AccountData = new AccountData();\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n  settings?: AccountSettings = new AccountSettings();\n  tokens?: AccountTokens = new AccountTokens();\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      data: {\n        ...new AccountData(),\n        ...init?.data,\n      },\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n      settings: {\n        ...new AccountSettings(),\n        ...init?.settings,\n      },\n      tokens: {\n        ...new AccountTokens(),\n        ...init?.tokens,\n      },\n    });\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class AuthResult {\n  captchaSiteKey = \"\";\n  resetMasterPassword = false;\n  forcePasswordReset = false;\n  twoFactorProviders: Map<TwoFactorProviderType, { [key: string]: string }> = null;\n\n  get requiresCaptcha() {\n    return !Utils.isNullOrWhitespace(this.captchaSiteKey);\n  }\n\n  get requiresTwoFactor() {\n    return this.twoFactorProviders != null;\n  }\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Account, AccountProfile, AccountTokens } from \"../../models/domain/account\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../../models/domain/logInCredentials\";\nimport { DeviceRequest } from \"../../models/request/deviceRequest\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\nimport { KeysRequest } from \"../../models/request/keysRequest\";\nimport { IdentityCaptchaResponse } from \"../../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../../models/response/identityTwoFactorResponse\";\n\nexport abstract class LogInStrategy {\n  protected abstract tokenRequest: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest;\n  protected captchaBypassToken: string = null;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService\n  ) {}\n\n  abstract logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult>;\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string = null\n  ): Promise<AuthResult> {\n    this.tokenRequest.setTwoFactor(twoFactor);\n    return this.startLogIn();\n  }\n\n  protected async startLogIn(): Promise<AuthResult> {\n    this.twoFactorService.clearSelectedProvider();\n\n    const response = await this.apiService.postIdentityToken(this.tokenRequest);\n\n    if (response instanceof IdentityTwoFactorResponse) {\n      return this.processTwoFactorResponse(response);\n    } else if (response instanceof IdentityCaptchaResponse) {\n      return this.processCaptchaResponse(response);\n    } else if (response instanceof IdentityTokenResponse) {\n      return this.processTokenResponse(response);\n    }\n\n    throw new Error(\"Invalid response object.\");\n  }\n\n  protected onSuccessfulLogin(response: IdentityTokenResponse): Promise<void> {\n    // Implemented in subclass if required\n    return null;\n  }\n\n  protected async buildDeviceRequest() {\n    const appId = await this.appIdService.getAppId();\n    return new DeviceRequest(appId, this.platformUtilsService);\n  }\n\n  protected async buildTwoFactor(userProvidedTwoFactor?: TokenRequestTwoFactor) {\n    if (userProvidedTwoFactor != null) {\n      return userProvidedTwoFactor;\n    }\n\n    const storedTwoFactorToken = await this.tokenService.getTwoFactorToken();\n    if (storedTwoFactorToken != null) {\n      return new TokenRequestTwoFactor(TwoFactorProviderType.Remember, storedTwoFactorToken, false);\n    }\n\n    return new TokenRequestTwoFactor();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    const accountInformation = await this.tokenService.decodeToken(tokenResponse.accessToken);\n    await this.stateService.addAccount(\n      new Account({\n        profile: {\n          ...new AccountProfile(),\n          ...{\n            userId: accountInformation.sub,\n            email: accountInformation.email,\n            hasPremiumPersonally: accountInformation.premium,\n            kdfIterations: tokenResponse.kdfIterations,\n            kdfType: tokenResponse.kdf,\n          },\n        },\n        tokens: {\n          ...new AccountTokens(),\n          ...{\n            accessToken: tokenResponse.accessToken,\n            refreshToken: tokenResponse.refreshToken,\n          },\n        },\n      })\n    );\n  }\n\n  protected async processTokenResponse(response: IdentityTokenResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.resetMasterPassword = response.resetMasterPassword;\n    result.forcePasswordReset = response.forcePasswordReset;\n\n    await this.saveAccountInformation(response);\n\n    if (response.twoFactorToken != null) {\n      await this.tokenService.setTwoFactorToken(response);\n    }\n\n    const newSsoUser = response.key == null;\n    if (!newSsoUser) {\n      await this.cryptoService.setEncKey(response.key);\n      await this.cryptoService.setEncPrivateKey(\n        response.privateKey ?? (await this.createKeyPairForOldAccount())\n      );\n    }\n\n    await this.onSuccessfulLogin(response);\n\n    await this.stateService.setBiometricLocked(false);\n    this.messagingService.send(\"loggedIn\");\n\n    return result;\n  }\n\n  private async processTwoFactorResponse(response: IdentityTwoFactorResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.twoFactorProviders = response.twoFactorProviders2;\n    this.twoFactorService.setProviders(response);\n    this.captchaBypassToken = response.captchaToken ?? null;\n    return result;\n  }\n\n  private async processCaptchaResponse(response: IdentityCaptchaResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.captchaSiteKey = response.siteKey;\n    return result;\n  }\n\n  private async createKeyPairForOldAccount() {\n    try {\n      const [publicKey, privateKey] = await this.cryptoService.makeKeyPair();\n      await this.apiService.postAccountKeys(new KeysRequest(publicKey, privateKey.encryptedString));\n      return privateKey.encryptedString;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../../abstractions/environment.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { ApiLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class ApiLogInStrategy extends LogInStrategy {\n  tokenRequest: ApiTokenRequest;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    if (tokenResponse.apiUseKeyConnector) {\n      const keyConnectorUrl = this.environmentService.getKeyConnectorUrl();\n      await this.keyConnectorService.getAndSetKey(keyConnectorUrl);\n    }\n  }\n\n  async logIn(credentials: ApiLogInCredentials) {\n    this.tokenRequest = new ApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    await super.saveAccountInformation(tokenResponse);\n    await this.stateService.setApiKeyClientId(this.tokenRequest.clientId);\n    await this.stateService.setApiKeyClientSecret(this.tokenRequest.clientSecret);\n  }\n}\n","import { ClientType } from \"../../../enums/clientType\";\nimport { Utils } from \"../../../misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captchaProtectedRequest\";\nimport { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { AuthService } from \"../../abstractions/auth.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { HashPurpose } from \"../../enums/hashPurpose\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport { PasswordLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class PasswordLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get masterPasswordHash() {\n    return this.tokenRequest.masterPasswordHash;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n\n  private localHashedPassword: string;\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private authService: AuthService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin() {\n    await this.cryptoService.setKey(this.key);\n    await this.cryptoService.setKeyHash(this.localHashedPassword);\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  async logIn(credentials: PasswordLogInCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    this.key = await this.authService.makePreloginKey(masterPassword, email);\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    this.localHashedPassword = await this.cryptoService.hashPassword(\n      masterPassword,\n      this.key,\n      HashPurpose.LocalAuthorization\n    );\n    const hashedPassword = await this.cryptoService.hashPassword(masterPassword, this.key);\n\n    this.tokenRequest = new PasswordTokenRequest(\n      email,\n      hashedPassword,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { SsoLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class SsoLogInStrategy extends LogInStrategy {\n  tokenRequest: SsoTokenRequest;\n  orgId: string;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (tokenResponse.keyConnectorUrl != null) {\n      if (!newSsoUser) {\n        await this.keyConnectorService.getAndSetKey(tokenResponse.keyConnectorUrl);\n      } else {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(tokenResponse, this.orgId);\n      }\n    }\n  }\n\n  async logIn(credentials: SsoLogInCredentials) {\n    this.orgId = credentials.orgId;\n    this.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","export class PreloginRequest {\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/twoFactor.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { AuthenticationType } from \"../enums/authenticationType\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { ApiLogInStrategy } from \"../misc/logInStrategies/apiLogin.strategy\";\nimport { PasswordLogInStrategy } from \"../misc/logInStrategies/passwordLogin.strategy\";\nimport { SsoLogInStrategy } from \"../misc/logInStrategies/ssoLogin.strategy\";\nimport { AuthResult } from \"../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst sessionTimeoutLength = 2 * 60 * 1000; // 2 minutes\n\nexport class AuthService implements AuthServiceAbstraction {\n  get email(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy ? this.logInStrategy.email : null;\n  }\n\n  get masterPasswordHash(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy\n      ? this.logInStrategy.masterPasswordHash\n      : null;\n  }\n\n  private logInStrategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n  private sessionTimeout: any;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected keyConnectorService: KeyConnectorService,\n    protected environmentService: EnvironmentService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected i18nService: I18nService\n  ) {}\n\n  async logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult> {\n    this.clearState();\n\n    let strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n\n    if (credentials.type === AuthenticationType.Password) {\n      strategy = new PasswordLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this\n      );\n    } else if (credentials.type === AuthenticationType.Sso) {\n      strategy = new SsoLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.keyConnectorService\n      );\n    } else if (credentials.type === AuthenticationType.Api) {\n      strategy = new ApiLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.environmentService,\n        this.keyConnectorService\n      );\n    }\n\n    const result = await strategy.logIn(credentials as any);\n\n    if (result?.requiresTwoFactor) {\n      this.saveState(strategy);\n    }\n    return result;\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    if (this.logInStrategy == null) {\n      throw new Error(this.i18nService.t(\"sessionTimeout\"));\n    }\n\n    try {\n      const result = await this.logInStrategy.logInTwoFactor(twoFactor, captchaResponse);\n\n      // Only clear state if 2FA token has been accepted, otherwise we need to be able to try again\n      if (!result.requiresTwoFactor && !result.requiresCaptcha) {\n        this.clearState();\n      }\n      return result;\n    } catch (e) {\n      // API exceptions are okay, but if there are any unhandled client-side errors then clear state to be safe\n      if (!(e instanceof ErrorResponse)) {\n        this.clearState();\n      }\n      throw e;\n    }\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messagingService.send(\"loggedOut\");\n  }\n\n  authingWithApiKey(): boolean {\n    return this.logInStrategy instanceof ApiLogInStrategy;\n  }\n\n  authingWithSso(): boolean {\n    return this.logInStrategy instanceof SsoLogInStrategy;\n  }\n\n  authingWithPassword(): boolean {\n    return this.logInStrategy instanceof PasswordLogInStrategy;\n  }\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    const isAuthenticated = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!isAuthenticated) {\n      return AuthenticationStatus.LoggedOut;\n    }\n\n    // Keys aren't stored for a device that is locked or logged out\n    // Make sure we're logged in before checking this, otherwise we could mix up those states\n    const neverLock =\n      (await this.cryptoService.hasKeyStored(KeySuffixOptions.Auto, userId)) &&\n      !(await this.stateService.getEverBeenUnlocked({ userId: userId }));\n    if (neverLock) {\n      // TODO: This also _sets_ the key so when we check memory in the next line it finds a key.\n      // We should refactor here.\n      await this.cryptoService.getKey(KeySuffixOptions.Auto, userId);\n    }\n\n    const hasKeyInMemory = await this.cryptoService.hasKeyInMemory(userId);\n    if (!hasKeyInMemory) {\n      return AuthenticationStatus.Locked;\n    }\n\n    return AuthenticationStatus.Unlocked;\n  }\n\n  async makePreloginKey(masterPassword: string, email: string): Promise<SymmetricCryptoKey> {\n    email = email.trim().toLowerCase();\n    let kdf: KdfType = null;\n    let kdfIterations: number = null;\n    try {\n      const preloginResponse = await this.apiService.postPrelogin(new PreloginRequest(email));\n      if (preloginResponse != null) {\n        kdf = preloginResponse.kdf;\n        kdfIterations = preloginResponse.kdfIterations;\n      }\n    } catch (e) {\n      if (e == null || e.statusCode !== 404) {\n        throw e;\n      }\n    }\n    return this.cryptoService.makeKey(masterPassword, email, kdf, kdfIterations);\n  }\n\n  private saveState(strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy) {\n    this.logInStrategy = strategy;\n    this.startSessionTimeout();\n  }\n\n  private clearState() {\n    this.logInStrategy = null;\n    this.clearSessionTimeout();\n  }\n\n  private startSessionTimeout() {\n    this.clearSessionTimeout();\n    this.sessionTimeout = setTimeout(() => this.clearState(), sessionTimeoutLength);\n  }\n\n  private clearSessionTimeout() {\n    if (this.sessionTimeout != null) {\n      clearTimeout(this.sessionTimeout);\n    }\n  }\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export enum UriMatchType {\n  Domain = 0,\n  Host = 1,\n  StartsWith = 2,\n  Exact = 3,\n  RegularExpression = 4,\n  Never = 5,\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n","/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n    const caches = new Map<any, Map<string, Promise<any>>>();\n\n    const getCache = (obj: any) => {\n      let cache = caches.get(obj);\n      if (cache != null) {\n        return cache;\n      }\n      cache = new Map<string, Promise<any>>();\n      caches.set(obj, cache);\n      return cache;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","import { AttachmentResponse } from \"../response/attachmentResponse\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../api/cardApi\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldApi } from \"../api/fieldApi\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../api/identityApi\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\n\nexport class LoginUriData {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../api/loginApi\";\n\nimport { LoginUriData } from \"./loginUriData\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/passwordHistoryResponse\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherResponse } from \"../response/cipherResponse\";\n\nimport { AttachmentData } from \"./attachmentData\";\nimport { CardData } from \"./cardData\";\nimport { FieldData } from \"./fieldData\";\nimport { IdentityData } from \"./identityData\";\nimport { LoginData } from \"./loginData\";\nimport { PasswordHistoryData } from \"./passwordHistoryData\";\nimport { SecureNoteData } from \"./secureNoteData\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n}\n","import { Attachment } from \"../domain/attachment\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { View } from \"./view\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncString {\n  encryptedString?: string;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string\n  ) {\n    if (data != null) {\n      // data and header\n      const encType = encryptedStringOrType as EncryptionType;\n\n      if (iv != null) {\n        this.encryptedString = encType + \".\" + iv + \"|\" + data;\n      } else {\n        this.encryptedString = encType + \".\" + data;\n      }\n\n      // mac\n      if (mac != null) {\n        this.encryptedString += \"|\" + mac;\n      }\n\n      this.encryptionType = encType;\n      this.data = data;\n      this.iv = iv;\n      this.mac = mac;\n\n      return;\n    }\n\n    this.encryptedString = encryptedStringOrType as string;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const headerPieces = this.encryptedString.split(\".\");\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        this.encryptionType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return;\n      }\n    } else {\n      encPieces = this.encryptedString.split(\"|\");\n      this.encryptionType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    switch (this.encryptionType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encPieces.length !== 3) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encPieces.length !== 2) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        if (encPieces.length !== 1) {\n          return;\n        }\n\n        this.data = encPieces[0];\n        break;\n      default:\n        return;\n    }\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    let cryptoService: CryptoService;\n    const containerService = (Utils.global as any).bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      if (key == null) {\n        key = await cryptoService.getOrgKey(orgId);\n      }\n      this.decryptedValue = await cryptoService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n}\n","import { View } from \"../view/view\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","import { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class SymmetricCryptoKey {\n  key: ArrayBuffer;\n  encKey?: ArrayBuffer;\n  macKey?: ArrayBuffer;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: ArrayBuffer, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { AttachmentData } from \"../data/attachmentData\";\nimport { AttachmentView } from \"../view/attachmentView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.key != null) {\n      let cryptoService: CryptoService;\n      const containerService = (Utils.global as any).bitwardenContainerService;\n      if (containerService) {\n        cryptoService = containerService.getCryptoService();\n      } else {\n        throw new Error(\"global bitwardenContainerService not initialized.\");\n      }\n\n      try {\n        const orgKey = await cryptoService.getOrgKey(orgId);\n        const decValue = await cryptoService.decryptToBytes(this.key, orgKey ?? encKey);\n        view.key = new SymmetricCryptoKey(decValue);\n      } catch (e) {\n        // TODO: error?\n      }\n    }\n\n    return view;\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n    return a;\n  }\n}\n","import { LinkedIdType } from \"../enums/linkedIdType\";\nimport { ItemView } from \"../models/view/itemView\";\n\nexport class LinkedMetadata {\n  constructor(readonly propertyKey: string, private readonly _i18nKey?: string) {}\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name\n *    of the class property will be used as the i18n key.\n */\nexport function linkedFieldOption(id: LinkedIdType, i18nKey?: string) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));\n  };\n}\n","import { LinkedMetadata } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { View } from \"./view\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { CardLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName)\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, \"expirationMonth\")\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, \"expirationYear\")\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, \"securityCode\")\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand)\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number)\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    if (!this.expMonth && !this.expYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (this.expYear != null ? this.formatYear(this.expYear) : \"____\");\n    return exp;\n  }\n\n  private formatYear(year: string): string {\n    return year.length === 2 ? \"20\" + year : year;\n  }\n}\n","import { CardData } from \"../data/cardData\";\nimport { CardView } from \"../view/cardView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n}\n","import { IdentityLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title)\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName)\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1)\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2)\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3)\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, \"cityTown\")\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, \"stateProvince\")\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, \"zipPostalCode\")\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country)\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company)\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email)\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone)\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn)\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber)\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber)\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName)\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName)\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName)\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n}\n","import { LoginLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\nimport { Login } from \"../domain/login\";\n\nimport { ItemView } from \"./itemView\";\nimport { LoginUriView } from \"./loginUriView\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password)\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = null;\n  autofillOnPageLoad: boolean = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote } from \"../domain/secureNote\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachmentView\";\nimport { CardView } from \"./cardView\";\nimport { FieldView } from \"./fieldView\";\nimport { IdentityView } from \"./identityView\";\nimport { LoginView } from \"./loginView\";\nimport { PasswordHistoryView } from \"./passwordHistoryView\";\nimport { SecureNoteView } from \"./secureNoteView\";\nimport { View } from \"./view\";\n\nexport class CipherView implements View {\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: any;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item.linkedFieldOptions;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Field } from \"../domain/field\";\n\nimport { View } from \"./view\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldData } from \"../data/fieldData\";\nimport { FieldView } from \"../view/fieldView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"]\n    );\n    return f;\n  }\n}\n","import { IdentityData } from \"../data/identityData\";\nimport { IdentityView } from \"../view/identityView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { Utils } from \"../../misc/utils\";\nimport { LoginUri } from \"../domain/loginUri\";\n\nimport { View } from \"./view\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class LoginUriView implements View {\n  match: UriMatchType = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchType.RegularExpression) {\n      const uri = this.launchUri;\n      for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n        if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n          this._canLaunch = true;\n          return this._canLaunch;\n        }\n      }\n    }\n    this._canLaunch = false;\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriData } from \"../data/loginUriData\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  match: UriMatchType;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        match: null,\n      },\n      [\"match\"]\n    );\n    return u;\n  }\n}\n","import { LoginData } from \"../data/loginData\";\nimport { LoginView } from \"../view/loginView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { LoginUri } from \"./loginUri\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      []\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        view.uris.push(uri);\n      }\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    return l;\n  }\n}\n","import { Password } from \"../domain/password\";\n\nimport { View } from \"./view\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n}\n","import { PasswordHistoryData } from \"../data/passwordHistoryData\";\nimport { PasswordHistoryView } from \"../view/passwordHistoryView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteData } from \"../data/secureNoteData\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nimport Domain from \"./domainBase\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secureNote\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Cipher extends Domain {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: any;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(obj?: CipherData, localData: any = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"]\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  async decrypt(encKey?: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    const orgId = this.organizationId;\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(orgId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(orgId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(orgId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n}\n","import { CipherView } from \"../view/cipherView\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL)\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf()\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n\n  constructor(ids: string[]) {\n    this.ids = ids == null ? [] : ids;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachmentRequest\";\nimport { PasswordHistoryRequest } from \"./passwordHistoryRequest\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris = null;\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.uris != null) {\n          this.login.uris = cipher.login.uris.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            return uri;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipherWithIdRequest\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport Domain from \"../models/domain/domainBase\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/loginUri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secureNote\";\nimport { SortedCiphersCache } from \"../models/domain/sortedCiphersCache\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipherBulkRestoreRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { AttachmentView } from \"../models/view/attachmentView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { PasswordHistoryView } from \"../models/view/passwordHistoryView\";\nimport { View } from \"../models/view/view\";\n\nconst DomainMatchBlacklist = new Map<string, Set<string>>([\n  [\"google.com\", new Set([\"script.google.com\"])],\n]);\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private settingsService: SettingsService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private searchService: () => SearchService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async getDecryptedCipherCache(): Promise<CipherView[]> {\n    const decryptedCiphers = await this.stateService.getDecryptedCiphers();\n    return decryptedCiphers;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[]) {\n    await this.stateService.setDecryptedCiphers(value);\n    if (this.searchService != null) {\n      if (value == null) {\n        this.searchService().clearIndex();\n      } else {\n        this.searchService().indexCiphers();\n      }\n    }\n  }\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher: Cipher = null\n  ): Promise<Cipher> {\n    // Adjust password history\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        const existingCipher = await originalCipher.decrypt();\n        model.passwordHistory = existingCipher.passwordHistory || [];\n        if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n          if (\n            existingCipher.login.password != null &&\n            existingCipher.login.password !== \"\" &&\n            existingCipher.login.password !== model.login.password\n          ) {\n            const ph = new PasswordHistoryView();\n            ph.password = existingCipher.login.password;\n            ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n            model.passwordHistory.splice(0, 0, ph);\n          } else {\n            model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n          }\n        }\n        if (existingCipher.hasFields) {\n          const existingHiddenFields = existingCipher.fields.filter(\n            (f) =>\n              f.type === FieldType.Hidden &&\n              f.name != null &&\n              f.name !== \"\" &&\n              f.value != null &&\n              f.value !== \"\"\n          );\n          const hiddenFields =\n            model.fields == null\n              ? []\n              : model.fields.filter(\n                  (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\"\n                );\n          existingHiddenFields.forEach((ef) => {\n            const matchedField = hiddenFields.find((f) => f.name === ef.name);\n            if (matchedField == null || matchedField.value !== ef.value) {\n              const ph = new PasswordHistoryView();\n              ph.password = ef.name + \": \" + ef.value;\n              ph.lastUsedDate = new Date();\n              model.passwordHistory.splice(0, 0, ph);\n            }\n          });\n        }\n      }\n      if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n        model.passwordHistory = null;\n      } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n        // only save last 5 history\n        model.passwordHistory = model.passwordHistory.slice(0, 5);\n      }\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n\n    if (key == null && cipher.organizationId != null) {\n      key = await this.cryptoService.getOrgKey(cipher.organizationId);\n      if (key == null) {\n        throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n      }\n    }\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n\n    return cipher;\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await this.stateService.getLocalData();\n    return new Cipher(ciphers[id], localData ? localData[id] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await this.stateService.getLocalData();\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        response.push(new Cipher(ciphers[id], localData ? localData[id] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    const userId = await this.stateService.getUserId();\n    if ((await this.getDecryptedCipherCache()) != null) {\n      if (\n        this.searchService != null &&\n        (this.searchService().indexedEntityId ?? userId) !== userId\n      ) {\n        await this.searchService().indexCiphers(userId, await this.getDecryptedCipherCache());\n      }\n      return await this.getDecryptedCipherCache();\n    }\n\n    const decCiphers: CipherView[] = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: any[] = [];\n    const ciphers = await this.getAll();\n    ciphers.forEach(async (cipher) => {\n      promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n    });\n\n    await Promise.all(promises);\n    decCiphers.sort(this.getLocaleSortingFunction());\n    await this.setDecryptedCipherCache(decCiphers);\n    return decCiphers;\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchType = null\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return Promise.resolve([]);\n    }\n\n    const domain = Utils.getDomain(url);\n    const eqDomainsPromise =\n      domain == null\n        ? Promise.resolve([])\n        : this.settingsService.getEquivalentDomains().then((eqDomains: any[][]) => {\n            let matches: any[] = [];\n            eqDomains.forEach((eqDomain) => {\n              if (eqDomain.length && eqDomain.indexOf(domain) >= 0) {\n                matches = matches.concat(eqDomain);\n              }\n            });\n\n            if (!matches.length) {\n              matches.push(domain);\n            }\n\n            return matches;\n          });\n\n    const result = await Promise.all([eqDomainsPromise, this.getAllDecrypted()]);\n    const matchingDomains = result[0];\n    const ciphers = result[1];\n\n    if (defaultMatch == null) {\n      defaultMatch = await this.stateService.getDefaultUriMatch();\n      if (defaultMatch == null) {\n        defaultMatch = UriMatchType.Domain;\n      }\n    }\n\n    return ciphers.filter((cipher) => {\n      if (cipher.deletedDate != null) {\n        return false;\n      }\n      if (includeOtherTypes != null && includeOtherTypes.indexOf(cipher.type) > -1) {\n        return true;\n      }\n\n      if (url != null && cipher.type === CipherType.Login && cipher.login.uris != null) {\n        for (let i = 0; i < cipher.login.uris.length; i++) {\n          const u = cipher.login.uris[i];\n          if (u.uri == null) {\n            continue;\n          }\n\n          const match = u.match == null ? defaultMatch : u.match;\n          switch (match) {\n            case UriMatchType.Domain:\n              if (domain != null && u.domain != null && matchingDomains.indexOf(u.domain) > -1) {\n                if (DomainMatchBlacklist.has(u.domain)) {\n                  const domainUrlHost = Utils.getHost(url);\n                  if (!DomainMatchBlacklist.get(u.domain).has(domainUrlHost)) {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n              break;\n            case UriMatchType.Host: {\n              const urlHost = Utils.getHost(url);\n              if (urlHost != null && urlHost === Utils.getHost(u.uri)) {\n                return true;\n              }\n              break;\n            }\n            case UriMatchType.Exact:\n              if (url === u.uri) {\n                return true;\n              }\n              break;\n            case UriMatchType.StartsWith:\n              if (url.startsWith(u.uri)) {\n                return true;\n              }\n              break;\n            case UriMatchType.RegularExpression:\n              try {\n                const regex = new RegExp(u.uri, \"i\");\n                if (regex.test(url)) {\n                  return true;\n                }\n              } catch (e) {\n                this.logService.error(e);\n              }\n              break;\n            case UriMatchType.Never:\n            default:\n              break;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const ciphers = await this.apiService.getCiphersOrganization(organizationId);\n    if (ciphers != null && ciphers.data != null && ciphers.data.length) {\n      const decCiphers: CipherView[] = [];\n      const promises: any[] = [];\n      ciphers.data.forEach((r) => {\n        const data = new CipherData(r);\n        const cipher = new Cipher(data);\n        promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n      });\n      await Promise.all(promises);\n      decCiphers.sort(this.getLocaleSortingFunction());\n      return decCiphers;\n    } else {\n      return [];\n    }\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await this.stateService.getNeverDomains();\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.stateService.setNeverDomains(domains);\n  }\n\n  async saveWithServer(cipher: Cipher): Promise<any> {\n    let response: CipherResponse;\n    if (cipher.id == null) {\n      if (cipher.collectionIds != null) {\n        const request = new CipherCreateRequest(cipher);\n        response = await this.apiService.postCipherCreate(request);\n      } else {\n        const request = new CipherRequest(cipher);\n        response = await this.apiService.postCipher(request);\n      }\n      cipher.id = response.id;\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId)\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encrypt(cipher);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encrypt(cipher).then((c) => {\n          encCiphers.push(c);\n        })\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(cipher: Cipher, unencryptedFile: any, admin = false): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            admin\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin = false\n  ): Promise<Cipher> {\n    const key = await this.cryptoService.getOrgKey(cipher.organizationId);\n    const encFileName = await this.cryptoService.encrypt(filename, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(data, dataEncKey[0]);\n\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.uploadCipherAttachment(\n        admin,\n        uploadDataResponse,\n        encFileName,\n        encData\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          admin,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1]\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<any> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    await this.apiService.putCipherCollections(cipher.id, request);\n    const data = cipher.toCipherData();\n    await this.upsert(data);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<any> {\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    if (cipher instanceof CipherData) {\n      const c = cipher as CipherData;\n      ciphers[c.id] = c;\n    } else {\n      (cipher as CipherData[]).forEach((c) => {\n        ciphers[c.id] = c;\n      });\n    }\n\n    await this.replace(ciphers);\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }): Promise<any> {\n    await this.clearDecryptedCiphersState();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (ciphers[id] == null) {\n        return;\n      }\n      delete ciphers[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteCipher(id);\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.deleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[id].attachments.length; i++) {\n      if (ciphers[id].attachments[i].id === attachmentId) {\n        ciphers[id].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: string) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async softDeleteWithServer(id: string): Promise<any> {\n    await this.apiService.putDeleteCipher(id);\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.putDeleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      if (ciphers[c.id] == null) {\n        return;\n      }\n      ciphers[c.id].deletedDate = null;\n      ciphers[c.id].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async restoreWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putRestoreCipher(id);\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  async restoreManyWithServer(ids: string[]): Promise<any> {\n    const response = await this.apiService.putRestoreManyCiphers(new CipherBulkRestoreRequest(ids));\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  // Helpers\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" })\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const buf = await attachmentResponse.arrayBuffer();\n    const decBuf = await this.cryptoService.decryptFromBytes(buf, null);\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    const encFileName = await this.cryptoService.encrypt(attachmentView.fileName, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(decBuf, dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key\n            );\n            cipher.login.uris.push(loginUri);\n          }\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.stateService.getAutoFillOnPageLoadDefault();\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false)\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId?: string) {\n    await this.stateService.setEncryptedCiphers(null, { userId: userId });\n  }\n\n  private async clearDecryptedCiphersState(userId?: string) {\n    await this.stateService.setDecryptedCiphers(null, { userId: userId });\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  parent: T;\n  node: T;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, name: string, parent: T) {\n    this.parent = parent;\n    this.node = node;\n    this.node.name = name;\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"../models/domain/treeNode\";\n\nexport class ServiceUtils {\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: ITreeNodeObject,\n    delimiter: string\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end = partIndex === parts.length - 1;\n    const partName = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== parts[partIndex]) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node with the same name.\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i].node,\n        delimiter\n      );\n      return;\n    }\n\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      if (end) {\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      const newPartName = parts[partIndex] + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter\n      );\n    }\n  }\n\n  static getTreeNodeObject(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    id: string\n  ): TreeNode<ITreeNodeObject> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { CollectionDetailsResponse } from \"../response/collectionResponse\";\n\nexport class CollectionData {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n  }\n}\n","import { Collection } from \"../domain/collection\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\nimport { CollectionGroupDetailsResponse } from \"../response/collectionResponse\";\n\nimport { View } from \"./view\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n\n  constructor(c?: Collection | CollectionGroupDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n    }\n  }\n}\n","import { CollectionData } from \"../data/collectionData\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n      },\n      [\"id\", \"organizationId\", \"externalId\", \"readOnly\", \"hidePasswords\"]\n    );\n  }\n\n  decrypt(): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId\n    );\n  }\n}\n","import { CollectionService as CollectionServiceAbstraction } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ServiceUtils } from \"../misc/serviceUtils\";\nimport { Utils } from \"../misc/utils\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCollections(null, { userId: userId });\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(collection.decrypt().then((c) => decCollections.push(c)));\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    const collections = await this.stateService.getEncryptedCollections();\n    // eslint-disable-next-line\n    if (collections == null || !collections.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Collection(collections[id]);\n  }\n\n  async getAll(): Promise<Collection[]> {\n    const collections = await this.stateService.getEncryptedCollections();\n    const response: Collection[] = [];\n    for (const id in collections) {\n      // eslint-disable-next-line\n      if (collections.hasOwnProperty(id)) {\n        response.push(new Collection(collections[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    let decryptedCollections = await this.stateService.getDecryptedCollections();\n    if (decryptedCollections != null) {\n      return decryptedCollections;\n    }\n\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const collections = await this.getAll();\n    decryptedCollections = await this.decryptMany(collections);\n    await this.stateService.setDecryptedCollections(decryptedCollections);\n    return decryptedCollections;\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObject(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(collection: CollectionData | CollectionData[]): Promise<any> {\n    let collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      collections = {};\n    }\n\n    if (collection instanceof CollectionData) {\n      const c = collection as CollectionData;\n      collections[c.id] = c;\n    } else {\n      (collection as CollectionData[]).forEach((c) => {\n        collections[c.id] = c;\n      });\n    }\n\n    await this.replace(collections);\n  }\n\n  async replace(collections: { [id: string]: CollectionData }): Promise<any> {\n    await this.clearCache();\n    await this.stateService.setEncryptedCollections(collections);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearCache(userId);\n    await this.stateService.setEncryptedCollections(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      delete collections[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete collections[i];\n      });\n    }\n\n    await this.replace(collections);\n  }\n}\n","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","import * as hrtime from \"browser-hrtime\";\n\nimport { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/logLevelType\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null\n  ) {}\n\n  debug(message: string) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message);\n  }\n\n  info(message: string) {\n    this.write(LogLevelType.Info, message);\n  }\n\n  warning(message: string) {\n    this.write(LogLevelType.Warning, message);\n  }\n\n  error(message: string) {\n    this.write(LogLevelType.Error, message);\n  }\n\n  write(level: LogLevelType, message: string) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message);\n        break;\n      default:\n        break;\n    }\n  }\n\n  time(label = \"default\") {\n    if (!this.timersMap.has(label)) {\n      this.timersMap.set(label, hrtime());\n    }\n  }\n\n  timeEnd(label = \"default\"): [number, number] {\n    const elapsed = hrtime(this.timersMap.get(label));\n    this.timersMap.delete(label);\n    this.write(LogLevelType.Info, `${label}: ${elapsed[0] * 1000 + elapsed[1] / 10e6}ms`);\n    return elapsed;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\n\nexport class ContainerService {\n  constructor(private cryptoService: CryptoService) {}\n\n  // deprecated, use attachToGlobal instead\n  attachToWindow(win: any) {\n    this.attachToGlobal(win);\n  }\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  getCryptoService(): CryptoService {\n    return this.cryptoService;\n  }\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport {\n  EnvironmentService as EnvironmentServiceAbstraction,\n  Urls,\n} from \"../abstractions/environment.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\n\nexport class EnvironmentService implements EnvironmentServiceAbstraction {\n  private readonly urlsSubject = new Subject<Urls>();\n  urls: Observable<Urls> = this.urlsSubject;\n\n  private baseUrl: string;\n  private webVaultUrl: string;\n  private apiUrl: string;\n  private identityUrl: string;\n  private iconsUrl: string;\n  private notificationsUrl: string;\n  private eventsUrl: string;\n  private keyConnectorUrl: string;\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccount.subscribe(async () => {\n      await this.setUrlsFromStorage();\n    });\n  }\n\n  hasBaseUrl() {\n    return this.baseUrl != null;\n  }\n\n  getNotificationsUrl() {\n    if (this.notificationsUrl != null) {\n      return this.notificationsUrl;\n    }\n\n    if (this.baseUrl != null) {\n      return this.baseUrl + \"/notifications\";\n    }\n\n    return \"https://notifications.bitwarden.com\";\n  }\n\n  getWebVaultUrl() {\n    if (this.webVaultUrl != null) {\n      return this.webVaultUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl;\n    }\n    return \"https://vault.bitwarden.com\";\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  getIconsUrl() {\n    if (this.iconsUrl != null) {\n      return this.iconsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/icons\";\n    }\n\n    return \"https://icons.bitwarden.net\";\n  }\n\n  getApiUrl() {\n    if (this.apiUrl != null) {\n      return this.apiUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/api\";\n    }\n\n    return \"https://api.bitwarden.com\";\n  }\n\n  getIdentityUrl() {\n    if (this.identityUrl != null) {\n      return this.identityUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/identity\";\n    }\n\n    return \"https://identity.bitwarden.com\";\n  }\n\n  getEventsUrl() {\n    if (this.eventsUrl != null) {\n      return this.eventsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/events\";\n    }\n\n    return \"https://events.bitwarden.com\";\n  }\n\n  getKeyConnectorUrl() {\n    return this.keyConnectorUrl;\n  }\n\n  async setUrlsFromStorage(): Promise<void> {\n    const urls: any = await this.stateService.getEnvironmentUrls();\n    const envUrls = new EnvironmentUrls();\n\n    this.baseUrl = envUrls.base = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = envUrls.api = urls.api;\n    this.identityUrl = envUrls.identity = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = envUrls.events = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n  }\n\n  async setUrls(urls: Urls): Promise<Urls> {\n    urls.base = this.formatUrl(urls.base);\n    urls.webVault = this.formatUrl(urls.webVault);\n    urls.api = this.formatUrl(urls.api);\n    urls.identity = this.formatUrl(urls.identity);\n    urls.icons = this.formatUrl(urls.icons);\n    urls.notifications = this.formatUrl(urls.notifications);\n    urls.events = this.formatUrl(urls.events);\n    urls.keyConnector = this.formatUrl(urls.keyConnector);\n\n    await this.stateService.setEnvironmentUrls({\n      base: urls.base,\n      api: urls.api,\n      identity: urls.identity,\n      webVault: urls.webVault,\n      icons: urls.icons,\n      notifications: urls.notifications,\n      events: urls.events,\n      keyConnector: urls.keyConnector,\n    });\n\n    this.baseUrl = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = urls.api;\n    this.identityUrl = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n\n    this.urlsSubject.next(urls);\n\n    return urls;\n  }\n\n  getUrls() {\n    return {\n      base: this.baseUrl,\n      webVault: this.webVaultUrl,\n      api: this.apiUrl,\n      identity: this.identityUrl,\n      icons: this.iconsUrl,\n      notifications: this.notificationsUrl,\n      events: this.eventsUrl,\n      keyConnector: this.keyConnectorUrl,\n    };\n  }\n\n  private formatUrl(url: string): string {\n    if (url == null || url === \"\") {\n      return null;\n    }\n\n    url = url.replace(/\\/+$/g, \"\");\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n      url = \"https://\" + url;\n    }\n\n    return url.trim();\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { EventService as EventServiceAbstraction } from \"../abstractions/event.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EventType } from \"../enums/eventType\";\nimport { EventData } from \"../models/data/eventData\";\nimport { EventRequest } from \"../models/request/eventRequest\";\n\nexport class EventService implements EventServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private apiService: ApiService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private logService: LogService,\n    private organizationService: OrganizationService\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.uploadEvents();\n      setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds\n    }\n  }\n\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false\n  ): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated();\n    if (!authed) {\n      return;\n    }\n    const organizations = await this.organizationService.getAll();\n    if (organizations == null) {\n      return;\n    }\n    const orgIds = new Set<string>(organizations.filter((o) => o.useEvents).map((o) => o.id));\n    if (orgIds.size === 0) {\n      return;\n    }\n    if (cipherId != null) {\n      const cipher = await this.cipherService.get(cipherId);\n      if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {\n        return;\n      }\n    }\n    let eventCollection = await this.stateService.getEventCollection();\n    if (eventCollection == null) {\n      eventCollection = [];\n    }\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    eventCollection.push(event);\n    await this.stateService.setEventCollection(eventCollection);\n    if (uploadImmediately) {\n      await this.uploadEvents();\n    }\n  }\n\n  async uploadEvents(userId?: string): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n    const eventCollection = await this.stateService.getEventCollection({ userId: userId });\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request);\n      this.clearEvents(userId);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async clearEvents(userId?: string): Promise<any> {\n    await this.stateService.setEventCollection(null, { userId: userId });\n  }\n}\n","export enum KdfType {\n  PBKDF2_SHA256 = 0,\n}\n\nexport const DEFAULT_KDF_TYPE = KdfType.PBKDF2_SHA256;\nexport const DEFAULT_KDF_ITERATIONS = 100000;\nexport const SEND_KDF_ITERATIONS = 100000;\n","import { Card as CardDomain } from \"../domain/card\";\nimport { EncString } from \"../domain/encString\";\nimport { CardView } from \"../view/cardView\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof CardView) {\n      this.cardholderName = o.cardholderName;\n      this.brand = o.brand;\n      this.number = o.number;\n      this.expMonth = o.expMonth;\n      this.expYear = o.expYear;\n      this.code = o.code;\n    } else {\n      this.cardholderName = o.cardholderName?.encryptedString;\n      this.brand = o.brand?.encryptedString;\n      this.number = o.number?.encryptedString;\n      this.expMonth = o.expMonth?.encryptedString;\n      this.expYear = o.expYear?.encryptedString;\n      this.code = o.code?.encryptedString;\n    }\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { EncString } from \"../domain/encString\";\nimport { Field as FieldDomain } from \"../domain/field\";\nimport { FieldView } from \"../view/fieldView\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof FieldView) {\n      this.name = o.name;\n      this.value = o.value;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.value = o.value?.encryptedString;\n    }\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Identity as IdentityDomain } from \"../domain/identity\";\nimport { IdentityView } from \"../view/identityView\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof IdentityView) {\n      this.title = o.title;\n      this.firstName = o.firstName;\n      this.middleName = o.middleName;\n      this.lastName = o.lastName;\n      this.address1 = o.address1;\n      this.address2 = o.address2;\n      this.address3 = o.address3;\n      this.city = o.city;\n      this.state = o.state;\n      this.postalCode = o.postalCode;\n      this.country = o.country;\n      this.company = o.company;\n      this.email = o.email;\n      this.phone = o.phone;\n      this.ssn = o.ssn;\n      this.username = o.username;\n      this.passportNumber = o.passportNumber;\n      this.licenseNumber = o.licenseNumber;\n    } else {\n      this.title = o.title?.encryptedString;\n      this.firstName = o.firstName?.encryptedString;\n      this.middleName = o.middleName?.encryptedString;\n      this.lastName = o.lastName?.encryptedString;\n      this.address1 = o.address1?.encryptedString;\n      this.address2 = o.address2?.encryptedString;\n      this.address3 = o.address3?.encryptedString;\n      this.city = o.city?.encryptedString;\n      this.state = o.state?.encryptedString;\n      this.postalCode = o.postalCode?.encryptedString;\n      this.country = o.country?.encryptedString;\n      this.company = o.company?.encryptedString;\n      this.email = o.email?.encryptedString;\n      this.phone = o.phone?.encryptedString;\n      this.ssn = o.ssn?.encryptedString;\n      this.username = o.username?.encryptedString;\n      this.passportNumber = o.passportNumber?.encryptedString;\n      this.licenseNumber = o.licenseNumber?.encryptedString;\n    }\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { EncString } from \"../domain/encString\";\nimport { LoginUri as LoginUriDomain } from \"../domain/loginUri\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof LoginUriView) {\n      this.uri = o.uri;\n    } else {\n      this.uri = o.uri?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Login as LoginDomain } from \"../domain/login\";\nimport { LoginView } from \"../view/loginView\";\n\nimport { LoginUriExport } from \"./loginUriExport\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      if (o instanceof LoginView) {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      } else {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      }\n    }\n\n    if (o instanceof LoginView) {\n      this.username = o.username;\n      this.password = o.password;\n      this.totp = o.totp;\n    } else {\n      this.username = o.username?.encryptedString;\n      this.password = o.password?.encryptedString;\n      this.totp = o.totp?.encryptedString;\n    }\n  }\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","export enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  // Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote as SecureNoteDomain } from \"../domain/secureNote\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { EncString } from \"../domain/encString\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CardExport } from \"./cardExport\";\nimport { FieldExport } from \"./fieldExport\";\nimport { IdentityExport } from \"./identityExport\";\nimport { LoginExport } from \"./loginExport\";\nimport { SecureNoteExport } from \"./secureNoteExport\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    if (o instanceof CipherView) {\n      this.name = o.name;\n      this.notes = o.notes;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.notes = o.notes?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      if (o instanceof CipherView) {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      } else {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      }\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n  }\n}\n","import { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CipherExport } from \"./cipherExport\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { EncString } from \"../domain/encString\";\nimport { CollectionView } from \"../view/collectionView\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    if (o instanceof CollectionView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport { CollectionExport } from \"./collectionExport\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\nimport { EventView } from \"../view/eventView\";\n\nexport class EventExport {\n  message: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: string;\n  installationId: string;\n\n  constructor(event: EventView) {\n    this.message = event.humanReadableMessage;\n    this.appIcon = event.appIcon;\n    this.appName = event.appName;\n    this.userId = event.userId;\n    this.userName = event.userName;\n    this.userEmail = event.userEmail;\n    this.date = event.date;\n    this.ip = event.ip;\n    this.type = EventType[event.type];\n    this.installationId = event.installationId;\n  }\n}\n","import { Folder } from \"../domain/folder\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\n\nimport { View } from \"./view\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n}\n","import { FolderData } from \"../data/folderData\";\nimport { FolderView } from \"../view/folderView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"]\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null\n    );\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    if (o instanceof FolderView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n  }\n}\n","import { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nimport { FolderExport } from \"./folderExport\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","import * as papa from \"papaparse\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport {\n  ExportFormat,\n  ExportService as ExportServiceAbstraction,\n} from \"../abstractions/export.service\";\nimport { FolderService } from \"../abstractions/folder.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { DEFAULT_KDF_ITERATIONS, KdfType } from \"../enums/kdfType\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Collection } from \"../models/domain/collection\";\nimport { Folder } from \"../models/domain/folder\";\nimport { CipherWithIdExport as CipherExport } from \"../models/export/cipherWithIdsExport\";\nimport { CollectionWithIdExport as CollectionExport } from \"../models/export/collectionWithIdExport\";\nimport { EventExport } from \"../models/export/eventExport\";\nimport { FolderWithIdExport as FolderExport } from \"../models/export/folderWithIdExport\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { EventView } from \"../models/view/eventView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nexport class ExportService implements ExportServiceAbstraction {\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", organizationId?: string): Promise<string> {\n    if (organizationId) {\n      return await this.getOrganizationExport(organizationId, format);\n    }\n\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    } else {\n      return this.getDecryptedExport(format);\n    }\n  }\n\n  async getPasswordProtectedExport(password: string, organizationId?: string): Promise<string> {\n    const clearText = organizationId\n      ? await this.getOrganizationExport(organizationId, \"json\")\n      : await this.getExport(\"json\");\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const kdfIterations = DEFAULT_KDF_ITERATIONS;\n    const key = await this.cryptoService.makePinKey(\n      password,\n      salt,\n      KdfType.PBKDF2_SHA256,\n      kdfIterations\n    );\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfIterations: kdfIterations,\n      kdfType: KdfType.PBKDF2_SHA256,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\"\n  ): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getOrganizationEncryptedExport(organizationId);\n    } else {\n      return this.getOrganizationDecryptedExport(organizationId, format);\n    }\n  }\n\n  async getEventExport(events: EventView[]): Promise<string> {\n    return papa.unparse(events.map((e) => new EventExport(e)));\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllDecrypted().then((folders) => {\n        decFolders = folders;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const foldersMap = new Map<string, FolderView>();\n      decFolders.forEach((f) => {\n        if (f.id != null) {\n          foldersMap.set(f.id, f);\n        }\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n        if (c.organizationId != null) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.folder =\n          c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n        cipher.favorite = c.favorite ? 1 : null;\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        folders: [],\n        items: [],\n      };\n\n      decFolders.forEach((f) => {\n        if (f.id == null) {\n          return;\n        }\n        const folder = new FolderExport();\n        folder.build(f);\n        jsonDoc.folders.push(folder);\n      });\n\n      decCiphers.forEach((c) => {\n        if (c.organizationId != null) {\n          return;\n        }\n        const cipher = new CipherExport();\n        cipher.build(c);\n        cipher.collectionIds = null;\n        jsonDoc.items.push(cipher);\n      });\n\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAll().then((f) => {\n        folders = f;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\"\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((collections) => {\n        const collectionPromises: any = [];\n        if (collections != null && collections.data != null && collections.data.length > 0) {\n          collections.data.forEach((c) => {\n            const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n            collectionPromises.push(\n              collection.decrypt().then((decCol) => {\n                decCollections.push(decCol);\n              })\n            );\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((ciphers) => {\n        const cipherPromises: any = [];\n        if (ciphers != null && ciphers.data != null && ciphers.data.length > 0) {\n          ciphers.data\n            .filter((c) => c.deletedDate === null)\n            .forEach((c) => {\n              const cipher = new Cipher(new CipherData(c));\n              cipherPromises.push(\n                cipher.decrypt().then((decCipher) => {\n                  decCiphers.push(decCipher);\n                })\n              );\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const collectionsMap = new Map<string, CollectionView>();\n      decCollections.forEach((c) => {\n        collectionsMap.set(c.id, c);\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.collections = [];\n        if (c.collectionIds != null) {\n          cipher.collections = c.collectionIds\n            .filter((id) => collectionsMap.has(id))\n            .map((id) => collectionsMap.get(id).name);\n        }\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        collections: [],\n        items: [],\n      };\n\n      decCollections.forEach((c) => {\n        const collection = new CollectionExport();\n        collection.build(c);\n        jsonDoc.collections.push(collection);\n      });\n\n      decCiphers.forEach((c) => {\n        const cipher = new CipherExport();\n        cipher.build(c);\n        jsonDoc.items.push(cipher);\n      });\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        const collectionPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        const cipherPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n\n  private buildCommonCipher(cipher: any, c: CipherView) {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f: any) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import { LogService } from \"../abstractions/log.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n      ? a.month - b.month\n      : a.day !== b.day\n      ? a.day - b.day\n      : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nexport class BitwardenFileUploadService {\n  constructor(private apiService: ApiService) {}\n\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"../abstractions/fileUpload.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { FileUploadType } from \"../enums/fileUploadType\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\n\nimport { AzureFileUploadService } from \"./azureFileUpload.service\";\nimport { BitwardenFileUploadService } from \"./bitwardenFileUpload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(private logService: LogService, private apiService: ApiService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService(apiService);\n  }\n\n  async uploadSendFile(\n    uploadData: SendFileUploadDataResponse,\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) =>\n              this.apiService.postSendFile(\n                uploadData.sendResponse.id,\n                uploadData.sendResponse.file.id,\n                fd\n              )\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewSendFileUploadUrl(\n              uploadData.sendResponse.id,\n              uploadData.sendResponse.file.id\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await this.apiService.deleteSend(uploadData.sendResponse.id);\n      throw e;\n    }\n  }\n\n  async uploadCipherAttachment(\n    admin: boolean,\n    uploadData: AttachmentUploadDataResponse,\n    encryptedFileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    const response = admin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            encryptedFileName.encryptedString,\n            encryptedFileData,\n            (fd) => this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, fd)\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewAttachmentUploadUrl(\n              response.id,\n              uploadData.attachmentId\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type.\");\n      }\n    } catch (e) {\n      if (admin) {\n        await this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        await this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n      throw e;\n    }\n  }\n}\n","import { FolderResponse } from \"../response/folderResponse\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: FolderResponse) {\n    this.name = response.name;\n    this.id = response.id;\n    this.revisionDate = response.revisionDate;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService as FolderServiceAbstraction } from \"../abstractions/folder.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ServiceUtils } from \"../misc/serviceUtils\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { Folder } from \"../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { FolderRequest } from \"../models/request/folderRequest\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport { FolderView } from \"../models/view/folderView\";\n\nconst NestingDelimiter = \"/\";\n\nexport class FolderService implements FolderServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedFolders(null, { userId: userId });\n  }\n\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = await this.stateService.getEncryptedFolders();\n    // eslint-disable-next-line\n    if (folders == null || !folders.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Folder(folders[id]);\n  }\n\n  async getAll(): Promise<Folder[]> {\n    const folders = await this.stateService.getEncryptedFolders();\n    const response: Folder[] = [];\n    for (const id in folders) {\n      // eslint-disable-next-line\n      if (folders.hasOwnProperty(id)) {\n        response.push(new Folder(folders[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<FolderView[]> {\n    const decryptedFolders = await this.stateService.getDecryptedFolders();\n    if (decryptedFolders != null) {\n      return decryptedFolders;\n    }\n\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const decFolders: FolderView[] = [];\n    const promises: Promise<any>[] = [];\n    const folders = await this.getAll();\n    folders.forEach((folder) => {\n      promises.push(folder.decrypt().then((f) => decFolders.push(f)));\n    });\n\n    await Promise.all(promises);\n    decFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decFolders.push(noneFolder);\n\n    await this.stateService.setDecryptedFolders(decFolders);\n    return decFolders;\n  }\n\n  async getAllNested(folders?: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    folders = folders ?? (await this.getAllDecrypted());\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObject(folders, id) as TreeNode<FolderView>;\n  }\n\n  async saveWithServer(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.apiService.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.apiService.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.upsert(data);\n  }\n\n  async upsert(folder: FolderData | FolderData[]): Promise<any> {\n    let folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      folders = {};\n    }\n\n    if (folder instanceof FolderData) {\n      const f = folder as FolderData;\n      folders[f.id] = f;\n    } else {\n      (folder as FolderData[]).forEach((f) => {\n        folders[f.id] = f;\n      });\n    }\n\n    await this.stateService.setDecryptedFolders(null);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async replace(folders: { [id: string]: FolderData }): Promise<any> {\n    await this.stateService.setDecryptedFolders(null);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setDecryptedFolders(null, { userId: userId });\n    await this.stateService.setEncryptedFolders(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (folders[id] == null) {\n        return;\n      }\n      delete folders[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete folders[i];\n      });\n    }\n\n    await this.stateService.setDecryptedFolders(null);\n    await this.stateService.setEncryptedFolders(folders);\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers != null) {\n      const updates: CipherData[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        this.cipherService.upsert(updates);\n      }\n    }\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteFolder(id);\n    await this.delete(id);\n  }\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n","import { KdfType } from \"../../../enums/kdfType\";\nimport { KeysRequest } from \"../keysRequest\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  orgIdentifier: string;\n\n  constructor(\n    key: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    orgIdentifier: string,\n    keys: KeysRequest\n  ) {\n    this.key = key;\n    this.kdf = kdf;\n    this.kdfIterations = kdfIterations;\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { Utils } from \"../misc/utils\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private logoutCallback: (expired: boolean, userId?: string) => void\n  ) {}\n\n  setUsesKeyConnector(usesKeyConnector: boolean) {\n    return this.stateService.setUsesKeyConnector(usesKeyConnector);\n  }\n\n  async getUsesKeyConnector(): Promise<boolean> {\n    return await this.stateService.getUsesKeyConnector();\n  }\n\n  async userNeedsMigration() {\n    const loggedInUsingSso = await this.tokenService.getIsExternal();\n    const requiredByOrganization = (await this.getManagingOrganization()) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector());\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser() {\n    const organization = await this.getManagingOrganization();\n    const key = await this.cryptoService.getKey();\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(key.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  async getAndSetKey(url: string) {\n    try {\n      const userKeyResponse = await this.apiService.getUserKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(userKeyResponse.key);\n      const k = new SymmetricCryptoKey(keyArr);\n      await this.cryptoService.setKey(k);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization() {\n    const orgs = await this.organizationService.getAll();\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(tokenResponse: IdentityTokenResponse, orgId: string) {\n    const { kdf, kdfIterations, keyConnectorUrl } = tokenResponse;\n    const password = await this.cryptoFunctionService.randomBytes(64);\n\n    const k = await this.cryptoService.makeKey(\n      Utils.fromBufferToB64(password),\n      await this.tokenService.getEmail(),\n      kdf,\n      kdfIterations\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(k.encKeyB64);\n    await this.cryptoService.setKey(k);\n\n    const encKey = await this.cryptoService.makeEncKey(k);\n    await this.cryptoService.setEncKey(encKey[1].encryptedString);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair();\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      encKey[1].encryptedString,\n      kdf,\n      kdfIterations,\n      orgId,\n      keys\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean) {\n    await this.stateService.setConvertAccountToKeyConnector(status);\n  }\n\n  async getConvertAccountRequired(): Promise<boolean> {\n    return await this.stateService.getConvertAccountToKeyConnector();\n  }\n\n  async removeConvertAccountRequired() {\n    await this.stateService.setConvertAccountToKeyConnector(null);\n  }\n\n  async clear() {\n    await this.removeConvertAccountRequired();\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      this.logoutCallback(false);\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n}\n","import { NotificationType } from \"../../enums/notificationType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n}\n","export enum Permissions {\n  AccessEventLogs,\n  AccessImportExport,\n  AccessReports,\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  ManageAllCollections,\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  ManageAssignedCollections,\n  ManageGroups,\n  ManageOrganization,\n  ManagePolicies,\n  ManageProvider,\n  ManageUsers,\n  ManageUsersPassword,\n  CreateNewCollections,\n  EditAnyCollection,\n  DeleteAnyCollection,\n  EditAssignedCollections,\n  DeleteAssignedCollections,\n  ManageSso,\n  ManageBilling,\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService } from \"../abstractions/auth.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService } from \"../abstractions/sync.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { NotificationType } from \"../enums/notificationType\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimer: any = null;\n\n  constructor(\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private logService: LogService,\n    private stateService: StateService,\n    private authService: AuthService\n  ) {\n    this.environmentService.urls.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = this.environmentService.getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data))\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          this.logoutCallback(true);\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    if (this.reconnectTimer != null) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { Permissions } from \"../../enums/permissions\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { OrganizationData } from \"../data/organizationData\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useResetPassword = obj.useResetPassword;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.isProviderUser = obj.isProviderUser;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.planProductType = obj.planProductType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n  }\n\n  get canAccess() {\n    if (this.type === OrganizationUserType.Owner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  get isManager() {\n    return (\n      this.type === OrganizationUserType.Manager ||\n      this.type === OrganizationUserType.Owner ||\n      this.type === OrganizationUserType.Admin\n    );\n  }\n\n  get isAdmin() {\n    return this.type === OrganizationUserType.Owner || this.type === OrganizationUserType.Admin;\n  }\n\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return this.isAdmin || this.permissions.accessEventLogs;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.createNewCollections ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canEditAnyCollection() {\n    return (\n      this.isAdmin || (this.permissions.editAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canDeleteAnyCollection() {\n    return (\n      this.isAdmin ||\n      (this.permissions.deleteAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canViewAllCollections() {\n    return this.canCreateNewCollections || this.canEditAnyCollection || this.canDeleteAnyCollection;\n  }\n\n  get canEditAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.editAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canDeleteAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.deleteAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canViewAssignedCollections() {\n    return this.canDeleteAssignedCollections || this.canEditAssignedCollections;\n  }\n\n  get canManageGroups() {\n    return this.isAdmin || this.permissions.manageGroups;\n  }\n\n  get canManageSso() {\n    return this.isAdmin || this.permissions.manageSso;\n  }\n\n  get canManagePolicies() {\n    return this.isAdmin || this.permissions.managePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  hasAnyPermission(permissions: Permissions[]) {\n    const specifiedPermissions =\n      (permissions.includes(Permissions.AccessEventLogs) && this.canAccessEventLogs) ||\n      (permissions.includes(Permissions.AccessImportExport) && this.canAccessImportExport) ||\n      (permissions.includes(Permissions.AccessReports) && this.canAccessReports) ||\n      (permissions.includes(Permissions.CreateNewCollections) && this.canCreateNewCollections) ||\n      (permissions.includes(Permissions.EditAnyCollection) && this.canEditAnyCollection) ||\n      (permissions.includes(Permissions.DeleteAnyCollection) && this.canDeleteAnyCollection) ||\n      (permissions.includes(Permissions.EditAssignedCollections) &&\n        this.canEditAssignedCollections) ||\n      (permissions.includes(Permissions.DeleteAssignedCollections) &&\n        this.canDeleteAssignedCollections) ||\n      (permissions.includes(Permissions.ManageGroups) && this.canManageGroups) ||\n      (permissions.includes(Permissions.ManageOrganization) && this.isOwner) ||\n      (permissions.includes(Permissions.ManagePolicies) && this.canManagePolicies) ||\n      (permissions.includes(Permissions.ManageUsers) && this.canManageUsers) ||\n      (permissions.includes(Permissions.ManageUsersPassword) && this.canManageUsersPassword) ||\n      (permissions.includes(Permissions.ManageSso) && this.canManageSso) ||\n      (permissions.includes(Permissions.ManageBilling) && this.canManageBilling);\n\n    return specifiedPermissions && (this.enabled || this.isOwner);\n  }\n\n  get canManageBilling() {\n    return this.isOwner && (this.isProviderUser || !this.hasProvider);\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n}\n","import { OrganizationService as OrganizationServiceAbstraction } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport class OrganizationService implements OrganizationServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Organization> {\n    const organizations = await this.stateService.getOrganizations();\n    // eslint-disable-next-line\n    if (organizations == null || !organizations.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Organization(organizations[id]);\n  }\n\n  async getByIdentifier(identifier: string): Promise<Organization> {\n    const organizations = await this.getAll();\n    if (organizations == null || organizations.length === 0) {\n      return null;\n    }\n\n    return organizations.find((o) => o.identifier === identifier);\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    const organizations = await this.stateService.getOrganizations({ userId: userId });\n    const response: Organization[] = [];\n    for (const id in organizations) {\n      // eslint-disable-next-line\n      if (organizations.hasOwnProperty(id) && !organizations[id].isProviderUser) {\n        response.push(new Organization(organizations[id]));\n      }\n    }\n    const sortedResponse = response.sort((a, b) => a.name.localeCompare(b.name));\n    return sortedResponse;\n  }\n\n  async save(organizations: { [id: string]: OrganizationData }) {\n    return await this.stateService.setOrganizations(organizations);\n  }\n\n  async canManageSponsorships(): Promise<boolean> {\n    const orgs = await this.getAll();\n    return orgs.some(\n      (o) => o.familySponsorshipAvailable || o.familySponsorshipFriendlyName !== null\n    );\n  }\n\n  async hasOrganizations(userId?: string): Promise<boolean> {\n    const organizations = await this.getAll(userId);\n    return organizations.length > 0;\n  }\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EEFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  defaultType = \"\";\n  minLength = 0;\n  useUppercase = false;\n  useLowercase = false;\n  useNumbers = false;\n  numberCount = 0;\n  useSpecial = false;\n  specialCount = 0;\n  minNumberWords = 0;\n  capitalize = false;\n  includeNumber = false;\n\n  inEffect() {\n    return (\n      this.defaultType !== \"\" ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"../abstractions/passwordGeneration.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncString } from \"../models/domain/encString\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { PasswordGeneratorPolicyOptions } from \"../models/domain/passwordGeneratorPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\n\nconst DefaultOptions = {\n  length: 14,\n  ambiguous: false,\n  number: true,\n  minNumber: 1,\n  uppercase: true,\n  minUppercase: 0,\n  lowercase: true,\n  minLowercase: 0,\n  special: false,\n  minSpecial: 1,\n  type: \"password\",\n  numWords: 3,\n  wordSeparator: \"-\",\n  capitalize: false,\n  includeNumber: false,\n};\n\nconst MaxPasswordsInHistory = 100;\n\nexport class PasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private policyService: PolicyService,\n    private stateService: StateService\n  ) {}\n\n  async generatePassword(options: any): Promise<string> {\n    // overload defaults with given options\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.type === \"passphrase\") {\n      return this.generatePassphrase(options);\n    }\n\n    // sanitize\n    this.sanitizePasswordLength(o, true);\n\n    const minLength: number = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;\n    if (o.length < minLength) {\n      o.length = minLength;\n    }\n\n    const positions: string[] = [];\n    if (o.lowercase && o.minLowercase > 0) {\n      for (let i = 0; i < o.minLowercase; i++) {\n        positions.push(\"l\");\n      }\n    }\n    if (o.uppercase && o.minUppercase > 0) {\n      for (let i = 0; i < o.minUppercase; i++) {\n        positions.push(\"u\");\n      }\n    }\n    if (o.number && o.minNumber > 0) {\n      for (let i = 0; i < o.minNumber; i++) {\n        positions.push(\"n\");\n      }\n    }\n    if (o.special && o.minSpecial > 0) {\n      for (let i = 0; i < o.minSpecial; i++) {\n        positions.push(\"s\");\n      }\n    }\n    while (positions.length < o.length) {\n      positions.push(\"a\");\n    }\n\n    // shuffle\n    await this.shuffleArray(positions);\n\n    // build out the char sets\n    let allCharSet = \"\";\n\n    let lowercaseCharSet = \"abcdefghijkmnopqrstuvwxyz\";\n    if (o.ambiguous) {\n      lowercaseCharSet += \"l\";\n    }\n    if (o.lowercase) {\n      allCharSet += lowercaseCharSet;\n    }\n\n    let uppercaseCharSet = \"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n    if (o.ambiguous) {\n      uppercaseCharSet += \"IO\";\n    }\n    if (o.uppercase) {\n      allCharSet += uppercaseCharSet;\n    }\n\n    let numberCharSet = \"23456789\";\n    if (o.ambiguous) {\n      numberCharSet += \"01\";\n    }\n    if (o.number) {\n      allCharSet += numberCharSet;\n    }\n\n    const specialCharSet = \"!@#$%^&*\";\n    if (o.special) {\n      allCharSet += specialCharSet;\n    }\n\n    let password = \"\";\n    for (let i = 0; i < o.length; i++) {\n      let positionChars: string;\n      switch (positions[i]) {\n        case \"l\":\n          positionChars = lowercaseCharSet;\n          break;\n        case \"u\":\n          positionChars = uppercaseCharSet;\n          break;\n        case \"n\":\n          positionChars = numberCharSet;\n          break;\n        case \"s\":\n          positionChars = specialCharSet;\n          break;\n        case \"a\":\n          positionChars = allCharSet;\n          break;\n        default:\n          break;\n      }\n\n      const randomCharIndex = await this.cryptoService.randomNumber(0, positionChars.length - 1);\n      password += positionChars.charAt(randomCharIndex);\n    }\n\n    return password;\n  }\n\n  async generatePassphrase(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.numWords == null || o.numWords <= 2) {\n      o.numWords = DefaultOptions.numWords;\n    }\n    if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {\n      o.wordSeparator = \" \";\n    }\n    if (o.capitalize == null) {\n      o.capitalize = false;\n    }\n    if (o.includeNumber == null) {\n      o.includeNumber = false;\n    }\n\n    const listLength = EEFLongWordList.length - 1;\n    const wordList = new Array(o.numWords);\n    for (let i = 0; i < o.numWords; i++) {\n      const wordIndex = await this.cryptoService.randomNumber(0, listLength);\n      if (o.capitalize) {\n        wordList[i] = this.capitalize(EEFLongWordList[wordIndex]);\n      } else {\n        wordList[i] = EEFLongWordList[wordIndex];\n      }\n    }\n\n    if (o.includeNumber) {\n      await this.appendRandomNumberToRandomWord(wordList);\n    }\n    return wordList.join(o.wordSeparator);\n  }\n\n  async getOptions(): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let options = await this.stateService.getPasswordGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setPasswordGenerationOptions(options);\n    const enforcedOptions = await this.enforcePasswordGeneratorPoliciesOnOptions(options);\n    options = enforcedOptions[0];\n    return [options, enforcedOptions[1]];\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(\n    options: any\n  ): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let enforcedPolicyOptions = await this.getPasswordGeneratorPolicyOptions();\n    if (enforcedPolicyOptions != null) {\n      if (options.length < enforcedPolicyOptions.minLength) {\n        options.length = enforcedPolicyOptions.minLength;\n      }\n\n      if (enforcedPolicyOptions.useUppercase) {\n        options.uppercase = true;\n      }\n\n      if (enforcedPolicyOptions.useLowercase) {\n        options.lowercase = true;\n      }\n\n      if (enforcedPolicyOptions.useNumbers) {\n        options.number = true;\n      }\n\n      if (options.minNumber < enforcedPolicyOptions.numberCount) {\n        options.minNumber = enforcedPolicyOptions.numberCount;\n      }\n\n      if (enforcedPolicyOptions.useSpecial) {\n        options.special = true;\n      }\n\n      if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n        options.minSpecial = enforcedPolicyOptions.specialCount;\n      }\n\n      // Must normalize these fields because the receiving call expects all options to pass the current rules\n      if (options.minSpecial + options.minNumber > options.length) {\n        options.minSpecial = options.length - options.minNumber;\n      }\n\n      if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n        options.numWords = enforcedPolicyOptions.minNumberWords;\n      }\n\n      if (enforcedPolicyOptions.capitalize) {\n        options.capitalize = true;\n      }\n\n      if (enforcedPolicyOptions.includeNumber) {\n        options.includeNumber = true;\n      }\n\n      // Force default type if password/passphrase selected via policy\n      if (\n        enforcedPolicyOptions.defaultType === \"password\" ||\n        enforcedPolicyOptions.defaultType === \"passphrase\"\n      ) {\n        options.type = enforcedPolicyOptions.defaultType;\n      }\n    } else {\n      // UI layer expects an instantiated object to prevent more explicit null checks\n      enforcedPolicyOptions = new PasswordGeneratorPolicyOptions();\n    }\n    return [options, enforcedPolicyOptions];\n  }\n\n  async getPasswordGeneratorPolicyOptions(): Promise<PasswordGeneratorPolicyOptions> {\n    const policies: Policy[] =\n      this.policyService == null\n        ? null\n        : await this.policyService.getAll(PolicyType.PasswordGenerator);\n    let enforcedOptions: PasswordGeneratorPolicyOptions = null;\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new PasswordGeneratorPolicyOptions();\n      }\n\n      // Password wins in multi-org collisions\n      if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== \"password\") {\n        enforcedOptions.defaultType = currentPolicy.data.defaultType;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.useUpper) {\n        enforcedOptions.useUppercase = true;\n      }\n\n      if (currentPolicy.data.useLower) {\n        enforcedOptions.useLowercase = true;\n      }\n\n      if (currentPolicy.data.useNumbers) {\n        enforcedOptions.useNumbers = true;\n      }\n\n      if (\n        currentPolicy.data.minNumbers != null &&\n        currentPolicy.data.minNumbers > enforcedOptions.numberCount\n      ) {\n        enforcedOptions.numberCount = currentPolicy.data.minNumbers;\n      }\n\n      if (currentPolicy.data.useSpecial) {\n        enforcedOptions.useSpecial = true;\n      }\n\n      if (\n        currentPolicy.data.minSpecial != null &&\n        currentPolicy.data.minSpecial > enforcedOptions.specialCount\n      ) {\n        enforcedOptions.specialCount = currentPolicy.data.minSpecial;\n      }\n\n      if (\n        currentPolicy.data.minNumberWords != null &&\n        currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords\n      ) {\n        enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;\n      }\n\n      if (currentPolicy.data.capitalize) {\n        enforcedOptions.capitalize = true;\n      }\n\n      if (currentPolicy.data.includeNumber) {\n        enforcedOptions.includeNumber = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setPasswordGenerationOptions(options);\n  }\n\n  async getHistory(): Promise<GeneratedPasswordHistory[]> {\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return new Array<GeneratedPasswordHistory>();\n    }\n\n    if ((await this.stateService.getDecryptedPasswordGenerationHistory()) == null) {\n      const encrypted = await this.stateService.getEncryptedPasswordGenerationHistory();\n      const decrypted = await this.decryptHistory(encrypted);\n      await this.stateService.setDecryptedPasswordGenerationHistory(decrypted);\n    }\n\n    const passwordGenerationHistory =\n      await this.stateService.getDecryptedPasswordGenerationHistory();\n    return passwordGenerationHistory != null\n      ? passwordGenerationHistory\n      : new Array<GeneratedPasswordHistory>();\n  }\n\n  async addHistory(password: string): Promise<any> {\n    // Cannot add new history if no key is available\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return;\n    }\n\n    const currentHistory = await this.getHistory();\n\n    // Prevent duplicates\n    if (this.matchesPrevious(password, currentHistory)) {\n      return;\n    }\n\n    currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));\n\n    // Remove old items.\n    if (currentHistory.length > MaxPasswordsInHistory) {\n      currentHistory.pop();\n    }\n\n    const newHistory = await this.encryptHistory(currentHistory);\n    return await this.stateService.setEncryptedPasswordGenerationHistory(newHistory);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setEncryptedPasswordGenerationHistory(null, { userId: userId });\n    await this.stateService.setDecryptedPasswordGenerationHistory(null, { userId: userId });\n  }\n\n  passwordStrength(password: string, userInputs: string[] = null): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    let globalUserInputs = [\"bitwarden\", \"bit\", \"warden\"];\n    if (userInputs != null && userInputs.length > 0) {\n      globalUserInputs = globalUserInputs.concat(userInputs);\n    }\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  normalizeOptions(options: any, enforcedPolicyOptions: PasswordGeneratorPolicyOptions) {\n    options.minLowercase = 0;\n    options.minUppercase = 0;\n\n    if (!options.length || options.length < 5) {\n      options.length = 5;\n    } else if (options.length > 128) {\n      options.length = 128;\n    }\n\n    if (options.length < enforcedPolicyOptions.minLength) {\n      options.length = enforcedPolicyOptions.minLength;\n    }\n\n    if (!options.minNumber) {\n      options.minNumber = 0;\n    } else if (options.minNumber > options.length) {\n      options.minNumber = options.length;\n    } else if (options.minNumber > 9) {\n      options.minNumber = 9;\n    }\n\n    if (options.minNumber < enforcedPolicyOptions.numberCount) {\n      options.minNumber = enforcedPolicyOptions.numberCount;\n    }\n\n    if (!options.minSpecial) {\n      options.minSpecial = 0;\n    } else if (options.minSpecial > options.length) {\n      options.minSpecial = options.length;\n    } else if (options.minSpecial > 9) {\n      options.minSpecial = 9;\n    }\n\n    if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n      options.minSpecial = enforcedPolicyOptions.specialCount;\n    }\n\n    if (options.minSpecial + options.minNumber > options.length) {\n      options.minSpecial = options.length - options.minNumber;\n    }\n\n    if (options.numWords == null || options.length < 3) {\n      options.numWords = 3;\n    } else if (options.numWords > 20) {\n      options.numWords = 20;\n    }\n\n    if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n      options.numWords = enforcedPolicyOptions.minNumberWords;\n    }\n\n    if (options.wordSeparator != null && options.wordSeparator.length > 1) {\n      options.wordSeparator = options.wordSeparator[0];\n    }\n\n    this.sanitizePasswordLength(options, false);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private async appendRandomNumberToRandomWord(wordList: string[]) {\n    if (wordList == null || wordList.length <= 0) {\n      return;\n    }\n    const index = await this.cryptoService.randomNumber(0, wordList.length - 1);\n    const num = await this.cryptoService.randomNumber(0, 9);\n    wordList[index] = wordList[index] + num;\n  }\n\n  private async encryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const encrypted = await this.cryptoService.encrypt(item.password);\n      return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private async decryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const decrypted = await this.cryptoService.decryptToUtf8(new EncString(item.password));\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private matchesPrevious(password: string, history: GeneratedPasswordHistory[]): boolean {\n    if (history == null || history.length === 0) {\n      return false;\n    }\n\n    return history[history.length - 1].password === password;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  private async shuffleArray(array: string[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = await this.cryptoService.randomNumber(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  private sanitizePasswordLength(options: any, forGeneration: boolean) {\n    let minUppercaseCalc = 0;\n    let minLowercaseCalc = 0;\n    let minNumberCalc: number = options.minNumber;\n    let minSpecialCalc: number = options.minSpecial;\n\n    if (options.uppercase && options.minUppercase <= 0) {\n      minUppercaseCalc = 1;\n    } else if (!options.uppercase) {\n      minUppercaseCalc = 0;\n    }\n\n    if (options.lowercase && options.minLowercase <= 0) {\n      minLowercaseCalc = 1;\n    } else if (!options.lowercase) {\n      minLowercaseCalc = 0;\n    }\n\n    if (options.number && options.minNumber <= 0) {\n      minNumberCalc = 1;\n    } else if (!options.number) {\n      minNumberCalc = 0;\n    }\n\n    if (options.special && options.minSpecial <= 0) {\n      minSpecialCalc = 1;\n    } else if (!options.special) {\n      minSpecialCalc = 0;\n    }\n\n    // This should never happen but is a final safety net\n    if (!options.length || options.length < 1) {\n      options.length = 10;\n    }\n\n    const minLength: number = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;\n    // Normalize and Generation both require this modification\n    if (options.length < minLength) {\n      options.length = minLength;\n    }\n\n    // Apply other changes if the options object passed in is for generation\n    if (forGeneration) {\n      options.minUppercase = minUppercaseCalc;\n      options.minLowercase = minLowercaseCalc;\n      options.minNumber = minNumberCalc;\n      options.minSpecial = minSpecialCalc;\n    }\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyResponse } from \"../response/policyResponse\";\n\nexport class PolicyData {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: PolicyResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../data/policyData\";\n\nimport Domain from \"./domainBase\";\n\nexport class Policy extends Domain {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { PolicyService as PolicyServiceAbstraction } from \"../abstractions/policy.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationUserStatusType } from \"../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../models/domain/masterPasswordPolicyOptions\";\nimport { Organization } from \"../models/domain/organization\";\nimport { Policy } from \"../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\n\nexport class PolicyService implements PolicyServiceAbstraction {\n  policyCache: Policy[];\n\n  constructor(\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private apiService: ApiService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedPolicies(null);\n  }\n\n  async getAll(type?: PolicyType, userId?: string): Promise<Policy[]> {\n    let response: Policy[] = [];\n    const decryptedPolicies = await this.stateService.getDecryptedPolicies({ userId: userId });\n    if (decryptedPolicies != null) {\n      response = decryptedPolicies;\n    } else {\n      const diskPolicies = await this.stateService.getEncryptedPolicies({ userId: userId });\n      for (const id in diskPolicies) {\n        // eslint-disable-next-line\n        if (diskPolicies.hasOwnProperty(id)) {\n          response.push(new Policy(diskPolicies[id]));\n        }\n      }\n      await this.stateService.setDecryptedPolicies(response, { userId: userId });\n    }\n    if (type != null) {\n      return response.filter((policy) => policy.type === type);\n    } else {\n      return response;\n    }\n  }\n\n  async getPolicyForOrganization(policyType: PolicyType, organizationId: string): Promise<Policy> {\n    const org = await this.organizationService.get(organizationId);\n    if (org?.isProviderUser) {\n      const orgPolicies = await this.apiService.getPolicies(organizationId);\n      const policy = orgPolicies.data.find((p) => p.organizationId === organizationId);\n\n      if (policy == null) {\n        return null;\n      }\n\n      return new Policy(new PolicyData(policy));\n    }\n\n    const policies = await this.getAll(policyType);\n    return policies.find((p) => p.organizationId === organizationId);\n  }\n\n  async replace(policies: { [id: string]: PolicyData }): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null, { userId: userId });\n    await this.stateService.setEncryptedPolicies(null, { userId: userId });\n  }\n\n  async getMasterPasswordPoliciesForInvitedUsers(\n    orgId: string\n  ): Promise<MasterPasswordPolicyOptions> {\n    const userId = await this.stateService.getUserId();\n    const response = await this.apiService.getPoliciesByInvitedUser(orgId, userId);\n    const policies = await this.mapPoliciesFromToken(response);\n    return this.getMasterPasswordPolicyOptions(policies);\n  }\n\n  async getMasterPasswordPolicyOptions(policies?: Policy[]): Promise<MasterPasswordPolicyOptions> {\n    let enforcedOptions: MasterPasswordPolicyOptions = null;\n\n    if (policies == null) {\n      policies = await this.getAll(PolicyType.MasterPassword);\n    } else {\n      policies = policies.filter((p) => p.type === PolicyType.MasterPassword);\n    }\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new MasterPasswordPolicyOptions();\n      }\n\n      if (\n        currentPolicy.data.minComplexity != null &&\n        currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n      ) {\n        enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.requireUpper) {\n        enforcedOptions.requireUpper = true;\n      }\n\n      if (currentPolicy.data.requireLower) {\n        enforcedOptions.requireLower = true;\n      }\n\n      if (currentPolicy.data.requireNumbers) {\n        enforcedOptions.requireNumbers = true;\n      }\n\n      if (currentPolicy.data.requireSpecial) {\n        enforcedOptions.requireSpecial = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  mapPoliciesFromToken(policiesResponse: ListResponse<PolicyResponse>): Policy[] {\n    if (policiesResponse == null || policiesResponse.data == null) {\n      return null;\n    }\n\n    const policiesData = policiesResponse.data.map((p) => new PolicyData(p));\n    return policiesData.map((p) => new Policy(p));\n  }\n\n  async policyAppliesToUser(\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) {\n    const policies = await this.getAll(policyType, userId);\n    const organizations = await this.organizationService.getAll(userId);\n    let filteredPolicies;\n\n    if (policyFilter != null) {\n      filteredPolicies = policies.filter((p) => p.enabled && policyFilter(p));\n    } else {\n      filteredPolicies = policies.filter((p) => p.enabled);\n    }\n\n    const policySet = new Set(filteredPolicies.map((p) => p.organizationId));\n\n    return organizations.some(\n      (o) =>\n        o.enabled &&\n        o.status >= OrganizationUserStatusType.Accepted &&\n        o.usePolicies &&\n        !this.isExcemptFromPolicies(o, policyType) &&\n        policySet.has(o.id)\n    );\n  }\n\n  private isExcemptFromPolicies(organization: Organization, policyType: PolicyType) {\n    if (policyType === PolicyType.MaximumVaultTimeout) {\n      return organization.type === OrganizationUserType.Owner;\n    }\n\n    return organization.isExemptFromPolicies;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProviderData } from \"../data/providerData\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { Provider } from \"../models/domain/provider\";\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Provider> {\n    const providers = await this.stateService.getProviders();\n    // eslint-disable-next-line\n    if (providers == null || !providers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Provider(providers[id]);\n  }\n\n  async getAll(): Promise<Provider[]> {\n    const providers = await this.stateService.getProviders();\n    const response: Provider[] = [];\n    for (const id in providers) {\n      // eslint-disable-next-line\n      if (providers.hasOwnProperty(id)) {\n        response.push(new Provider(providers[id]));\n      }\n    }\n    return response;\n  }\n\n  async save(providers: { [id: string]: ProviderData }) {\n    await this.stateService.setProviders(providers);\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import * as lunr from \"lunr\";\n\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SearchService implements SearchServiceAbstraction {\n  indexedEntityId?: string = null;\n  private indexing = false;\n  private index: lunr.Index = null;\n  private searchableMinLength = 2;\n\n  constructor(\n    private cipherService: CipherService,\n    private logService: LogService,\n    private i18nService: I18nService\n  ) {\n    if ([\"zh-CN\", \"zh-TW\"].indexOf(i18nService.locale) !== -1) {\n      this.searchableMinLength = 1;\n    }\n    //register lunr pipeline function\n    lunr.Pipeline.registerFunction(this.normalizeAccentsPipelineFunction, \"normalizeAccents\");\n  }\n\n  clearIndex(): void {\n    this.indexedEntityId = null;\n    this.index = null;\n  }\n\n  isSearchable(query: string): boolean {\n    query = SearchService.normalizeSearchQuery(query);\n    const notSearchable =\n      query == null ||\n      (this.index == null && query.length < this.searchableMinLength) ||\n      (this.index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  async indexCiphers(indexedEntityId?: string, ciphers?: CipherView[]): Promise<void> {\n    if (this.indexing) {\n      return;\n    }\n\n    this.logService.time(\"search indexing\");\n    this.indexing = true;\n    this.indexedEntityId = indexedEntityId;\n    this.index = null;\n    const builder = new lunr.Builder();\n    builder.pipeline.add(this.normalizeAccentsPipelineFunction);\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", {\n      boost: 10,\n    });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || (await this.cipherService.getAllDecrypted());\n    ciphers.forEach((c) => builder.add(c));\n    this.index = builder.build();\n\n    this.indexing = false;\n\n    this.logService.timeEnd(\"search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[] = null\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = await this.cipherService.getAllDecrypted();\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!this.isSearchable(query)) {\n      return ciphers;\n    }\n\n    if (this.indexing) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (this.indexing) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (c.login && c.login.uri != null && c.login.uri.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLocaleLowerCase());\n    if (query === null) {\n      return sends;\n    }\n    const sendsMatched: SendView[] = [];\n    const lowPriorityMatched: SendView[] = [];\n    sends.forEach((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        sendsMatched.push(s);\n      } else if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        lowPriorityMatched.push(s);\n      } else if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      }\n    });\n    return sendsMatched.concat(lowPriorityMatched);\n  }\n\n  getIndexForSearch(): lunr.Index {\n    return this.index;\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchType.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n\n  private normalizeAccentsPipelineFunction(token: lunr.Token): any {\n    const searchableFields = [\"name\", \"login.username\", \"subtitle\", \"notes\"];\n    const fields = (token as any).metadata[\"fields\"];\n    const checkFields = fields.every((i: any) => searchableFields.includes(i));\n\n    if (checkFields) {\n      return SearchService.normalizeSearchQuery(token.toString());\n    }\n\n    return token;\n  }\n\n  // Remove accents/diacritics characters from text. This regex is equivalent to the Diacritic unicode property escape, i.e. it will match all diacritic characters.\n  static normalizeSearchQuery(query: string): string {\n    return query?.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}\n","import { SendFileApi } from \"../api/sendFileApi\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/sendTextApi\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendResponse } from \"../response/sendResponse\";\n\nimport { SendFileData } from \"./sendFileData\";\nimport { SendTextData } from \"./sendTextData\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { SendFile } from \"../domain/sendFile\";\n\nimport { View } from \"./view\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { SendText } from \"../domain/sendText\";\n\nimport { View } from \"./view\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { Send } from \"../domain/send\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { SendFileView } from \"./sendFileView\";\nimport { SendTextView } from \"./sendTextView\";\nimport { View } from \"./view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: ArrayBuffer;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n}\n","import { SendFileData } from \"../data/sendFileData\";\nimport { SendFileView } from \"../view/sendFileView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key\n    );\n    return view;\n  }\n}\n","import { SendTextData } from \"../data/sendTextData\";\nimport { SendTextView } from \"../view/sendTextView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      []\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key\n    );\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { SendData } from \"../data/sendData\";\nimport { SendView } from \"../view/sendView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SendFile } from \"./sendFile\";\nimport { SendText } from \"./sendText\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"]\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    let cryptoService: CryptoService;\n    const containerService = (Utils.global as any).bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { SendService as SendServiceAbstraction } from \"../abstractions/send.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SEND_KDF_ITERATIONS } from \"../enums/kdfType\";\nimport { SendType } from \"../enums/sendType\";\nimport { Utils } from \"../misc/utils\";\nimport { SendData } from \"../models/data/sendData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/sendFile\";\nimport { SendText } from \"../models/domain/sendText\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SendService implements SendServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedSends(null);\n  }\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      model.key = await this.cryptoFunctionService.randomBytes(16);\n      model.cryptoKey = await this.cryptoService.makeSendKey(model.key);\n    }\n    if (password != null) {\n      const passwordHash = await this.cryptoFunctionService.pbkdf2(\n        password,\n        model.key,\n        \"sha256\",\n        SEND_KDF_ITERATIONS\n      );\n      send.password = Utils.fromBufferToB64(passwordHash);\n    }\n    send.key = await this.cryptoService.encrypt(model.key, key);\n    send.name = await this.cryptoService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.cryptoService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.cryptoService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  async get(id: string): Promise<Send> {\n    const sends = await this.stateService.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const sends = await this.stateService.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<SendView[]> {\n    let decSends = await this.stateService.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateService.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async saveWithServer(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.apiService.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.apiService.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n\n          await this.fileUploadService.uploadSendFile(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1]\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.apiService.putSend(sendData[0].id, request);\n    }\n\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.apiService.postSendFileLegacy(fd);\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    let sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      sends = {};\n    }\n\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async replace(sends: { [id: string]: SendData }): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(sends);\n  }\n\n  async clear(): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(null);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteSend(id);\n    await this.delete(id);\n  }\n\n  async removePasswordWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<[EncString, EncArrayBuffer]> {\n    const encFileName = await this.cryptoService.encrypt(fileName, key);\n    const encFileData = await this.cryptoService.encryptToBytes(data, key);\n    return [encFileName, encFileData];\n  }\n}\n","import { SettingsService as SettingsServiceAbstraction } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\n\nconst Keys = {\n  settingsPrefix: \"settings_\",\n  equivalentDomains: \"equivalentDomains\",\n};\n\nexport class SettingsService implements SettingsServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setSettings(null);\n  }\n\n  getEquivalentDomains(): Promise<any> {\n    return this.getSettingsKey(Keys.equivalentDomains);\n  }\n\n  async setEquivalentDomains(equivalentDomains: string[][]): Promise<void> {\n    await this.setSettingsKey(Keys.equivalentDomains, equivalentDomains);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setSettings(null, { userId: userId });\n  }\n\n  // Helpers\n\n  private async getSettings(): Promise<any> {\n    const settings = await this.stateService.getSettings();\n    if (settings == null) {\n      // eslint-disable-next-line\n      const userId = await this.stateService.getUserId();\n    }\n    return settings;\n  }\n\n  private async getSettingsKey(key: string): Promise<any> {\n    const settings = await this.getSettings();\n    if (settings != null && settings[key]) {\n      return settings[key];\n    }\n    return null;\n  }\n\n  private async setSettingsKey(key: string, value: any): Promise<void> {\n    let settings = await this.getSettings();\n    if (!settings) {\n      settings = {};\n    }\n\n    settings[key] = value;\n    await this.stateService.setSettings(settings);\n  }\n}\n","import { StateService } from \"../abstractions/state.service\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\nimport { Utils } from \"../misc/utils\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class TokenService implements TokenServiceAbstraction {\n  static decodeToken(token: string): Promise<any> {\n    if (token == null) {\n      throw new Error(\"Token not provided.\");\n    }\n\n    const parts = token.split(\".\");\n    if (parts.length !== 3) {\n      throw new Error(\"JWT must have 3 parts\");\n    }\n\n    const decoded = Utils.fromUrlB64ToUtf8(parts[1]);\n    if (decoded == null) {\n      throw new Error(\"Cannot decode the token\");\n    }\n\n    const decodedToken = JSON.parse(decoded);\n    return decodedToken;\n  }\n\n  constructor(private stateService: StateService) {}\n\n  async setTokens(\n    accessToken: string,\n    refreshToken: string,\n    clientIdClientSecret: [string, string]\n  ): Promise<any> {\n    await this.setToken(accessToken);\n    await this.setRefreshToken(refreshToken);\n    if (clientIdClientSecret != null) {\n      await this.setClientId(clientIdClientSecret[0]);\n      await this.setClientSecret(clientIdClientSecret[1]);\n    }\n  }\n\n  async setClientId(clientId: string): Promise<any> {\n    return await this.stateService.setApiKeyClientId(clientId);\n  }\n\n  async getClientId(): Promise<string> {\n    return await this.stateService.getApiKeyClientId();\n  }\n\n  async setClientSecret(clientSecret: string): Promise<any> {\n    return await this.stateService.setApiKeyClientSecret(clientSecret);\n  }\n\n  async getClientSecret(): Promise<string> {\n    return await this.stateService.getApiKeyClientSecret();\n  }\n\n  async setToken(token: string): Promise<void> {\n    await this.stateService.setAccessToken(token);\n  }\n\n  async getToken(): Promise<string> {\n    return await this.stateService.getAccessToken();\n  }\n\n  async setRefreshToken(refreshToken: string): Promise<any> {\n    return await this.stateService.setRefreshToken(refreshToken);\n  }\n\n  async getRefreshToken(): Promise<string> {\n    return await this.stateService.getRefreshToken();\n  }\n\n  async setTwoFactorToken(tokenResponse: IdentityTokenResponse): Promise<any> {\n    return await this.stateService.setTwoFactorToken(tokenResponse.twoFactorToken);\n  }\n\n  async getTwoFactorToken(): Promise<string> {\n    return await this.stateService.getTwoFactorToken();\n  }\n\n  async clearTwoFactorToken(): Promise<any> {\n    return await this.stateService.setTwoFactorToken(null);\n  }\n\n  async clearToken(userId?: string): Promise<any> {\n    await this.stateService.setAccessToken(null, { userId: userId });\n    await this.stateService.setRefreshToken(null, { userId: userId });\n    await this.stateService.setApiKeyClientId(null, { userId: userId });\n    await this.stateService.setApiKeyClientSecret(null, { userId: userId });\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeToken(token?: string): Promise<any> {\n    const storedToken = await this.stateService.getDecodedToken();\n    if (token === null && storedToken != null) {\n      return storedToken;\n    }\n\n    token = token ?? (await this.stateService.getAccessToken());\n\n    if (token == null) {\n      throw new Error(\"Token not found.\");\n    }\n\n    return TokenService.decodeToken(token);\n  }\n\n  async getTokenExpirationDate(): Promise<Date> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.exp === \"undefined\") {\n      return null;\n    }\n\n    const d = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    d.setUTCSeconds(decoded.exp);\n    return d;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const d = await this.getTokenExpirationDate();\n    if (d == null) {\n      return 0;\n    }\n\n    const msRemaining = d.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.sub === \"undefined\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as string;\n  }\n\n  async getEmail(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email === \"undefined\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email as string;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email_verified === \"undefined\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified as boolean;\n  }\n\n  async getName(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.name === \"undefined\") {\n      return null;\n    }\n\n    return decoded.name as string;\n  }\n\n  async getIssuer(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.iss === \"undefined\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss as string;\n  }\n\n  async getIsExternal(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n}\n","import { StorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StateVersion } from \"../enums/stateVersion\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountSettings } from \"../models/domain/account\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\n\nimport { TokenService } from \"./token.service\";\n\n// Originally (before January 2022) storage was handled as a flat key/value pair store.\n// With the move to a typed object for state storage these keys should no longer be in use anywhere outside of this migration.\nconst v1Keys: { [key: string]: string } = {\n  accessToken: \"accessToken\",\n  alwaysShowDock: \"alwaysShowDock\",\n  autoConfirmFingerprints: \"autoConfirmFingerprints\",\n  autoFillOnPageLoadDefault: \"autoFillOnPageLoadDefault\",\n  biometricAwaitingAcceptance: \"biometricAwaitingAcceptance\",\n  biometricFingerprintValidated: \"biometricFingerprintValidated\",\n  biometricText: \"biometricText\",\n  biometricUnlock: \"biometric\",\n  clearClipboard: \"clearClipboardKey\",\n  clientId: \"apikey_clientId\",\n  clientSecret: \"apikey_clientSecret\",\n  collapsedGroupings: \"collapsedGroupings\",\n  convertAccountToKeyConnector: \"convertAccountToKeyConnector\",\n  defaultUriMatch: \"defaultUriMatch\",\n  disableAddLoginNotification: \"disableAddLoginNotification\",\n  disableAutoBiometricsPrompt: \"noAutoPromptBiometrics\",\n  disableAutoTotpCopy: \"disableAutoTotpCopy\",\n  disableBadgeCounter: \"disableBadgeCounter\",\n  disableChangedPasswordNotification: \"disableChangedPasswordNotification\",\n  disableContextMenuItem: \"disableContextMenuItem\",\n  disableFavicon: \"disableFavicon\",\n  disableGa: \"disableGa\",\n  dontShowCardsCurrentTab: \"dontShowCardsCurrentTab\",\n  dontShowIdentitiesCurrentTab: \"dontShowIdentitiesCurrentTab\",\n  emailVerified: \"emailVerified\",\n  enableAlwaysOnTop: \"enableAlwaysOnTopKey\",\n  enableAutoFillOnPageLoad: \"enableAutoFillOnPageLoad\",\n  enableBiometric: \"enabledBiometric\",\n  enableBrowserIntegration: \"enableBrowserIntegration\",\n  enableBrowserIntegrationFingerprint: \"enableBrowserIntegrationFingerprint\",\n  enableCloseToTray: \"enableCloseToTray\",\n  enableFullWidth: \"enableFullWidth\",\n  enableGravatars: \"enableGravatars\",\n  enableMinimizeToTray: \"enableMinimizeToTray\",\n  enableStartToTray: \"enableStartToTrayKey\",\n  enableTray: \"enableTray\",\n  encKey: \"encKey\", // Generated Symmetric Key\n  encOrgKeys: \"encOrgKeys\",\n  encPrivate: \"encPrivateKey\",\n  encProviderKeys: \"encProviderKeys\",\n  entityId: \"entityId\",\n  entityType: \"entityType\",\n  environmentUrls: \"environmentUrls\",\n  equivalentDomains: \"equivalentDomains\",\n  eventCollection: \"eventCollection\",\n  forcePasswordReset: \"forcePasswordReset\",\n  history: \"generatedPasswordHistory\",\n  installedVersion: \"installedVersion\",\n  kdf: \"kdf\",\n  kdfIterations: \"kdfIterations\",\n  key: \"key\", // Master Key\n  keyHash: \"keyHash\",\n  lastActive: \"lastActive\",\n  localData: \"sitesLocalData\",\n  locale: \"locale\",\n  mainWindowSize: \"mainWindowSize\",\n  minimizeOnCopyToClipboard: \"minimizeOnCopyToClipboardKey\",\n  neverDomains: \"neverDomains\",\n  noAutoPromptBiometricsText: \"noAutoPromptBiometricsText\",\n  openAtLogin: \"openAtLogin\",\n  passwordGenerationOptions: \"passwordGenerationOptions\",\n  pinProtected: \"pinProtectedKey\",\n  protectedPin: \"protectedPin\",\n  refreshToken: \"refreshToken\",\n  ssoCodeVerifier: \"ssoCodeVerifier\",\n  ssoIdentifier: \"ssoOrgIdentifier\",\n  ssoState: \"ssoState\",\n  stamp: \"securityStamp\",\n  theme: \"theme\",\n  userEmail: \"userEmail\",\n  userId: \"userId\",\n  usesConnector: \"usesKeyConnector\",\n  vaultTimeoutAction: \"vaultTimeoutAction\",\n  vaultTimeout: \"lockOption\",\n  rememberedEmail: \"rememberedEmail\",\n};\n\nconst v1KeyPrefixes: { [key: string]: string } = {\n  ciphers: \"ciphers_\",\n  collections: \"collections_\",\n  folders: \"folders_\",\n  lastSync: \"lastSync_\",\n  policies: \"policies_\",\n  twoFactorToken: \"twoFactorToken_\",\n  organizations: \"organizations_\",\n  providers: \"providers_\",\n  sends: \"sends_\",\n  settings: \"settings_\",\n};\n\nconst keys = {\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateMigrationService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  constructor(\n    protected storageService: StorageService,\n    protected secureStorageService: StorageService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>\n  ) {}\n\n  async needsMigration(): Promise<boolean> {\n    const currentStateVersion = await this.getCurrentStateVersion();\n    return currentStateVersion == null || currentStateVersion < StateVersion.Latest;\n  }\n\n  async migrate(): Promise<void> {\n    let currentStateVersion = await this.getCurrentStateVersion();\n    while (currentStateVersion < StateVersion.Latest) {\n      switch (currentStateVersion) {\n        case StateVersion.One:\n          await this.migrateStateFrom1To2();\n          break;\n        case StateVersion.Two:\n          await this.migrateStateFrom2To3();\n          break;\n        case StateVersion.Three:\n          await this.migrateStateFrom3To4();\n          break;\n      }\n\n      currentStateVersion += 1;\n    }\n  }\n\n  protected async migrateStateFrom1To2(): Promise<void> {\n    const clearV1Keys = async (clearingUserId?: string) => {\n      for (const key in v1Keys) {\n        if (key == null) {\n          continue;\n        }\n        await this.set(v1Keys[key], null);\n      }\n      if (clearingUserId != null) {\n        for (const keyPrefix in v1KeyPrefixes) {\n          if (keyPrefix == null) {\n            continue;\n          }\n          await this.set(v1KeyPrefixes[keyPrefix] + userId, null);\n        }\n      }\n    };\n\n    // Some processes, like biometrics, may have already defined a value before migrations are run.\n    // We don't want to null out those values if they don't exist in the old storage scheme (like for new installs)\n    // So, the OOO for migration is that we:\n    // 1. Check for an existing storage value from the old storage structure OR\n    // 2. Check for a value already set by processes that run before migration OR\n    // 3. Assign the default value\n    const globals =\n      (await this.get<GlobalState>(keys.global)) ?? this.stateFactory.createGlobal(null);\n    globals.stateVersion = StateVersion.Two;\n    globals.environmentUrls =\n      (await this.get<EnvironmentUrls>(v1Keys.environmentUrls)) ?? globals.environmentUrls;\n    globals.locale = (await this.get<string>(v1Keys.locale)) ?? globals.locale;\n    globals.noAutoPromptBiometrics =\n      (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n      globals.noAutoPromptBiometrics;\n    globals.noAutoPromptBiometricsText =\n      (await this.get<string>(v1Keys.noAutoPromptBiometricsText)) ??\n      globals.noAutoPromptBiometricsText;\n    globals.ssoCodeVerifier =\n      (await this.get<string>(v1Keys.ssoCodeVerifier)) ?? globals.ssoCodeVerifier;\n    globals.ssoOrganizationIdentifier =\n      (await this.get<string>(v1Keys.ssoIdentifier)) ?? globals.ssoOrganizationIdentifier;\n    globals.ssoState = (await this.get<any>(v1Keys.ssoState)) ?? globals.ssoState;\n    globals.rememberedEmail =\n      (await this.get<string>(v1Keys.rememberedEmail)) ?? globals.rememberedEmail;\n    globals.theme = (await this.get<ThemeType>(v1Keys.theme)) ?? globals.theme;\n    globals.vaultTimeout = (await this.get<number>(v1Keys.vaultTimeout)) ?? globals.vaultTimeout;\n    globals.vaultTimeoutAction =\n      (await this.get<string>(v1Keys.vaultTimeoutAction)) ?? globals.vaultTimeoutAction;\n    globals.window = (await this.get<any>(v1Keys.mainWindowSize)) ?? globals.window;\n    globals.enableTray = (await this.get<boolean>(v1Keys.enableTray)) ?? globals.enableTray;\n    globals.enableMinimizeToTray =\n      (await this.get<boolean>(v1Keys.enableMinimizeToTray)) ?? globals.enableMinimizeToTray;\n    globals.enableCloseToTray =\n      (await this.get<boolean>(v1Keys.enableCloseToTray)) ?? globals.enableCloseToTray;\n    globals.enableStartToTray =\n      (await this.get<boolean>(v1Keys.enableStartToTray)) ?? globals.enableStartToTray;\n    globals.openAtLogin = (await this.get<boolean>(v1Keys.openAtLogin)) ?? globals.openAtLogin;\n    globals.alwaysShowDock =\n      (await this.get<boolean>(v1Keys.alwaysShowDock)) ?? globals.alwaysShowDock;\n    globals.enableBrowserIntegration =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegration)) ??\n      globals.enableBrowserIntegration;\n    globals.enableBrowserIntegrationFingerprint =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegrationFingerprint)) ??\n      globals.enableBrowserIntegrationFingerprint;\n\n    const userId =\n      (await this.get<string>(v1Keys.userId)) ?? (await this.get<string>(v1Keys.entityId));\n\n    const defaultAccount = this.stateFactory.createAccount(null);\n    const accountSettings: AccountSettings = {\n      autoConfirmFingerPrints:\n        (await this.get<boolean>(v1Keys.autoConfirmFingerprints)) ??\n        defaultAccount.settings.autoConfirmFingerPrints,\n      autoFillOnPageLoadDefault:\n        (await this.get<boolean>(v1Keys.autoFillOnPageLoadDefault)) ??\n        defaultAccount.settings.autoFillOnPageLoadDefault,\n      biometricLocked: null,\n      biometricUnlock:\n        (await this.get<boolean>(v1Keys.biometricUnlock)) ??\n        defaultAccount.settings.biometricUnlock,\n      clearClipboard:\n        (await this.get<number>(v1Keys.clearClipboard)) ?? defaultAccount.settings.clearClipboard,\n      defaultUriMatch:\n        (await this.get<any>(v1Keys.defaultUriMatch)) ?? defaultAccount.settings.defaultUriMatch,\n      disableAddLoginNotification:\n        (await this.get<boolean>(v1Keys.disableAddLoginNotification)) ??\n        defaultAccount.settings.disableAddLoginNotification,\n      disableAutoBiometricsPrompt:\n        (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n        defaultAccount.settings.disableAutoBiometricsPrompt,\n      disableAutoTotpCopy:\n        (await this.get<boolean>(v1Keys.disableAutoTotpCopy)) ??\n        defaultAccount.settings.disableAutoTotpCopy,\n      disableBadgeCounter:\n        (await this.get<boolean>(v1Keys.disableBadgeCounter)) ??\n        defaultAccount.settings.disableBadgeCounter,\n      disableChangedPasswordNotification:\n        (await this.get<boolean>(v1Keys.disableChangedPasswordNotification)) ??\n        defaultAccount.settings.disableChangedPasswordNotification,\n      disableContextMenuItem:\n        (await this.get<boolean>(v1Keys.disableContextMenuItem)) ??\n        defaultAccount.settings.disableContextMenuItem,\n      disableGa: (await this.get<boolean>(v1Keys.disableGa)) ?? defaultAccount.settings.disableGa,\n      dontShowCardsCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowCardsCurrentTab)) ??\n        defaultAccount.settings.dontShowCardsCurrentTab,\n      dontShowIdentitiesCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowIdentitiesCurrentTab)) ??\n        defaultAccount.settings.dontShowIdentitiesCurrentTab,\n      enableAlwaysOnTop:\n        (await this.get<boolean>(v1Keys.enableAlwaysOnTop)) ??\n        defaultAccount.settings.enableAlwaysOnTop,\n      enableAutoFillOnPageLoad:\n        (await this.get<boolean>(v1Keys.enableAutoFillOnPageLoad)) ??\n        defaultAccount.settings.enableAutoFillOnPageLoad,\n      enableBiometric:\n        (await this.get<boolean>(v1Keys.enableBiometric)) ??\n        defaultAccount.settings.enableBiometric,\n      enableFullWidth:\n        (await this.get<boolean>(v1Keys.enableFullWidth)) ??\n        defaultAccount.settings.enableFullWidth,\n      enableGravitars:\n        (await this.get<boolean>(v1Keys.enableGravatars)) ??\n        defaultAccount.settings.enableGravitars,\n      environmentUrls: globals.environmentUrls ?? defaultAccount.settings.environmentUrls,\n      equivalentDomains:\n        (await this.get<any>(v1Keys.equivalentDomains)) ??\n        defaultAccount.settings.equivalentDomains,\n      minimizeOnCopyToClipboard:\n        (await this.get<boolean>(v1Keys.minimizeOnCopyToClipboard)) ??\n        defaultAccount.settings.minimizeOnCopyToClipboard,\n      neverDomains:\n        (await this.get<any>(v1Keys.neverDomains)) ?? defaultAccount.settings.neverDomains,\n      passwordGenerationOptions:\n        (await this.get<any>(v1Keys.passwordGenerationOptions)) ??\n        defaultAccount.settings.passwordGenerationOptions,\n      pinProtected: {\n        decrypted: null,\n        encrypted: await this.get<string>(v1Keys.pinProtected),\n      },\n      protectedPin: await this.get<string>(v1Keys.protectedPin),\n      settings: userId == null ? null : await this.get<any>(v1KeyPrefixes.settings + userId),\n      vaultTimeout:\n        (await this.get<number>(v1Keys.vaultTimeout)) ?? defaultAccount.settings.vaultTimeout,\n      vaultTimeoutAction:\n        (await this.get<string>(v1Keys.vaultTimeoutAction)) ??\n        defaultAccount.settings.vaultTimeoutAction,\n    };\n\n    // (userId == null) = no logged in user (so no known userId) and we need to temporarily store account specific settings in state to migrate on first auth\n    // (userId != null) = we have a currently authed user (so known userId) with encrypted data and other key settings we can move, no need to temporarily store account settings\n    if (userId == null) {\n      await this.set(keys.tempAccountSettings, accountSettings);\n      await this.set(keys.global, globals);\n      await this.set(keys.authenticatedAccounts, []);\n      await this.set(keys.activeUserId, null);\n      await clearV1Keys();\n      return;\n    }\n\n    globals.twoFactorToken = await this.get<string>(v1KeyPrefixes.twoFactorToken + userId);\n    await this.set(keys.global, globals);\n    await this.set(userId, {\n      data: {\n        addEditCipherInfo: null,\n        ciphers: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CipherData }>(v1KeyPrefixes.ciphers + userId),\n        },\n        collapsedGroupings: null,\n        collections: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CollectionData }>(\n            v1KeyPrefixes.collections + userId\n          ),\n        },\n        eventCollection: await this.get<EventData[]>(v1Keys.eventCollection),\n        folders: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: FolderData }>(v1KeyPrefixes.folders + userId),\n        },\n        localData: null,\n        organizations: await this.get<{ [id: string]: OrganizationData }>(\n          v1KeyPrefixes.organizations + userId\n        ),\n        passwordGenerationHistory: {\n          decrypted: null,\n          encrypted: await this.get<GeneratedPasswordHistory[]>(v1Keys.history),\n        },\n        policies: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: PolicyData }>(v1KeyPrefixes.policies + userId),\n        },\n        providers: await this.get<{ [id: string]: ProviderData }>(v1KeyPrefixes.providers + userId),\n        sends: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: SendData }>(v1KeyPrefixes.sends + userId),\n        },\n      },\n      keys: {\n        apiKeyClientSecret: await this.get<string>(v1Keys.clientSecret),\n        cryptoMasterKey: null,\n        cryptoMasterKeyAuto: null,\n        cryptoMasterKeyB64: null,\n        cryptoMasterKeyBiometric: null,\n        cryptoSymmetricKey: {\n          encrypted: await this.get<string>(v1Keys.encKey),\n          decrypted: null,\n        },\n        legacyEtmKey: null,\n        organizationKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encOrgKeys),\n        },\n        privateKey: {\n          decrypted: null,\n          encrypted: await this.get<string>(v1Keys.encPrivate),\n        },\n        providerKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encProviderKeys),\n        },\n        publicKey: null,\n      },\n      profile: {\n        apiKeyClientId: await this.get<string>(v1Keys.clientId),\n        authenticationStatus: null,\n        convertAccountToKeyConnector: await this.get<boolean>(v1Keys.convertAccountToKeyConnector),\n        email: await this.get<string>(v1Keys.userEmail),\n        emailVerified: await this.get<boolean>(v1Keys.emailVerified),\n        entityId: null,\n        entityType: null,\n        everBeenUnlocked: null,\n        forcePasswordReset: null,\n        hasPremiumPersonally: null,\n        kdfIterations: await this.get<number>(v1Keys.kdfIterations),\n        kdfType: await this.get<KdfType>(v1Keys.kdf),\n        keyHash: await this.get<string>(v1Keys.keyHash),\n        lastSync: null,\n        userId: userId,\n        usesKeyConnector: null,\n      },\n      settings: accountSettings,\n      tokens: {\n        accessToken: await this.get<string>(v1Keys.accessToken),\n        decodedToken: null,\n        refreshToken: await this.get<string>(v1Keys.refreshToken),\n        securityStamp: null,\n      },\n    });\n\n    await this.set(keys.authenticatedAccounts, [userId]);\n    await this.set(keys.activeUserId, userId);\n\n    const accountActivity: { [userId: string]: number } = {\n      [userId]: await this.get<number>(v1Keys.lastActive),\n    };\n    accountActivity[userId] = await this.get<number>(v1Keys.lastActive);\n    await this.set(keys.accountActivity, accountActivity);\n\n    await clearV1Keys(userId);\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"biometric\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.biometricKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"biometric\" }),\n        { keySuffix: \"biometric\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"biometric\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"auto\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.autoKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"auto\" }),\n        { keySuffix: \"auto\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"auto\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key)) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.masterKey}`,\n        await this.secureStorageService.get(v1Keys.key)\n      );\n      await this.secureStorageService.remove(v1Keys.key);\n    }\n  }\n\n  protected async migrateStateFrom2To3(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (\n          account?.profile?.hasPremiumPersonally === null &&\n          account.tokens?.accessToken != null\n        ) {\n          const decodedToken = await TokenService.decodeToken(account.tokens.accessToken);\n          account.profile.hasPremiumPersonally = decodedToken.premium;\n          await this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Three;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateStateFrom3To4(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (account?.profile?.everBeenUnlocked != null) {\n          delete account.profile.everBeenUnlocked;\n          return this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Four;\n    await this.set(keys.global, globals);\n  }\n\n  protected get options(): StorageOptions {\n    return { htmlStorageLocation: HtmlStorageLocation.Local };\n  }\n\n  protected get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key, this.options);\n  }\n\n  protected set(key: string, value: any): Promise<any> {\n    if (value == null) {\n      return this.storageService.remove(key, this.options);\n    }\n    return this.storageService.save(key, value, this.options);\n  }\n\n  protected async getGlobals(): Promise<TGlobalState> {\n    return await this.get<TGlobalState>(keys.global);\n  }\n\n  protected async getCurrentStateVersion(): Promise<StateVersion> {\n    return (await this.getGlobals())?.stateVersion ?? StateVersion.One;\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { ProfileOrganizationResponse } from \"../response/profileOrganizationResponse\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: ProfileOrganizationResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useResetPassword = response.useResetPassword;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.planProductType = response.planProductType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProfileProviderResponse } from \"../response/profileProviderResponse\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { ProviderService } from \"../abstractions/provider.service\";\nimport { SendService } from \"../abstractions/send.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService as SyncServiceAbstraction } from \"../abstractions/sync.service\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\n\nexport class SyncService implements SyncServiceAbstraction {\n  syncInProgress = false;\n\n  constructor(\n    private apiService: ApiService,\n    private settingsService: SettingsService,\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private cryptoService: CryptoService,\n    private collectionService: CollectionService,\n    private messagingService: MessagingService,\n    private policyService: PolicyService,\n    private sendService: SendService,\n    private logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private providerService: ProviderService,\n    private logoutCallback: (expired: boolean) => Promise<void>\n  ) {}\n\n  async getLastSync(): Promise<Date> {\n    if ((await this.stateService.getUserId()) == null) {\n      return null;\n    }\n\n    const lastSync = await this.stateService.getLastSync();\n    if (lastSync) {\n      return new Date(lastSync);\n    }\n\n    return null;\n  }\n\n  async setLastSync(date: Date, userId?: string): Promise<any> {\n    await this.stateService.setLastSync(date.toJSON(), { userId: userId });\n  }\n\n  @sequentialize(() => \"fullSync\")\n  async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    this.syncStarted();\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    if (!isAuthenticated) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders);\n      await this.syncCollections(response.collections);\n      await this.syncCiphers(response.ciphers);\n      await this.syncSends(response.sends);\n      await this.syncSettings(response.domains);\n      await this.syncPolicies(response.policies);\n\n      await this.setLastSync(now);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.apiService.getFolder(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messagingService.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getCipher(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messagingService.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localSend = await this.sendService.get(notification.id);\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.apiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messagingService.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  private syncStarted() {\n    this.syncInProgress = true;\n    this.messagingService.send(\"syncStarted\");\n  }\n\n  private syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messagingService.send(\"syncCompleted\", { successfully: successfully });\n    return successfully;\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.stateService.getSecurityStamp();\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(true);\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setEncKey(response.key);\n    await this.cryptoService.setEncPrivateKey(response.privateKey);\n    await this.cryptoService.setProviderKeys(response.providers);\n    await this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);\n    await this.stateService.setSecurityStamp(response.securityStamp);\n    await this.stateService.setEmailVerified(response.emailVerified);\n    await this.stateService.setHasPremiumPersonally(response.premiumPersonally);\n    await this.stateService.setHasPremiumFromOrganization(response.premiumFromOrganization);\n    await this.stateService.setForcePasswordReset(response.forcePasswordReset);\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);\n\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o);\n    });\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o);\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.save(organizations);\n    await this.providerService.save(providers);\n\n    if (await this.keyConnectorService.userNeedsMigration()) {\n      await this.keyConnectorService.setConvertAccountRequired(true);\n      this.messagingService.send(\"convertAccountToKeyConnector\");\n    } else {\n      this.keyConnectorService.removeConvertAccountRequired();\n    }\n  }\n\n  private async syncFolders(response: FolderResponse[]) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[]) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections);\n  }\n\n  private async syncCiphers(response: CipherResponse[]) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers);\n  }\n\n  private async syncSends(response: SendResponse[]) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends);\n  }\n\n  private async syncSettings(response: DomainsResponse) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.settingsService.setEquivalentDomains(eqDomains);\n  }\n\n  private async syncPolicies(response: PolicyResponse[]) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies);\n  }\n}\n","import { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { Utils } from \"../misc/utils\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeout: any = null;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private stateService: StateService\n  ) {}\n\n  async startProcessReload(): Promise<void> {\n    if (\n      (await this.stateService.getDecryptedPinProtected()) != null ||\n      (await this.stateService.getBiometricLocked()) ||\n      this.reloadInterval != null\n    ) {\n      return;\n    }\n    this.cancelProcessReload();\n    this.reloadInterval = setInterval(async () => {\n      let doRefresh = false;\n      const lastActive = await this.stateService.getLastActive();\n      if (lastActive != null) {\n        const diffSeconds = new Date().getTime() - lastActive;\n        // Don't refresh if they are still active in the window\n        doRefresh = diffSeconds >= 5000;\n      }\n      const biometricLockedFingerprintValidated =\n        (await this.stateService.getBiometricFingerprintValidated()) &&\n        (await this.stateService.getBiometricLocked());\n      if (doRefresh && !biometricLockedFingerprintValidated) {\n        clearInterval(this.reloadInterval);\n        this.reloadInterval = null;\n        this.messagingService.send(\"reloadProcess\");\n        if (this.reloadCallback != null) {\n          await this.reloadCallback();\n        }\n      }\n    }, 10000);\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    if (this.clearClipboardTimeout != null) {\n      clearTimeout(this.clearClipboardTimeout);\n      this.clearClipboardTimeout = null;\n    }\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n    await this.stateService.getClearClipboard().then((clearSeconds) => {\n      if (clearSeconds == null) {\n        return;\n      }\n      if (timeoutMs == null) {\n        timeoutMs = clearSeconds * 1000;\n      }\n      this.clearClipboardTimeoutFunction = async () => {\n        const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n        if (clipboardValue === clipboardValueNow) {\n          this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n        }\n      };\n      this.clearClipboardTimeout = setTimeout(async () => {\n        await this.clearPendingClipboard();\n      }, timeoutMs);\n    });\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","import { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\nimport { Utils } from \"../misc/utils\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  async isAutoCopyEnabled(): Promise<boolean> {\n    return !(await this.stateService.getDisableAutoTotpCopy());\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\"\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes.buffer, keyBytes.buffer, alg);\n    return new Uint8Array(signature);\n  }\n}\n","import { I18nService } from \"../abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport {\n  TwoFactorProviderDetails,\n  TwoFactorService as TwoFactorServiceAbstraction,\n} from \"../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../enums/twoFactorProviderType\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\n\nexport const TwoFactorProviders: Partial<Record<TwoFactorProviderType, TwoFactorProviderDetails>> =\n  {\n    [TwoFactorProviderType.Authenticator]: {\n      type: TwoFactorProviderType.Authenticator,\n      name: null as string,\n      description: null as string,\n      priority: 1,\n      sort: 1,\n      premium: false,\n    },\n    [TwoFactorProviderType.Yubikey]: {\n      type: TwoFactorProviderType.Yubikey,\n      name: null as string,\n      description: null as string,\n      priority: 3,\n      sort: 2,\n      premium: true,\n    },\n    [TwoFactorProviderType.Duo]: {\n      type: TwoFactorProviderType.Duo,\n      name: \"Duo\",\n      description: null as string,\n      priority: 2,\n      sort: 3,\n      premium: true,\n    },\n    [TwoFactorProviderType.OrganizationDuo]: {\n      type: TwoFactorProviderType.OrganizationDuo,\n      name: \"Duo (Organization)\",\n      description: null as string,\n      priority: 10,\n      sort: 4,\n      premium: false,\n    },\n    [TwoFactorProviderType.Email]: {\n      type: TwoFactorProviderType.Email,\n      name: null as string,\n      description: null as string,\n      priority: 0,\n      sort: 6,\n      premium: false,\n    },\n    [TwoFactorProviderType.WebAuthn]: {\n      type: TwoFactorProviderType.WebAuthn,\n      name: null as string,\n      description: null as string,\n      priority: 4,\n      sort: 5,\n      premium: true,\n    },\n  };\n\nexport class TwoFactorService implements TwoFactorServiceAbstraction {\n  private twoFactorProvidersData: Map<TwoFactorProviderType, { [key: string]: string }>;\n  private selectedTwoFactorProviderType: TwoFactorProviderType = null;\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  init() {\n    TwoFactorProviders[TwoFactorProviderType.Email].name = this.i18nService.t(\"emailTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Email].description = this.i18nService.t(\"emailDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].name =\n      this.i18nService.t(\"authenticatorAppTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].description =\n      this.i18nService.t(\"authenticatorAppDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Duo].description = this.i18nService.t(\"duoDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].name =\n      \"Duo (\" + this.i18nService.t(\"organization\") + \")\";\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].description =\n      this.i18nService.t(\"duoOrganizationDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].name = this.i18nService.t(\"webAuthnTitle\");\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].description =\n      this.i18nService.t(\"webAuthnDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].name = this.i18nService.t(\"yubiKeyTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].description =\n      this.i18nService.t(\"yubiKeyDesc\");\n  }\n\n  getSupportedProviders(win: Window): TwoFactorProviderDetails[] {\n    const providers: any[] = [];\n    if (this.twoFactorProvidersData == null) {\n      return providers;\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.OrganizationDuo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.OrganizationDuo]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Authenticator)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Authenticator]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Yubikey)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Yubikey]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.Duo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Duo]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.WebAuthn) &&\n      this.platformUtilsService.supportsWebAuthn(win)\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.WebAuthn]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Email)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Email]);\n    }\n\n    return providers;\n  }\n\n  getDefaultProvider(webAuthnSupported: boolean): TwoFactorProviderType {\n    if (this.twoFactorProvidersData == null) {\n      return null;\n    }\n\n    if (\n      this.selectedTwoFactorProviderType != null &&\n      this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)\n    ) {\n      return this.selectedTwoFactorProviderType;\n    }\n\n    let providerType: TwoFactorProviderType = null;\n    let providerPriority = -1;\n    this.twoFactorProvidersData.forEach((_value, type) => {\n      const provider = (TwoFactorProviders as any)[type];\n      if (provider != null && provider.priority > providerPriority) {\n        if (type === TwoFactorProviderType.WebAuthn && !webAuthnSupported) {\n          return;\n        }\n\n        providerType = type;\n        providerPriority = provider.priority;\n      }\n    });\n\n    return providerType;\n  }\n\n  setSelectedProvider(type: TwoFactorProviderType) {\n    this.selectedTwoFactorProviderType = type;\n  }\n\n  clearSelectedProvider() {\n    this.selectedTwoFactorProviderType = null;\n  }\n\n  setProviders(response: IdentityTwoFactorResponse) {\n    this.twoFactorProvidersData = response.twoFactorProviders2;\n  }\n\n  clearProviders() {\n    this.twoFactorProvidersData = null;\n  }\n\n  getProviders() {\n    return this.twoFactorProvidersData;\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../abstractions/userVerification.service\";\nimport { VerificationType } from \"../enums/verificationType\";\nimport { VerifyOTPRequest } from \"../models/request/account/verifyOTPRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { Verification } from \"../types/verification\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private apiService: ApiService\n  ) {}\n\n  /**\n   * Create a new request model to be used for server-side verification\n   * @param verification User-supplied verification data (Master Password or OTP)\n   * @param requestClass The request model to create\n   * @param alreadyHashed Whether the master password is already hashed\n   */\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: Verification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean\n  ) {\n    this.validateInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashPassword(verification.secret, null);\n    }\n\n    return request;\n  }\n\n  /**\n   * Used to verify the Master Password client-side, or send the OTP to the server for verification (with no other data)\n   * Generally used for client-side verification only.\n   * @param verification User-supplied verification data (Master Password or OTP)\n   */\n  async verifyUser(verification: Verification): Promise<boolean> {\n    this.validateInput(verification);\n\n    if (verification.type === VerificationType.OTP) {\n      const request = new VerifyOTPRequest(verification.secret);\n      try {\n        await this.apiService.postAccountVerifyOTP(request);\n      } catch (e) {\n        throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n      }\n    } else {\n      const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n        verification.secret,\n        null\n      );\n      if (!passwordValid) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n    }\n    return true;\n  }\n\n  async requestOTP() {\n    await this.apiService.postAccountRequestOTP();\n  }\n\n  private validateInput(verification: Verification) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      if (verification.type === VerificationType.OTP) {\n        throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n      } else {\n        throw new Error(this.i18nService.t(\"masterPassRequired\"));\n      }\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { UsernameGenerationService as BaseUsernameGenerationService } from \"../abstractions/usernameGeneration.service\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\n\nconst DefaultOptions = {\n  type: \"word\",\n  wordCapitalize: true,\n  wordIncludeNumber: true,\n  subaddressType: \"random\",\n  catchallType: \"random\",\n  forwardedService: \"simplelogin\",\n  forwardedAnonAddyDomain: \"anonaddy.me\",\n};\n\nexport class UsernameGenerationService implements BaseUsernameGenerationService {\n  constructor(\n    private cryptoService: CryptoService,\n    private stateService: StateService,\n    private apiService: ApiService\n  ) {}\n\n  generateUsername(options: any): Promise<string> {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  async generateWord(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.wordCapitalize == null) {\n      o.wordCapitalize = true;\n    }\n    if (o.wordIncludeNumber == null) {\n      o.wordIncludeNumber = true;\n    }\n\n    const wordIndex = await this.cryptoService.randomNumber(0, EEFLongWordList.length - 1);\n    let word = EEFLongWordList[wordIndex];\n    if (o.wordCapitalize) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n    if (o.wordIncludeNumber) {\n      const num = await this.cryptoService.randomNumber(1, 9999);\n      word = word + this.zeroPad(num.toString(), 4);\n    }\n    return word;\n  }\n\n  async generateSubaddress(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    const subaddressEmail = o.subaddressEmail;\n    if (subaddressEmail == null || subaddressEmail.length < 3) {\n      return o.subaddressEmail;\n    }\n    const atIndex = subaddressEmail.indexOf(\"@\");\n    if (atIndex < 1 || atIndex >= subaddressEmail.length - 1) {\n      return subaddressEmail;\n    }\n    if (o.subaddressType == null) {\n      o.subaddressType = \"random\";\n    }\n\n    const emailBeginning = subaddressEmail.substr(0, atIndex);\n    const emailEnding = subaddressEmail.substr(atIndex + 1, subaddressEmail.length);\n\n    let subaddressString = \"\";\n    if (o.subaddressType === \"random\") {\n      subaddressString = await this.randomString(8);\n    } else if (o.subaddressType === \"website-name\") {\n      subaddressString = o.website;\n    }\n    return emailBeginning + \"+\" + subaddressString + \"@\" + emailEnding;\n  }\n\n  async generateCatchall(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.catchallDomain == null || o.catchallDomain === \"\") {\n      return null;\n    }\n    if (o.catchallType == null) {\n      o.catchallType = \"random\";\n    }\n\n    let startString = \"\";\n    if (o.catchallType === \"random\") {\n      startString = await this.randomString(8);\n    } else if (o.catchallType === \"website-name\") {\n      startString = o.website;\n    }\n    return startString + \"@\" + o.catchallDomain;\n  }\n\n  async generateForwarded(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.forwardedService == null) {\n      return null;\n    }\n\n    if (o.forwardedService === \"simplelogin\") {\n      if (o.forwardedSimpleLoginApiKey == null || o.forwardedSimpleLoginApiKey === \"\") {\n        return null;\n      }\n      return this.generateSimpleLoginAlias(o.forwardedSimpleLoginApiKey, o.website);\n    } else if (o.forwardedService === \"anonaddy\") {\n      if (\n        o.forwardedAnonAddyApiToken == null ||\n        o.forwardedAnonAddyApiToken === \"\" ||\n        o.forwardedAnonAddyDomain == null ||\n        o.forwardedAnonAddyDomain == \"\"\n      ) {\n        return null;\n      }\n      return this.generateAnonAddyAlias(\n        o.forwardedAnonAddyApiToken,\n        o.forwardedAnonAddyDomain,\n        o.website\n      );\n    } else if (o.forwardedService === \"firefoxrelay\") {\n      if (o.forwardedFirefoxApiToken == null || o.forwardedFirefoxApiToken === \"\") {\n        return null;\n      }\n      return this.generateFirefoxRelayAlias(o.forwardedFirefoxApiToken, o.website);\n    }\n\n    return null;\n  }\n\n  async getOptions(): Promise<any> {\n    let options = await this.stateService.getUsernameGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setUsernameGenerationOptions(options);\n    return options;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setUsernameGenerationOptions(options);\n  }\n\n  private async randomString(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.cryptoService.randomNumber(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  // ref: https://stackoverflow.com/a/10073788\n  private zeroPad(number: string, width: number) {\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join(\"0\") + number;\n  }\n\n  private async generateSimpleLoginAlias(apiKey: string, website: string): Promise<string> {\n    if (apiKey == null || apiKey === \"\") {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authentication: apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    let url = \"https://app.simplelogin.io/api/alias/random/new\";\n    if (website != null) {\n      url += \"?hostname=\" + website;\n    }\n    requestInit.body = JSON.stringify({\n      note: (website != null ? \"Website: \" + website + \". \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json.alias;\n    }\n    if (response.status === 401) {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    try {\n      const json = await response.json();\n      if (json?.error != null) {\n        throw \"SimpleLogin error:\" + json.error;\n      }\n    } catch {\n      // Do nothing...\n    }\n    throw \"Unknown SimpleLogin error occurred.\";\n  }\n\n  private async generateAnonAddyAlias(\n    apiToken: string,\n    domain: string,\n    websiteNote: string\n  ): Promise<string> {\n    if (apiToken == null || apiToken === \"\") {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + apiToken,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://app.anonaddy.com/api/v1/aliases\";\n    requestInit.body = JSON.stringify({\n      domain: domain,\n      description:\n        (websiteNote != null ? \"Website: \" + websiteNote + \". \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.data?.email;\n    }\n    if (response.status === 401) {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    throw \"Unknown AnonAddy error occurred.\";\n  }\n\n  private async generateFirefoxRelayAlias(apiToken: string, website: string): Promise<string> {\n    if (apiToken == null || apiToken === \"\") {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Token \" + apiToken,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://relay.firefox.com/api/v1/relayaddresses/\";\n    requestInit.body = JSON.stringify({\n      enabled: true,\n      generated_for: website,\n      description: (website != null ? website + \" - \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.full_address;\n    }\n    if (response.status === 401) {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    throw \"Unknown Firefox Relay error occurred.\";\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as forge from \"node-forge\";\n\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { Utils } from \"../misc/utils\";\nimport { DecryptParameters } from \"../models/domain/decryptParameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n\n  constructor(win: Window) {\n    this.crypto = typeof win.crypto !== \"undefined\" ? win.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof win.crypto.subtle !== \"undefined\" ? win.crypto.subtle : null;\n  }\n\n  async pbkdf2(\n    password: string | ArrayBuffer,\n    salt: string | ArrayBuffer,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number\n  ): Promise<ArrayBuffer> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"]\n    );\n    return await this.subtle.deriveBits(pbkdf2Params, impKey, wcLen);\n  }\n\n  async hkdf(\n    ikm: ArrayBuffer,\n    salt: string | ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    return await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t.buffer, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize).buffer;\n  }\n\n  async hash(\n    value: string | ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"\n  ): Promise<ArrayBuffer> {\n    if (algorithm === \"md5\") {\n      const md = algorithm === \"md5\" ? forge.md.md5.create() : forge.md.sha1.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data).buffer;\n    }\n\n    const valueBuf = this.toBuf(value);\n    return await this.subtle.digest({ name: this.toWebCryptoAlgorithm(algorithm) }, valueBuf);\n  }\n\n  async hmac(\n    value: ArrayBuffer,\n    key: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    return await this.subtle.sign(signingAlgorithm, impKey, value);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: ArrayBuffer, b: ArrayBuffer): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>): Promise<string> {\n    const dataBuffer = forge.util.createBuffer(parameters.data);\n    const decipher = forge.cipher.createDecipher(\"AES-CBC\", parameters.encKey);\n    decipher.start({ iv: parameters.iv });\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    return await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  async rsaEncrypt(\n    data: ArrayBuffer,\n    publicKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    return await this.subtle.encrypt(rsaParams, impKey, data);\n  }\n\n  async rsaDecrypt(\n    data: ArrayBuffer,\n    privateKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    return await this.subtle.decrypt(rsaParams, impKey, data);\n  }\n\n  async rsaExtractPublicKey(privateKey: ArrayBuffer): Promise<ArrayBuffer> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.exportKey(\"spki\", impPublicKey);\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[ArrayBuffer, ArrayBuffer]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = (await this.subtle.generateKey(rsaParams, true, [\n      \"encrypt\",\n      \"decrypt\",\n    ])) as CryptoKeyPair;\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [publicKey, privateKey];\n  }\n\n  randomBytes(length: number): Promise<ArrayBuffer> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr.buffer);\n  }\n\n  private toBuf(value: string | ArrayBuffer): ArrayBuffer {\n    let buf: ArrayBuffer;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value).buffer;\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | ArrayBuffer): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n}\n","import { BrowserApi } from \"./browserApi\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","import { Utils } from \"jslib-common/misc/utils\";\n\nimport { SafariApp } from \"./safariApp\";\n\nexport class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs: any[]) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null\n  ): Promise<any[]> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage(\n    tab: chrome.tabs.Tab,\n    obj: any,\n    options: chrome.tabs.MessageSendOptions = null\n  ): Promise<any> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<void>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, () => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve();\n      });\n    });\n  }\n\n  static async getPrivateModeWindows(): Promise<browser.windows.Window[]> {\n    return (await browser.windows.getAll()).filter((win) => win.incognito);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  static getBackgroundPage(): any {\n    return chrome.extension.getBackgroundPage();\n  }\n\n  static getApplicationVersion(): string {\n    return chrome.runtime.getManifest().version;\n  }\n\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(chrome.extension.getViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, extensionPage = false, active = true) {\n    chrome.tabs.create({ url: url, active: active });\n  }\n\n  static messageListener(\n    name: string,\n    callback: (message: any, sender: chrome.runtime.MessageSender, response: any) => void\n  ) {\n    chrome.runtime.onMessage.addListener(\n      (msg: any, sender: chrome.runtime.MessageSender, response: any) => {\n        callback(msg, sender, response);\n      }\n    );\n  }\n\n  static async closeLoginTab() {\n    const tabs = await BrowserApi.tabsQuery({\n      active: true,\n      title: \"Bitwarden\",\n      windowType: \"normal\",\n      currentWindow: true,\n    });\n\n    if (tabs.length === 0) {\n      return;\n    }\n\n    const tabToClose = tabs[tabs.length - 1].id;\n    chrome.tabs.remove(tabToClose);\n  }\n\n  static async focusSpecifiedTab(tabId: number) {\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static downloadFile(win: Window, blobData: any, blobOptions: any, fileName: string) {\n    if (BrowserApi.isSafariApi) {\n      const type = blobOptions != null ? blobOptions.type : null;\n      let data: string = null;\n      if (type === \"text/plain\" && typeof blobData === \"string\") {\n        data = blobData;\n      } else {\n        data = Utils.fromBufferToB64(blobData);\n      }\n      SafariApp.sendMessageToApp(\n        \"downloadFile\",\n        JSON.stringify({\n          blobData: data,\n          blobOptions: blobOptions,\n          fileName: fileName,\n        }),\n        true\n      );\n    } else {\n      const blob = new Blob([blobData], blobOptions);\n      if (navigator.msSaveOrOpenBlob) {\n        navigator.msSaveBlob(blob, fileName);\n      } else {\n        const a = win.document.createElement(\"a\");\n        a.href = URL.createObjectURL(blob);\n        a.download = fileName;\n        win.document.body.appendChild(a);\n        a.click();\n        win.document.body.removeChild(a);\n      }\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage(win: Window) {\n    return chrome.i18n.getUILanguage();\n  }\n\n  static reloadExtension(win: Window) {\n    if (win != null) {\n      return win.location.reload(true);\n    } else {\n      return chrome.runtime.reload();\n    }\n  }\n\n  static reloadOpenWindows() {\n    const views = chrome.extension.getViews() as Window[];\n    views\n      .filter((w) => w.location.href != null)\n      .forEach((w) => {\n        w.location.reload();\n      });\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve, reject) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n}\n","export class BrowserComponentState {\n  scrollY: number;\n  searchText: string;\n}\n","import { CipherType } from \"jslib-common/enums/cipherType\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { CollectionView } from \"jslib-common/models/view/collectionView\";\nimport { FolderView } from \"jslib-common/models/view/folderView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserGroupingsComponentState extends BrowserComponentState {\n  favoriteCiphers: CipherView[];\n  noFolderCiphers: CipherView[];\n  ciphers: CipherView[];\n  collectionCounts: Map<string, number>;\n  folderCounts: Map<string, number>;\n  typeCounts: Map<CipherType, number>;\n  folders: FolderView[];\n  collections: CollectionView[];\n  deletedCount: number;\n}\n","import { SendType } from \"jslib-common/enums/sendType\";\nimport { SendView } from \"jslib-common/models/view/sendView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserSendComponentState extends BrowserComponentState {\n  sends: SendView[];\n  typeCounts: Map<SendType, number>;\n}\n","import {\n  Account as BaseAccount,\n  AccountSettings as BaseAccountSettings,\n} from \"jslib-common/models/domain/account\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"./browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"./browserSendComponentState\";\n\nexport class AccountSettings extends BaseAccountSettings {\n  vaultTimeout = -1; // On Restart\n}\n\nexport class Account extends BaseAccount {\n  settings?: AccountSettings = new AccountSettings();\n  groupings?: BrowserGroupingsComponentState;\n  send?: BrowserSendComponentState;\n  ciphers?: BrowserComponentState;\n  sendType?: BrowserComponentState;\n\n  constructor(init: Partial<Account>) {\n    super(init);\n    Object.assign(this.settings, {\n      ...new AccountSettings(),\n      ...this.settings,\n    });\n    this.groupings = init?.groupings ?? new BrowserGroupingsComponentState();\n    this.send = init?.send ?? new BrowserSendComponentState();\n    this.ciphers = init?.ciphers ?? new BrowserComponentState();\n    this.sendType = init?.sendType ?? new BrowserComponentState();\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { BrowserApi } from \"../../browser/browserApi\";\n\n@Injectable()\nexport class PopupUtilsService {\n  constructor(private privateMode: boolean = false) {}\n\n  inSidebar(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=sidebar\") > -1;\n  }\n\n  inTab(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=tab\") > -1;\n  }\n\n  inPopout(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=popout\") > -1;\n  }\n\n  inPopup(win: Window): boolean {\n    return (\n      win.location.search === \"\" ||\n      win.location.search.indexOf(\"uilocation=\") === -1 ||\n      win.location.search.indexOf(\"uilocation=popup\") > -1\n    );\n  }\n\n  inPrivateMode(): boolean {\n    return this.privateMode;\n  }\n\n  getContentScrollY(win: Window, scrollingContainer = \"content\"): number {\n    const content = win.document.getElementsByTagName(scrollingContainer)[0];\n    return content.scrollTop;\n  }\n\n  setContentScrollY(win: Window, scrollY: number, scrollingContainer = \"content\"): void {\n    if (scrollY != null) {\n      const content = win.document.getElementsByTagName(scrollingContainer)[0];\n      content.scrollTop = scrollY;\n    }\n  }\n\n  popOut(win: Window, href: string = null): void {\n    if (href === null) {\n      href = win.location.href;\n    }\n\n    if (typeof chrome !== \"undefined\" && chrome.windows && chrome.windows.create) {\n      if (href.indexOf(\"?uilocation=\") > -1) {\n        href = href\n          .replace(\"uilocation=popup\", \"uilocation=popout\")\n          .replace(\"uilocation=tab\", \"uilocation=popout\")\n          .replace(\"uilocation=sidebar\", \"uilocation=popout\");\n      } else {\n        const hrefParts = href.split(\"#\");\n        href =\n          hrefParts[0] + \"?uilocation=popout\" + (hrefParts.length > 0 ? \"#\" + hrefParts[1] : \"\");\n      }\n\n      const bodyRect = document.querySelector(\"body\").getBoundingClientRect();\n      chrome.windows.create({\n        url: href,\n        type: \"popup\",\n        width: Math.round(bodyRect.width ? bodyRect.width + 60 : 375),\n        height: Math.round(bodyRect.height || 600),\n      });\n\n      if (this.inPopup(win)) {\n        BrowserApi.closePopup(win);\n      }\n    } else if (typeof chrome !== \"undefined\" && chrome.tabs && chrome.tabs.create) {\n      href = href\n        .replace(\"uilocation=popup\", \"uilocation=tab\")\n        .replace(\"uilocation=popout\", \"uilocation=tab\")\n        .replace(\"uilocation=sidebar\", \"uilocation=tab\");\n      chrome.tabs.create({\n        url: href,\n      });\n    }\n  }\n}\n","export default class AutofillScript {\n  script: string[][] = [];\n  documentUUID: any = {};\n  properties: any = {};\n  options: any = {};\n  metadata: any = {};\n  autosubmit: any = null;\n\n  constructor(documentUUID: string) {\n    this.documentUUID = documentUUID;\n  }\n}\n","export class AutoFillConstants {\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"email adresse\",\n    \"e-mail adresse\",\n    \"benutzerid\",\n    \"benutzer id\",\n  ];\n\n  static readonly PasswordFieldIgnoreList: string[] = [\n    \"onetimepassword\",\n    \"captcha\",\n    \"findanything\",\n    \"forgot\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\"honorific-prefix\", \"prefix\", \"title\"];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n","import { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { EventService } from \"jslib-common/abstractions/event.service\";\nimport { LogService } from \"jslib-common/abstractions/log.service\";\nimport { TotpService } from \"jslib-common/abstractions/totp.service\";\nimport { CipherRepromptType } from \"jslib-common/enums/cipherRepromptType\";\nimport { CipherType } from \"jslib-common/enums/cipherType\";\nimport { EventType } from \"jslib-common/enums/eventType\";\nimport { FieldType } from \"jslib-common/enums/fieldType\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { FieldView } from \"jslib-common/models/view/fieldView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport AutofillField from \"../models/autofillField\";\nimport AutofillPageDetails from \"../models/autofillPageDetails\";\nimport AutofillScript from \"../models/autofillScript\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport { AutofillService as AutofillServiceInterface } from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofillConstants\";\n\nexport default class AutofillService implements AutofillServiceInterface {\n  constructor(\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private totpService: TotpService,\n    private eventService: EventService,\n    private logService: LogService\n  ) {}\n\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): any[] {\n    const formData: any[] = [];\n\n    const passwordFields = this.loadPasswordFields(pageDetails, true, true, false, false);\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  async doAutoFill(options: any) {\n    let totpPromise: Promise<string> = null;\n    const tab = await this.getActiveTab();\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to auto-fill.\");\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    let didAutofill = false;\n    options.pageDetails.forEach((pd: any) => {\n      // make sure we're still on correct tab\n      if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n        return;\n      }\n\n      const fillScript = this.generateFillScript(pd.details, {\n        skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n        onlyEmptyFields: options.onlyEmptyFields || false,\n        onlyVisibleFields: options.onlyVisibleFields || false,\n        fillNewPassword: options.fillNewPassword || false,\n        cipher: options.cipher,\n      });\n\n      if (!fillScript || !fillScript.script || !fillScript.script.length) {\n        return;\n      }\n\n      // Add a small delay between operations\n      fillScript.properties.delay_between_operations = 20;\n\n      didAutofill = true;\n      if (!options.skipLastUsed) {\n        this.cipherService.updateLastUsedDate(options.cipher.id);\n      }\n\n      BrowserApi.tabSendMessage(\n        tab,\n        {\n          command: \"fillForm\",\n          fillScript: fillScript,\n          url: tab.url,\n        },\n        { frameId: pd.frameId }\n      );\n\n      if (\n        options.cipher.type !== CipherType.Login ||\n        totpPromise ||\n        !options.cipher.login.totp ||\n        (!canAccessPremium && !options.cipher.organizationUseTotp)\n      ) {\n        return;\n      }\n\n      totpPromise = this.totpService.isAutoCopyEnabled().then((enabled) => {\n        if (enabled) {\n          return this.totpService.getCode(options.cipher.login.totp);\n        }\n        return null;\n      });\n    });\n\n    if (didAutofill) {\n      this.eventService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totpPromise != null) {\n        return await totpPromise;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not auto-fill.\");\n    }\n  }\n\n  async doAutoFillActiveTab(pageDetails: any, fromCommand: boolean) {\n    const tab = await this.getActiveTab();\n    if (!tab || !tab.url) {\n      return;\n    }\n\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n\n      if (cipher == null) {\n        return null;\n      }\n    }\n\n    if (cipher.reprompt !== CipherRepromptType.None) {\n      return;\n    }\n\n    const totpCode = await this.doAutoFill({\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n    });\n\n    // Update last used index as autofill has succeed\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  // Helpers\n\n  private async getActiveTab(): Promise<any> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  private generateFillScript(pageDetails: AutofillPageDetails, options: any): AutofillScript {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript(pageDetails.documentUUID);\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f: any) => {\n        if (this.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field: any) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId);\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          this.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = this.generateLoginFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Card:\n        fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Identity:\n        fillScript = this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  private generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    const login = options.cipher.login;\n\n    if (!login.password || login.password === \"\") {\n      // No password for this login. Maybe they just wanted to auto-fill some custom fields?\n      fillScript = this.setFillScriptForFocus(filledFields, fillScript);\n      return fillScript;\n    }\n\n    let passwordFields = this.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = this.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const passwordFieldsForForm: AutofillField[] = [];\n      passwordFields.forEach((passField) => {\n        if (formKey === passField.form) {\n          passwordFieldsForForm.push(passField);\n        }\n      });\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n    }\n\n    if (!passwordFields.length && !options.skipUsernameOnlyFill) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f: any) => {\n        if (\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          this.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n      });\n    }\n\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      this.fillByOpid(fillScript, u, login.username);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      this.fillByOpid(fillScript, p, login.password);\n    });\n\n    fillScript = this.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  private generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f: any) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    if (fillFields.expMonth && this.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      this.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    if (fillFields.expYear && this.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = \"20\" + expYear;\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      this.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    if (fillFields.exp && this.hasValue(card.expMonth) && this.hasValue(card.expYear)) {\n      const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n      let fullYear: string = card.expYear;\n      let partYear: string = null;\n      if (fullYear.length === 2) {\n        partYear = fullYear;\n        fullYear = \"20\" + fullYear;\n      } else if (fullYear.length === 4) {\n        partYear = fullYear.substr(2, 2);\n      }\n\n      let exp: string = null;\n      for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n        if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"/\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"/\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"-\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"-\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + fullYear;\n        }\n\n        if (exp != null) {\n          break;\n        }\n      }\n\n      if (exp == null) {\n        exp = fullYear + \"-\" + fullMonth;\n      }\n\n      this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private fieldAttrsContain(field: any, containsVal: string) {\n    if (!field) {\n      return false;\n    }\n\n    let doesContain = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attr) => {\n      // eslint-disable-next-line\n      if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {\n        return;\n      }\n\n      let val = field[attr];\n      val = val.replace(/ /g, \"\").toLowerCase();\n      doesContain = val.indexOf(containsVal) > -1;\n    });\n\n    return doesContain;\n  }\n\n  private generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f: any) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          this.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          this.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (this.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (this.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (this.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && this.hasValue(identity.address1)) {\n      let address = \"\";\n      if (this.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (this.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (this.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  private isFieldMatch(value: string, options: string[], containsOptions?: string[]): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields\n    );\n  }\n\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField }\n  ) {\n    let doFill = false;\n    if (this.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (this.hasValue(option[j]) && option[j].toLowerCase() === dataValue.toLowerCase()) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      this.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  private loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean\n  ) {\n    const arr: AutofillField[] = [];\n    pageDetails.fields.forEach((f) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      const isPassword = f.type === \"password\";\n      const valueIsLikePassword = (value: string) => {\n        if (value == null) {\n          return false;\n        }\n        // Removes all whitespace, _ and - characters\n        // eslint-disable-next-line\n        const cleanedValue = value.toLowerCase().replace(/[\\s_\\-]/g, \"\");\n\n        if (cleanedValue.indexOf(\"password\") < 0) {\n          return false;\n        }\n\n        if (AutoFillConstants.PasswordFieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1)) {\n          return false;\n        }\n\n        return true;\n      };\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n        if (valueIsLikePassword(f.htmlID)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.htmlName)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.placeholder)) {\n          return true;\n        }\n        return false;\n      };\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n    return arr;\n  }\n\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean\n  ) {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (this.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\"\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!this.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  private fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (this.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (this.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-tag\"]) && this.fuzzyMatch(names, field[\"label-tag\"])) {\n      return true;\n    }\n    if (this.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-left\"]) && this.fuzzyMatch(names, field[\"label-left\"])) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-top\"]) && this.fuzzyMatch(names, field[\"label-top\"])) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-aria\"]) && this.fuzzyMatch(names, field[\"label-aria\"])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private hasValue(str: string): boolean {\n    return str && str !== \"\";\n  }\n\n  private setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  private fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  private forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n}\n","export class EncArrayBuffer {\n  constructor(public buffer: ArrayBuffer) {}\n}\n","import { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptedObject {\n  iv: ArrayBuffer;\n  data: ArrayBuffer;\n  mac: ArrayBuffer;\n  key: SymmetricCryptoKey;\n}\n","import * as bigInt from \"big-integer\";\n\nimport { CryptoService as CryptoServiceAbstraction } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EncryptionType } from \"../enums/encryptionType\";\nimport { HashPurpose } from \"../enums/hashPurpose\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EncryptedObject } from \"../models/domain/encryptedObject\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { ProfileOrganizationResponse } from \"../models/response/profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"../models/response/profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"../models/response/profileProviderResponse\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService\n  ) {}\n\n  async setKey(key: SymmetricCryptoKey, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(key, { userId: userId });\n    await this.storeKey(key, userId);\n  }\n\n  async setKeyHash(keyHash: string): Promise<void> {\n    await this.stateService.setKeyHash(keyHash);\n  }\n\n  async setEncKey(encKey: string): Promise<void> {\n    if (encKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedCryptoSymmetricKey(null);\n    await this.stateService.setEncryptedCryptoSymmetricKey(encKey);\n  }\n\n  async setEncPrivateKey(encPrivateKey: string): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedPrivateKey(null);\n    await this.stateService.setEncryptedPrivateKey(encPrivateKey);\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[],\n    providerOrgs: ProfileProviderOrganizationResponse[]\n  ): Promise<void> {\n    const orgKeys: any = {};\n    orgs.forEach((org) => {\n      orgKeys[org.id] = org.key;\n    });\n\n    for (const providerOrg of providerOrgs) {\n      // Convert provider encrypted keys to user encrypted.\n      const providerKey = await this.getProviderKey(providerOrg.providerId);\n      const decValue = await this.decryptToBytes(new EncString(providerOrg.key), providerKey);\n      orgKeys[providerOrg.id] = (await this.rsaEncrypt(decValue)).encryptedString;\n    }\n\n    await this.stateService.setDecryptedOrganizationKeys(null);\n    return await this.stateService.setEncryptedOrganizationKeys(orgKeys);\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[]): Promise<void> {\n    const providerKeys: any = {};\n    providers.forEach((provider) => {\n      providerKeys[provider.id] = provider.key;\n    });\n\n    await this.stateService.setDecryptedProviderKeys(null);\n    return await this.stateService.setEncryptedProviderKeys(providerKeys);\n  }\n\n  async getKey(keySuffix?: KeySuffixOptions, userId?: string): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getCryptoMasterKey({ userId: userId });\n\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    keySuffix ||= KeySuffixOptions.Auto;\n    const symmetricKey = await this.getKeyFromStorage(keySuffix, userId);\n\n    if (symmetricKey != null) {\n      // TODO: Refactor here so get key doesn't also set key\n      this.setKey(symmetricKey, userId);\n    }\n\n    return symmetricKey;\n  }\n\n  async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: string\n  ): Promise<SymmetricCryptoKey> {\n    const key = await this.retrieveKeyFromStorage(keySuffix, userId);\n    if (key != null) {\n      const symmetricKey = new SymmetricCryptoKey(Utils.fromB64ToArray(key).buffer);\n\n      if (!(await this.validateKey(symmetricKey))) {\n        this.logService.warning(\"Wrong key, throwing away stored key\");\n        await this.clearSecretKeyStore(userId);\n        return null;\n      }\n\n      return symmetricKey;\n    }\n    return null;\n  }\n\n  async getKeyHash(): Promise<string> {\n    return await this.stateService.getKeyHash();\n  }\n\n  async compareAndUpdateKeyHash(masterPassword: string, key: SymmetricCryptoKey): Promise<boolean> {\n    const storedKeyHash = await this.getKeyHash();\n    if (masterPassword != null && storedKeyHash != null) {\n      const localKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.LocalAuthorization\n      );\n      if (localKeyHash != null && storedKeyHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.ServerAuthorization\n      );\n      if (serverKeyHash != null && storedKeyHash === serverKeyHash) {\n        await this.setKeyHash(localKeyHash);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @sequentialize(() => \"getEncKey\")\n  getEncKey(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    return this.getEncKeyHelper(key);\n  }\n\n  async getPublicKey(): Promise<ArrayBuffer> {\n    const inMemoryPublicKey = await this.stateService.getPublicKey();\n    if (inMemoryPublicKey != null) {\n      return inMemoryPublicKey;\n    }\n\n    const privateKey = await this.getPrivateKey();\n    if (privateKey == null) {\n      return null;\n    }\n\n    const publicKey = await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    await this.stateService.setPublicKey(publicKey);\n    return publicKey;\n  }\n\n  async getPrivateKey(): Promise<ArrayBuffer> {\n    const decryptedPrivateKey = await this.stateService.getDecryptedPrivateKey();\n    if (decryptedPrivateKey != null) {\n      return decryptedPrivateKey;\n    }\n\n    const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n    if (encPrivateKey == null) {\n      return null;\n    }\n\n    const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), null);\n    await this.stateService.setDecryptedPrivateKey(privateKey);\n    return privateKey;\n  }\n\n  async getFingerprint(userId: string, publicKey?: ArrayBuffer): Promise<string[]> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      userId,\n      32,\n      \"sha256\"\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  @sequentialize(() => \"getOrgKeys\")\n  async getOrgKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const orgKeys: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedOrganizationKeys = await this.stateService.getDecryptedOrganizationKeys();\n    if (decryptedOrganizationKeys != null && decryptedOrganizationKeys.size > 0) {\n      return decryptedOrganizationKeys;\n    }\n\n    const encOrgKeys = await this.stateService.getEncryptedOrganizationKeys();\n    if (encOrgKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encOrgKeys) {\n      // eslint-disable-next-line\n      if (!encOrgKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encOrgKeys[orgId]);\n      orgKeys.set(orgId, new SymmetricCryptoKey(decValue));\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedOrganizationKeys(orgKeys);\n    }\n\n    return orgKeys;\n  }\n\n  async getOrgKey(orgId: string): Promise<SymmetricCryptoKey> {\n    if (orgId == null) {\n      return null;\n    }\n\n    const orgKeys = await this.getOrgKeys();\n    if (orgKeys == null || !orgKeys.has(orgId)) {\n      return null;\n    }\n\n    return orgKeys.get(orgId);\n  }\n\n  @sequentialize(() => \"getProviderKeys\")\n  async getProviderKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const providerKeys: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedProviderKeys = await this.stateService.getDecryptedProviderKeys();\n    if (decryptedProviderKeys != null && decryptedProviderKeys.size > 0) {\n      return decryptedProviderKeys;\n    }\n\n    const encProviderKeys = await this.stateService.getEncryptedProviderKeys();\n    if (encProviderKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encProviderKeys) {\n      // eslint-disable-next-line\n      if (!encProviderKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encProviderKeys[orgId]);\n      providerKeys.set(orgId, new SymmetricCryptoKey(decValue));\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedProviderKeys(providerKeys);\n    }\n\n    return providerKeys;\n  }\n\n  async getProviderKey(providerId: string): Promise<SymmetricCryptoKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    const providerKeys = await this.getProviderKeys();\n    if (providerKeys == null || !providerKeys.has(providerId)) {\n      return null;\n    }\n\n    return providerKeys.get(providerId);\n  }\n\n  async hasKey(): Promise<boolean> {\n    return (\n      (await this.hasKeyInMemory()) ||\n      (await this.hasKeyStored(KeySuffixOptions.Auto)) ||\n      (await this.hasKeyStored(KeySuffixOptions.Biometric))\n    );\n  }\n\n  async hasKeyInMemory(userId?: string): Promise<boolean> {\n    return (await this.stateService.getCryptoMasterKey({ userId: userId })) != null;\n  }\n\n  async hasKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean> {\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto:\n        return (await this.stateService.getCryptoMasterKeyAuto({ userId: userId })) != null;\n      case KeySuffixOptions.Biometric:\n        return (await this.stateService.hasCryptoMasterKeyBiometric({ userId: userId })) === true;\n      default:\n        return false;\n    }\n  }\n\n  async hasEncKey(): Promise<boolean> {\n    return (await this.stateService.getEncryptedCryptoSymmetricKey()) != null;\n  }\n\n  async clearKey(clearSecretStorage = true, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(null, { userId: userId });\n    await this.stateService.setLegacyEtmKey(null, { userId: userId });\n    if (clearSecretStorage) {\n      await this.clearSecretKeyStore(userId);\n    }\n  }\n\n  async clearStoredKey(keySuffix: KeySuffixOptions) {\n    keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.setCryptoMasterKeyAuto(null)\n      : await this.stateService.setCryptoMasterKeyBiometric(null);\n  }\n\n  async clearKeyHash(userId?: string): Promise<any> {\n    return await this.stateService.setKeyHash(null, { userId: userId });\n  }\n\n  async clearEncKey(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCryptoSymmetricKey(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedCryptoSymmetricKey(null, { userId: userId });\n    }\n  }\n\n  async clearKeyPair(memoryOnly?: boolean, userId?: string): Promise<any> {\n    const keysToClear: Promise<void>[] = [\n      this.stateService.setDecryptedPrivateKey(null, { userId: userId }),\n      this.stateService.setPublicKey(null, { userId: userId }),\n    ];\n    if (!memoryOnly) {\n      keysToClear.push(this.stateService.setEncryptedPrivateKey(null, { userId: userId }));\n    }\n    return Promise.all(keysToClear);\n  }\n\n  async clearOrgKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedOrganizationKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedOrganizationKeys(null, { userId: userId });\n    }\n  }\n\n  async clearProviderKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedProviderKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedProviderKeys(null, { userId: userId });\n    }\n  }\n\n  async clearPinProtectedKey(userId?: string): Promise<any> {\n    return await this.stateService.setEncryptedPinProtected(null, { userId: userId });\n  }\n\n  async clearKeys(userId?: string): Promise<any> {\n    await this.clearKey(true, userId);\n    await this.clearKeyHash(userId);\n    await this.clearOrgKeys(false, userId);\n    await this.clearProviderKeys(false, userId);\n    await this.clearEncKey(false, userId);\n    await this.clearKeyPair(false, userId);\n    await this.clearPinProtectedKey(userId);\n  }\n\n  async toggleKey(): Promise<any> {\n    const key = await this.getKey();\n\n    await this.setKey(key);\n  }\n\n  async makeKey(\n    password: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    let key: ArrayBuffer = null;\n    if (kdf == null || kdf === KdfType.PBKDF2_SHA256) {\n      if (kdfIterations == null) {\n        kdfIterations = 5000;\n      } else if (kdfIterations < 5000) {\n        throw new Error(\"PBKDF2 iteration minimum is 5000.\");\n      }\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfIterations);\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n\n  async makeKeyFromPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    protectedKeyCs: EncString = null\n  ): Promise<SymmetricCryptoKey> {\n    if (protectedKeyCs == null) {\n      const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n      if (pinProtectedKey == null) {\n        throw new Error(\"No PIN protected key found.\");\n      }\n      protectedKeyCs = new EncString(pinProtectedKey);\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfIterations);\n    const decKey = await this.decryptToBytes(protectedKeyCs, pinKey);\n    return new SymmetricCryptoKey(decKey);\n  }\n\n  async makeShareKey(): Promise<[EncString, SymmetricCryptoKey]> {\n    const shareKey = await this.cryptoFunctionService.randomBytes(64);\n    const publicKey = await this.getPublicKey();\n    const encShareKey = await this.rsaEncrypt(shareKey, publicKey);\n    return [encShareKey, new SymmetricCryptoKey(shareKey)];\n  }\n\n  async makeKeyPair(key?: SymmetricCryptoKey): Promise<[string, EncString]> {\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  async makePinKey(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    const pinKey = await this.makeKey(pin, salt, kdf, kdfIterations);\n    return await this.stretchKey(pinKey);\n  }\n\n  async makeSendKey(keyMaterial: ArrayBuffer): Promise<SymmetricCryptoKey> {\n    const sendKey = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(sendKey);\n  }\n\n  async hashPassword(\n    password: string,\n    key: SymmetricCryptoKey,\n    hashPurpose?: HashPurpose\n  ): Promise<string> {\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  async makeEncKey(key: SymmetricCryptoKey): Promise<[SymmetricCryptoKey, EncString]> {\n    const theKey = await this.getKeyForEncryption(key);\n    const encKey = await this.cryptoFunctionService.randomBytes(64);\n    return this.buildEncKey(theKey, encKey);\n  }\n\n  async remakeEncKey(\n    key: SymmetricCryptoKey,\n    encKey?: SymmetricCryptoKey\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (encKey == null) {\n      encKey = await this.getEncKey();\n    }\n    return this.buildEncKey(key, encKey.key);\n  }\n\n  async encrypt(plainValue: string | ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncString> {\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: ArrayBuffer;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue).buffer;\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes.buffer);\n  }\n\n  async rsaEncrypt(data: ArrayBuffer, publicKey?: ArrayBuffer): Promise<EncString> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey == null) {\n      throw new Error(\"Public key unavailable.\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKeyValue?: ArrayBuffer): Promise<ArrayBuffer> {\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]).buffer;\n    const privateKey = privateKeyValue ?? (await this.getPrivateKey());\n    if (privateKey == null) {\n      throw new Error(\"No private key.\");\n    }\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    const iv = Utils.fromB64ToArray(encString.iv).buffer;\n    const data = Utils.fromB64ToArray(encString.data).buffer;\n    const mac = encString.mac ? Utils.fromB64ToArray(encString.mac).buffer : null;\n    const decipher = await this.aesDecryptToBytes(encString.encryptionType, data, iv, mac, key);\n    if (decipher == null) {\n      return null;\n    }\n\n    return decipher;\n  }\n\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    return await this.aesDecryptToUtf8(\n      encString.encryptionType,\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key\n    );\n  }\n\n  async decryptFromBytes(encBuf: ArrayBuffer, key: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    if (encBuf == null) {\n      throw new Error(\"no encBuf.\");\n    }\n\n    const encBytes = new Uint8Array(encBuf);\n    const encType = encBytes[0];\n    let ctBytes: Uint8Array = null;\n    let ivBytes: Uint8Array = null;\n    let macBytes: Uint8Array = null;\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encBytes.length <= 49) {\n          // 1 + 16 + 32 + ctLength\n          return null;\n        }\n\n        ivBytes = encBytes.slice(1, 17);\n        macBytes = encBytes.slice(17, 49);\n        ctBytes = encBytes.slice(49);\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encBytes.length <= 17) {\n          // 1 + 16 + ctLength\n          return null;\n        }\n\n        ivBytes = encBytes.slice(1, 17);\n        ctBytes = encBytes.slice(17);\n        break;\n      default:\n        return null;\n    }\n\n    return await this.aesDecryptToBytes(\n      encType,\n      ctBytes.buffer,\n      ivBytes.buffer,\n      macBytes != null ? macBytes.buffer : null,\n      key\n    );\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  async validateKey(key: SymmetricCryptoKey) {\n    try {\n      const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n      const encKey = await this.getEncKeyHelper(key);\n      if (encPrivateKey == null || encKey == null) {\n        return false;\n      }\n\n      const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), encKey);\n      await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Helpers\n  protected async storeKey(key: SymmetricCryptoKey, userId?: string) {\n    if (await this.shouldStoreKey(KeySuffixOptions.Auto, userId)) {\n      await this.stateService.setCryptoMasterKeyAuto(key.keyB64, { userId: userId });\n    } else if (await this.shouldStoreKey(KeySuffixOptions.Biometric, userId)) {\n      await this.stateService.setCryptoMasterKeyBiometric(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n      await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: string) {\n    let shouldStoreKey = false;\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n      shouldStoreKey = vaultTimeout == null;\n    } else if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricUnlock = await this.stateService.getBiometricUnlock({ userId: userId });\n      shouldStoreKey = biometricUnlock && this.platformUtilService.supportsSecureStorage();\n    }\n    return shouldStoreKey;\n  }\n\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions, userId?: string) {\n    return keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.getCryptoMasterKeyAuto({ userId: userId })\n      : await this.stateService.getCryptoMasterKeyBiometric({ userId: userId });\n  }\n\n  private async aesEncrypt(data: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = await this.getKeyForEncryption(key);\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private async aesDecryptToUtf8(\n    encType: EncryptionType,\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): Promise<string> {\n    const keyForEnc = await this.getKeyForEncryption(key);\n    const theKey = await this.resolveLegacyKey(encType, keyForEnc);\n\n    if (theKey.macKey != null && mac == null) {\n      this.logService.error(\"mac required.\");\n      return null;\n    }\n\n    if (theKey.encType !== encType) {\n      this.logService.error(\"encType unavailable.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(data, iv, mac, theKey);\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\"\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logService.error(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return this.cryptoFunctionService.aesDecryptFast(fastParams);\n  }\n\n  private async aesDecryptToBytes(\n    encType: EncryptionType,\n    data: ArrayBuffer,\n    iv: ArrayBuffer,\n    mac: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<ArrayBuffer> {\n    const keyForEnc = await this.getKeyForEncryption(key);\n    const theKey = await this.resolveLegacyKey(encType, keyForEnc);\n\n    if (theKey.macKey != null && mac == null) {\n      return null;\n    }\n\n    if (theKey.encType !== encType) {\n      return null;\n    }\n\n    if (theKey.macKey != null && mac != null) {\n      const macData = new Uint8Array(iv.byteLength + data.byteLength);\n      macData.set(new Uint8Array(iv), 0);\n      macData.set(new Uint8Array(data), iv.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(\n        macData.buffer,\n        theKey.macKey,\n        \"sha256\"\n      );\n      if (computedMac === null) {\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(mac, computedMac);\n      if (!macsMatch) {\n        this.logService.error(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecrypt(data, iv, theKey.encKey);\n  }\n\n  private async getKeyForEncryption(key?: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    if (key != null) {\n      return key;\n    }\n\n    const encKey = await this.getEncKey();\n    if (encKey != null) {\n      return encKey;\n    }\n\n    return await this.getKey();\n  }\n\n  private async resolveLegacyKey(\n    encType: EncryptionType,\n    key: SymmetricCryptoKey\n  ): Promise<SymmetricCryptoKey> {\n    if (\n      encType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      // Old encrypt-then-mac scheme, make a new key\n      let legacyKey = await this.stateService.getLegacyEtmKey();\n      if (legacyKey == null) {\n        legacyKey = new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n        await this.stateService.setLegacyEtmKey(legacyKey);\n      }\n      return legacyKey;\n    }\n\n    return key;\n  }\n\n  private async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n    return new SymmetricCryptoKey(newKey.buffer);\n  }\n\n  private async hashPhrase(hash: ArrayBuffer, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EEFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EEFLongWordList.length);\n      hashNumber = hashNumber.divide(EEFLongWordList.length);\n      phrase.push(EEFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildEncKey(\n    key: SymmetricCryptoKey,\n    encKey: ArrayBuffer\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    let encKeyEnc: EncString = null;\n    if (key.key.byteLength === 32) {\n      const newKey = await this.stretchKey(key);\n      encKeyEnc = await this.encrypt(encKey, newKey);\n    } else if (key.key.byteLength === 64) {\n      encKeyEnc = await this.encrypt(encKey, key);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(encKey), encKeyEnc];\n  }\n\n  private async clearSecretKeyStore(userId?: string): Promise<void> {\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n  }\n\n  private async getEncKeyHelper(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getDecryptedCryptoSymmetricKey();\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    const encKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n    if (encKey == null) {\n      return null;\n    }\n\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (key == null) {\n      return null;\n    }\n\n    let decEncKey: ArrayBuffer;\n    const encKeyCipher = new EncString(encKey);\n    if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_B64) {\n      decEncKey = await this.decryptToBytes(encKeyCipher, key);\n    } else if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.stretchKey(key);\n      decEncKey = await this.decryptToBytes(encKeyCipher, newKey);\n    } else {\n      throw new Error(\"Unsupported encKey type.\");\n    }\n    if (decEncKey == null) {\n      return null;\n    }\n    const symmetricCryptoKey = new SymmetricCryptoKey(decEncKey);\n    await this.stateService.setDecryptedCryptoSymmetricKey(symmetricCryptoKey);\n    return symmetricCryptoKey;\n  }\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  Mobile = \"mobile\",\n  Cli = \"cli\",\n  DirectoryConnector = \"connector\",\n}\n","import { KeySuffixOptions } from \"jslib-common/enums/keySuffixOptions\";\nimport { CryptoService } from \"jslib-common/services/crypto.service\";\n\nexport class BrowserCryptoService extends CryptoService {\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions) {\n    if (keySuffix === \"biometric\") {\n      await this.platformUtilService.authenticateBiometric();\n      return (await this.getKey())?.keyB64;\n    }\n\n    return await super.retrieveKeyFromStorage(keySuffix);\n  }\n}\n","import { MessagingService } from \"jslib-common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    chrome.runtime.sendMessage(message);\n  }\n}\n","import { MessagingService } from \"jslib-common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingPrivateModeBackgroundService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    (window as any).bitwardenPopupMainMessageListener(message);\n  }\n}\n","import { MessagingService } from \"jslib-common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { ClientType } from \"jslib-common/enums/clientType\";\nimport { DeviceType } from \"jslib-common/enums/deviceType\";\nimport { ThemeType } from \"jslib-common/enums/themeType\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst DialogPromiseExpiration = 600000; // 10 minutes\n\nexport default class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private showDialogResolves = new Map<number, { resolve: (value: boolean) => void; date: Date }>();\n  private passwordDialogResolves = new Map<\n    number,\n    { tryResolve: (canceled: boolean, password: string) => Promise<boolean>; date: Date }\n  >();\n  private deviceCache: DeviceType = null;\n  private prefersColorSchemeDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n  constructor(\n    private messagingService: MessagingService,\n    private stateService: StateService,\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private biometricCallback: () => Promise<boolean>\n  ) {}\n\n  getDevice(): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    ) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (\n      (!!(window as any).opr && !!opr.addons) ||\n      !!(window as any).opera ||\n      navigator.userAgent.indexOf(\" OPR/\") >= 0\n    ) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (navigator.userAgent.indexOf(\" Edg/\") !== -1) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (navigator.userAgent.indexOf(\" Vivaldi/\") !== -1) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if ((window as any).chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (navigator.userAgent.indexOf(\" Safari/\") !== -1) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  async isViewOpen(): Promise<boolean> {\n    if (await BrowserApi.isPopupOpen()) {\n      return true;\n    }\n\n    if (this.isSafari()) {\n      return false;\n    }\n\n    const sidebarView = this.sidebarViewName();\n    const sidebarOpen =\n      sidebarView != null && chrome.extension.getViews({ type: sidebarView }).length > 0;\n    if (sidebarOpen) {\n      return true;\n    }\n\n    const tabOpen = chrome.extension.getViews({ type: \"tab\" }).length > 0;\n    return tabOpen;\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  saveFile(win: Window, blobData: any, blobOptions: any, fileName: string): void {\n    BrowserApi.downloadFile(win, blobData, blobOptions, fileName);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    return Promise.resolve(BrowserApi.getApplicationVersion());\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n\n  showDialog(\n    body: string,\n    title?: string,\n    confirmText?: string,\n    cancelText?: string,\n    type?: string,\n    bodyIsHtml = false\n  ) {\n    const dialogId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.messagingService.send(\"showDialog\", {\n      text: bodyIsHtml ? null : body,\n      html: bodyIsHtml ? body : null,\n      title: title,\n      confirmText: confirmText,\n      cancelText: cancelText,\n      type: type,\n      dialogId: dialogId,\n    });\n    return new Promise<boolean>((resolve) => {\n      this.showDialogResolves.set(dialogId, { resolve: resolve, date: new Date() });\n    });\n  }\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  copyToClipboard(text: string, options?: any): void {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n    const clearing = options ? !!options.clearing : false;\n    const clearMs: number = options && options.clearMs ? options.clearMs : null;\n\n    if (this.isSafari()) {\n      SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.writeText\n    ) {\n      (win as any).navigator.clipboard.writeText(text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if ((win as any).clipboardData && (win as any).clipboardData.setData) {\n      // IE specific code path to prevent textarea being shown while dialog is visible.\n      (win as any).clipboardData.setData(\"Text\", text);\n      if (!clearing && this.clipboardWriteCallback != null) {\n        this.clipboardWriteCallback(text, clearMs);\n      }\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"copy\")) {\n      if (this.isChrome() && text === \"\") {\n        text = \"\\u0000\";\n      }\n\n      const textarea = doc.createElement(\"textarea\");\n      textarea.textContent = text == null || text === \"\" ? \" \" : text;\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.select();\n\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"copy\") && !clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Copy to clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n  }\n\n  async readFromClipboard(options?: any): Promise<string> {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.readText\n    ) {\n      return await (win as any).navigator.clipboard.readText();\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"paste\")) {\n      const textarea = doc.createElement(\"textarea\");\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.focus();\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"paste\")) {\n          return textarea.value;\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Read from clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n    return null;\n  }\n\n  resolveDialogPromise(dialogId: number, confirmed: boolean) {\n    if (this.showDialogResolves.has(dialogId)) {\n      const resolveObj = this.showDialogResolves.get(dialogId);\n      resolveObj.resolve(confirmed);\n      this.showDialogResolves.delete(dialogId);\n    }\n\n    // Clean up old promises\n    this.showDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.showDialogResolves.delete(key);\n      }\n    });\n  }\n\n  async resolvePasswordDialogPromise(\n    dialogId: number,\n    canceled: boolean,\n    password: string\n  ): Promise<boolean> {\n    let result = false;\n    if (this.passwordDialogResolves.has(dialogId)) {\n      const resolveObj = this.passwordDialogResolves.get(dialogId);\n      if (await resolveObj.tryResolve(canceled, password)) {\n        this.passwordDialogResolves.delete(dialogId);\n        result = true;\n      }\n    }\n\n    // Clean up old promises\n    this.passwordDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.passwordDialogResolves.delete(key);\n      }\n    });\n\n    return result;\n  }\n\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"android\") {\n      return false;\n    }\n\n    if (this.isFirefox()) {\n      return parseInt((await browser.runtime.getBrowserInfo()).version.split(\".\")[0], 10) >= 87;\n    }\n\n    return true;\n  }\n\n  authenticateBiometric() {\n    return this.biometricCallback();\n  }\n\n  sidebarViewName(): string {\n    if ((window as any).chrome.sidebarAction && this.isFirefox()) {\n      return \"sidebar\";\n    } else if (this.isOpera() && typeof opr !== \"undefined\" && opr.sidebarAction) {\n      return \"sidebar_panel\";\n    }\n\n    return null;\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n\n  getDefaultSystemTheme(): Promise<ThemeType.Light | ThemeType.Dark> {\n    return Promise.resolve(this.prefersColorSchemeDark.matches ? ThemeType.Dark : ThemeType.Light);\n  }\n\n  onDefaultSystemThemeChange(callback: (theme: ThemeType.Light | ThemeType.Dark) => unknown) {\n    this.prefersColorSchemeDark.addEventListener(\"change\", ({ matches }) => {\n      callback(matches ? ThemeType.Dark : ThemeType.Light);\n    });\n  }\n\n  async getEffectiveTheme() {\n    const theme = (await this.stateService.getTheme()) as ThemeType;\n    if (theme == null || theme === ThemeType.System) {\n      return this.getDefaultSystemTheme();\n    } else {\n      return theme;\n    }\n  }\n}\n","import { StorageService } from \"jslib-common/abstractions/storage.service\";\n\nexport default class BrowserStorageService implements StorageService {\n  private chromeStorageApi: any;\n\n  constructor() {\n    this.chromeStorageApi = chrome.storage.local;\n  }\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve) => {\n      this.chromeStorageApi.get(key, (obj: any) => {\n        if (obj != null && obj[key] != null) {\n          resolve(obj[key] as T);\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<any> {\n    if (obj == null) {\n      // Fix safari not liking null in set\n      return new Promise<void>((resolve) => {\n        this.chromeStorageApi.remove(key, () => {\n          resolve();\n        });\n      });\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<any> {\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.remove(key, () => {\n        resolve();\n      });\n    });\n  }\n}\n","import { I18nService as BaseI18nService } from \"jslib-common/services/i18n.service\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string) {\n    super(systemLanguage, null, async (formattedLocale: string) => {\n      // Deprecated\n      const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n      return await file.json();\n    });\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"nb\",\n      \"nl\",\n      \"nn\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\n\nexport class I18nService implements I18nServiceAbstraction {\n  locale: string;\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.locale = this.translationLocale = locale != null ? locale : this.systemLanguage;\n\n    try {\n      this.collator = new Intl.Collator(this.locale, { numeric: true, sensitivity: \"base\" });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.supportedTranslationLocales[0];\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.supportedTranslationLocales[0]) {\n        await this.loadMessages(this.supportedTranslationLocales[0], this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1);\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2);\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3);\n      }\n    }\n\n    return result;\n  }\n\n  private async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent\n          );\n        }\n      }\n    }\n  }\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","import { Account } from \"./account\";\nimport { GlobalState } from \"./globalState\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n  activeUserId: string;\n  authenticatedAccounts: string[] = [];\n  accountActivity: { [userId: string]: number } = {};\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService as StateServiceAbstraction } from \"../abstractions/state.service\";\nimport { StateMigrationService } from \"../abstractions/stateMigration.service\";\nimport { StorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StorageLocation } from \"../enums/storageLocation\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountData } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { Policy } from \"../models/domain/policy\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { SendView } from \"../models/view/sendView\";\n\nconst keys = {\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> implements StateServiceAbstraction<TAccount>\n{\n  accounts = new BehaviorSubject<{ [userId: string]: TAccount }>({});\n  activeAccount = new BehaviorSubject<string>(null);\n\n  protected state: State<TGlobalState, TAccount> = new State<TGlobalState, TAccount>(\n    this.createGlobals()\n  );\n\n  private hasBeenInited = false;\n\n  private accountDiskCache: Map<string, TAccount>;\n\n  constructor(\n    protected storageService: StorageService,\n    protected secureStorageService: StorageService,\n    protected logService: LogService,\n    protected stateMigrationService: StateMigrationService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected useAccountCache: boolean = true\n  ) {\n    this.accountDiskCache = new Map<string, TAccount>();\n  }\n\n  async init(): Promise<void> {\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    if (await this.stateMigrationService.needsMigration()) {\n      await this.stateMigrationService.migrate();\n    }\n\n    await this.initAccountState();\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    this.state.authenticatedAccounts =\n      (await this.storageService.get<string[]>(keys.authenticatedAccounts)) ?? [];\n    for (const i in this.state.authenticatedAccounts) {\n      if (i != null) {\n        await this.syncAccountFromDisk(this.state.authenticatedAccounts[i]);\n      }\n    }\n    const storedActiveUser = await this.storageService.get<string>(keys.activeUserId);\n    if (storedActiveUser != null) {\n      this.state.activeUserId = storedActiveUser;\n    }\n    await this.pushAccounts();\n    this.activeAccount.next(this.state.activeUserId);\n  }\n\n  async syncAccountFromDisk(userId: string) {\n    if (userId == null) {\n      return;\n    }\n    this.state.accounts[userId] = this.createAccount();\n    const diskAccount = await this.getAccountFromDisk({ userId: userId });\n    this.state.accounts[userId].profile = diskAccount.profile;\n  }\n\n  async addAccount(account: TAccount) {\n    account = await this.setAccountEnvironmentUrls(account);\n    this.state.authenticatedAccounts.push(account.profile.userId);\n    await this.storageService.save(keys.authenticatedAccounts, this.state.authenticatedAccounts);\n    this.state.accounts[account.profile.userId] = account;\n    await this.scaffoldNewAccountStorage(account);\n    await this.setLastActive(new Date().getTime(), { userId: account.profile.userId });\n    await this.setActiveUser(account.profile.userId);\n    this.activeAccount.next(account.profile.userId);\n  }\n\n  async setActiveUser(userId: string): Promise<void> {\n    this.clearDecryptedDataForActiveUser();\n    this.state.activeUserId = userId;\n    await this.storageService.save(keys.activeUserId, userId);\n    this.activeAccount.next(this.state.activeUserId);\n    await this.pushAccounts();\n  }\n\n  async clean(options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, this.defaultInMemoryOptions);\n    await this.deAuthenticateAccount(options.userId);\n    if (options.userId === this.state.activeUserId) {\n      await this.dynamicallySetActiveUser();\n    }\n\n    await this.removeAccountFromDisk(options?.userId);\n    this.removeAccountFromMemory(options?.userId);\n    await this.pushAccounts();\n  }\n\n  async getAccessToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.accessToken;\n  }\n\n  async setAccessToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.accessToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAddEditCipherInfo(options?: StorageOptions): Promise<any> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.addEditCipherInfo;\n  }\n\n  async setAddEditCipherInfo(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.addEditCipherInfo = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getAlwaysShowDock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.alwaysShowDock ?? false\n    );\n  }\n\n  async setAlwaysShowDock(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.alwaysShowDock = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getApiKeyClientId(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.profile?.apiKeyClientId;\n  }\n\n  async setApiKeyClientId(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.profile.apiKeyClientId = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getApiKeyClientSecret(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.keys?.apiKeyClientSecret;\n  }\n\n  async setApiKeyClientSecret(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.keys.apiKeyClientSecret = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAutoConfirmFingerPrints(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoConfirmFingerPrints ?? false\n    );\n  }\n\n  async setAutoConfirmFingerprints(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoConfirmFingerPrints = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getAutoFillOnPageLoadDefault(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoFillOnPageLoadDefault ?? true\n    );\n  }\n\n  async setAutoFillOnPageLoadDefault(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoFillOnPageLoadDefault = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricAwaitingAcceptance(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricAwaitingAcceptance ?? false\n    );\n  }\n\n  async setBiometricAwaitingAcceptance(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricAwaitingAcceptance = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricFingerprintValidated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricFingerprintValidated ?? false\n    );\n  }\n\n  async setBiometricFingerprintValidated(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricFingerprintValidated = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricLocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))?.settings\n        ?.biometricLocked ?? false\n    );\n  }\n\n  async setBiometricLocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.settings.biometricLocked = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getBiometricText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.biometricText;\n  }\n\n  async setBiometricText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricUnlock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.biometricUnlock ?? false\n    );\n  }\n\n  async setBiometricUnlock(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.biometricUnlock = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCanAccessPremium(options?: StorageOptions): Promise<boolean> {\n    if (!(await this.getIsAuthenticated(options))) {\n      return false;\n    }\n\n    return (\n      (await this.getHasPremiumPersonally(options)) ||\n      (await this.getHasPremiumFromOrganization(options))\n    );\n  }\n\n  async getHasPremiumPersonally(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.profile?.hasPremiumPersonally;\n  }\n\n  async setHasPremiumPersonally(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumPersonally = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getHasPremiumFromOrganization(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    if (account.profile?.hasPremiumFromOrganization) {\n      return true;\n    }\n\n    // TODO: older server versions won't send the hasPremiumFromOrganization flag, so we're keeping the old logic\n    // for backwards compatibility. It can be removed after everyone has upgraded.\n    const organizations = await this.getOrganizations(options);\n    if (organizations == null) {\n      return false;\n    }\n\n    for (const id of Object.keys(organizations)) {\n      const o = organizations[id];\n      if (o.enabled && o.usersGetPremium && !o.isProviderUser) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setHasPremiumFromOrganization(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumFromOrganization = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getClearClipboard(options?: StorageOptions): Promise<number> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.clearClipboard ?? null\n    );\n  }\n\n  async setClearClipboard(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.clearClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getCollapsedGroupings(options?: StorageOptions): Promise<string[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.collapsedGroupings;\n  }\n\n  async setCollapsedGroupings(value: string[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.collapsedGroupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getConvertAccountToKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.convertAccountToKeyConnector;\n  }\n\n  async setConvertAccountToKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.convertAccountToKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCryptoMasterKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.cryptoMasterKey;\n  }\n\n  async setCryptoMasterKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.cryptoMasterKey = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getCryptoMasterKeyAuto(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get(`${options.userId}${partialKeys.autoKey}`, options);\n  }\n\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  async getCryptoMasterKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async hasCryptoMasterKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyBiometric(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.biometricKey, value, options);\n  }\n\n  async getDecodedToken(options?: StorageOptions): Promise<any> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.tokens?.decodedToken;\n  }\n\n  async setDecodedToken(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.tokens.decodedToken = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedCiphers(options?: StorageOptions): Promise<CipherView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.ciphers?.decrypted;\n  }\n\n  async setDecryptedCiphers(value: CipherView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.ciphers.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedCollections(options?: StorageOptions): Promise<CollectionView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.collections?.decrypted;\n  }\n\n  async setDecryptedCollections(value: CollectionView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.collections.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedCryptoSymmetricKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.cryptoSymmetricKey?.decrypted;\n  }\n\n  async setDecryptedCryptoSymmetricKey(\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.cryptoSymmetricKey.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedFolders(options?: StorageOptions): Promise<FolderView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.folders?.decrypted;\n  }\n\n  async setDecryptedFolders(value: FolderView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.folders.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.organizationKeys?.decrypted;\n  }\n\n  async setDecryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.organizationKeys.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.passwordGenerationHistory?.decrypted;\n  }\n\n  async setDecryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.passwordGenerationHistory.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPinProtected(options?: StorageOptions): Promise<EncString> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.settings?.pinProtected?.decrypted;\n  }\n\n  async setDecryptedPinProtected(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.settings.pinProtected.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPolicies(options?: StorageOptions): Promise<Policy[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.policies?.decrypted;\n  }\n\n  async setDecryptedPolicies(value: Policy[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.policies.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPrivateKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.privateKey?.decrypted;\n  }\n\n  async setDecryptedPrivateKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.privateKey.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedProviderKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.providerKeys?.decrypted;\n  }\n\n  async setDecryptedProviderKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.providerKeys.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedSends(options?: StorageOptions): Promise<SendView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.sends?.decrypted;\n  }\n\n  async setDecryptedSends(value: SendView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.sends.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDefaultUriMatch(options?: StorageOptions): Promise<UriMatchType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.defaultUriMatch;\n  }\n\n  async setDefaultUriMatch(value: UriMatchType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.defaultUriMatch = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAddLoginNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAddLoginNotification ?? false\n    );\n  }\n\n  async setDisableAddLoginNotification(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAddLoginNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoBiometricsPrompt(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoBiometricsPrompt ?? false\n    );\n  }\n\n  async setDisableAutoBiometricsPrompt(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoBiometricsPrompt = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoTotpCopy(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoTotpCopy ?? false\n    );\n  }\n\n  async setDisableAutoTotpCopy(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoTotpCopy = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableBadgeCounter(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableBadgeCounter ?? false\n    );\n  }\n\n  async setDisableBadgeCounter(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableBadgeCounter = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableChangedPasswordNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableChangedPasswordNotification ?? false\n    );\n  }\n\n  async setDisableChangedPasswordNotification(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableChangedPasswordNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableContextMenuItem(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableContextMenuItem ?? false\n    );\n  }\n\n  async setDisableContextMenuItem(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableContextMenuItem = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableFavicon(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getGlobals(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.disableFavicon ?? false\n    );\n  }\n\n  async setDisableFavicon(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.disableFavicon = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getDisableGa(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableGa ?? false\n    );\n  }\n\n  async setDisableGa(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableGa = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowCardsCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowCardsCurrentTab ?? false\n    );\n  }\n\n  async setDontShowCardsCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowCardsCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowIdentitiesCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowIdentitiesCurrentTab ?? false\n    );\n  }\n\n  async setDontShowIdentitiesCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowIdentitiesCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEmail(options?: StorageOptions): Promise<string> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.profile?.email;\n  }\n\n  async setEmail(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.profile.email = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getEmailVerified(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile.emailVerified ?? false\n    );\n  }\n\n  async setEmailVerified(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.emailVerified = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAlwaysOnTop(options?: StorageOptions): Promise<boolean> {\n    const accountPreference = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.enableAlwaysOnTop;\n    const globalPreference = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.enableAlwaysOnTop;\n    return accountPreference ?? globalPreference ?? false;\n  }\n\n  async setEnableAlwaysOnTop(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAlwaysOnTop = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableAlwaysOnTop = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAutoFillOnPageLoad(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.enableAutoFillOnPageLoad ?? false\n    );\n  }\n\n  async setEnableAutoFillOnPageLoad(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAutoFillOnPageLoad = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBiometric(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBiometrics ?? false\n    );\n  }\n\n  async setEnableBiometric(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableBrowserIntegration(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegrationFingerprint(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegrationFingerprint ?? false\n    );\n  }\n\n  async setEnableBrowserIntegrationFingerprint(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegrationFingerprint = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableCloseToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableCloseToTray ?? false\n    );\n  }\n\n  async setEnableCloseToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableCloseToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableFullWidth(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableFullWidth ?? false\n    );\n  }\n\n  async setEnableFullWidth(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableFullWidth = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableGravitars(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableGravitars ?? false\n    );\n  }\n\n  async setEnableGravitars(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableGravitars = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableMinimizeToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableMinimizeToTray ?? false\n    );\n  }\n\n  async setEnableMinimizeToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableMinimizeToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableStartToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableStartToTray ?? false\n    );\n  }\n\n  async setEnableStartToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableStartToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableTray ?? false\n    );\n  }\n\n  async setEnableTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedCiphers(options?: StorageOptions): Promise<{ [id: string]: CipherData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.ciphers?.encrypted;\n  }\n\n  async setEncryptedCiphers(\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.ciphers.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedCollections(\n    options?: StorageOptions\n  ): Promise<{ [id: string]: CollectionData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.collections?.encrypted;\n  }\n\n  async setEncryptedCollections(\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.collections.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  async setEncryptedCryptoSymmetricKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.cryptoSymmetricKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedFolders(options?: StorageOptions): Promise<{ [id: string]: FolderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.folders?.encrypted;\n  }\n\n  async setEncryptedFolders(\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.folders.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedOrganizationKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.organizationKeys.encrypted;\n  }\n\n  async setEncryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.organizationKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.passwordGenerationHistory?.encrypted;\n  }\n\n  async setEncryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.passwordGenerationHistory.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPinProtected(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.pinProtected?.encrypted;\n  }\n\n  async setEncryptedPinProtected(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.pinProtected.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPolicies(options?: StorageOptions): Promise<{ [id: string]: PolicyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.policies?.encrypted;\n  }\n\n  async setEncryptedPolicies(\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.policies.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPrivateKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.privateKey?.encrypted;\n  }\n\n  async setEncryptedPrivateKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.privateKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedProviderKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.providerKeys?.encrypted;\n  }\n\n  async setEncryptedProviderKeys(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.providerKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedSends(options?: StorageOptions): Promise<{ [id: string]: SendData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.sends.encrypted;\n  }\n\n  async setEncryptedSends(\n    value: { [id: string]: SendData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.sends.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEntityId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityId;\n  }\n\n  async setEntityId(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityId = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEntityType(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityType;\n  }\n\n  async setEntityType(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    if (this.state.activeUserId == null) {\n      return await this.getGlobalEnvironmentUrls(options);\n    }\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getAccount(options))?.settings?.environmentUrls ?? new EnvironmentUrls();\n  }\n\n  async setEnvironmentUrls(value: EnvironmentUrls, options?: StorageOptions): Promise<void> {\n    // Global values are set on each change and the current global settings are passed to any newly authed accounts.\n    // This is to allow setting environement values before an account is active, while still allowing individual accounts to have their own environments.\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.environmentUrls = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEquivalentDomains(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.equivalentDomains;\n  }\n\n  async setEquivalentDomains(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.equivalentDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEventCollection(options?: StorageOptions): Promise<EventData[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.eventCollection;\n  }\n\n  async setEventCollection(value: EventData[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.eventCollection = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEverBeenUnlocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))?.profile\n        ?.everBeenUnlocked ?? false\n    );\n  }\n\n  async setEverBeenUnlocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.profile.everBeenUnlocked = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getForcePasswordReset(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))?.profile\n        ?.forcePasswordReset ?? false\n    );\n  }\n\n  async setForcePasswordReset(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.profile.forcePasswordReset = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getInstalledVersion(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.installedVersion;\n  }\n\n  async setInstalledVersion(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.installedVersion = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (await this.getAccessToken(options)) != null && (await this.getUserId(options)) != null;\n  }\n\n  async getKdfIterations(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfIterations;\n  }\n\n  async setKdfIterations(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfIterations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKdfType(options?: StorageOptions): Promise<KdfType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfType;\n  }\n\n  async setKdfType(value: KdfType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKeyHash(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.keyHash;\n  }\n\n  async setKeyHash(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.keyHash = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLastActive(options?: StorageOptions): Promise<number> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n\n    const accountActivity = await this.storageService.get<{ [userId: string]: number }>(\n      keys.accountActivity,\n      options\n    );\n\n    if (accountActivity == null || Object.keys(accountActivity).length < 1) {\n      return null;\n    }\n\n    return accountActivity[options.userId];\n  }\n\n  async setLastActive(value: number, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    if (options.userId == null) {\n      return;\n    }\n    const accountActivity =\n      (await this.storageService.get<{ [userId: string]: number }>(\n        keys.accountActivity,\n        options\n      )) ?? {};\n    accountActivity[options.userId] = value;\n    await this.storageService.save(keys.accountActivity, accountActivity, options);\n  }\n\n  async getLastSync(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.profile?.lastSync;\n  }\n\n  async setLastSync(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.profile.lastSync = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getLegacyEtmKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.legacyEtmKey;\n  }\n\n  async setLegacyEtmKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.legacyEtmKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLocalData(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.data?.localData;\n  }\n  async setLocalData(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.data.localData = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getLocale(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.locale;\n  }\n\n  async setLocale(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.locale = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getMainWindowSize(options?: StorageOptions): Promise<number> {\n    return (await this.getGlobals(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.mainWindowSize;\n  }\n\n  async setMainWindowSize(value: number, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    globals.mainWindowSize = value;\n    await this.saveGlobals(globals, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getMinimizeOnCopyToClipboard(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.minimizeOnCopyToClipboard ?? false\n    );\n  }\n\n  async setMinimizeOnCopyToClipboard(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.minimizeOnCopyToClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNeverDomains(options?: StorageOptions): Promise<{ [id: string]: any }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.neverDomains;\n  }\n\n  async setNeverDomains(value: { [id: string]: any }, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.neverDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometrics(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.noAutoPromptBiometrics ?? false\n    );\n  }\n\n  async setNoAutoPromptBiometrics(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometricsText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.noAutoPromptBiometricsText;\n  }\n\n  async setNoAutoPromptBiometricsText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometricsText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOpenAtLogin(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.openAtLogin ?? false\n    );\n  }\n\n  async setOpenAtLogin(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.openAtLogin = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOrganizationInvitation(options?: StorageOptions): Promise<any> {\n    return (await this.getGlobals(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.organizationInvitation;\n  }\n\n  async setOrganizationInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    globals.organizationInvitation = value;\n    await this.saveGlobals(globals, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getOrganizations(options?: StorageOptions): Promise<{ [id: string]: OrganizationData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.organizations;\n  }\n\n  async setOrganizations(\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.organizations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPasswordGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.passwordGenerationOptions;\n  }\n\n  async setPasswordGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.passwordGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getUsernameGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.usernameGenerationOptions;\n  }\n\n  async setUsernameGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.usernameGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getGeneratorOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.generatorOptions;\n  }\n\n  async setGeneratorOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.generatorOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getProtectedPin(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.protectedPin;\n  }\n\n  async setProtectedPin(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.protectedPin = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getProviders(options?: StorageOptions): Promise<{ [id: string]: ProviderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.providers;\n  }\n\n  async setProviders(\n    value: { [id: string]: ProviderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.providers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPublicKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.publicKey;\n  }\n\n  async setPublicKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.publicKey = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getRefreshToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.refreshToken;\n  }\n\n  async setRefreshToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.refreshToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getRememberedEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.rememberedEmail;\n  }\n\n  async setRememberedEmail(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.rememberedEmail = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSecurityStamp(options?: StorageOptions): Promise<string> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.tokens?.securityStamp;\n  }\n\n  async setSecurityStamp(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.tokens.securityStamp = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getSettings(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.settings?.settings;\n  }\n\n  async setSettings(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.settings.settings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getSsoCodeVerifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoCodeVerifier;\n  }\n\n  async setSsoCodeVerifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoCodeVerifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getSsoOrgIdentifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.ssoOrganizationIdentifier;\n  }\n\n  async setSsoOrganizationIdentifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.ssoOrganizationIdentifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSsoState(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoState;\n  }\n\n  async setSsoState(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoState = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getTheme(options?: StorageOptions): Promise<ThemeType> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.theme;\n  }\n\n  async setTheme(value: ThemeType, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.theme = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getTwoFactorToken(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.twoFactorToken;\n  }\n\n  async setTwoFactorToken(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.twoFactorToken = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  async getUsesKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.usesKeyConnector;\n  }\n\n  async setUsesKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.usesKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getVaultTimeout(options?: StorageOptions): Promise<number> {\n    const accountVaultTimeout = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeout;\n    return accountVaultTimeout;\n  }\n\n  async setVaultTimeout(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getVaultTimeoutAction(options?: StorageOptions): Promise<string> {\n    const accountVaultTimeoutAction = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeoutAction;\n    const globalVaultTimeoutAction = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.vaultTimeoutAction;\n    return accountVaultTimeoutAction ?? globalVaultTimeoutAction;\n  }\n\n  async setVaultTimeoutAction(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeoutAction = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getStateVersion(): Promise<number> {\n    return (await this.getGlobals(await this.defaultOnDiskLocalOptions())).stateVersion ?? 1;\n  }\n\n  async setStateVersion(value: number): Promise<void> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    globals.stateVersion = value;\n    await this.saveGlobals(globals, await this.defaultOnDiskOptions());\n  }\n\n  async getWindow(): Promise<WindowState> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    return globals?.window != null && Object.keys(globals.window).length > 0\n      ? globals.window\n      : new WindowState();\n  }\n\n  async setWindow(value: WindowState, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.window = value;\n    return await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    return globals ?? this.createGlobals();\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected getGlobalsFromMemory(): TGlobalState {\n    return this.state.globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected saveGlobalsToMemory(globals: TGlobalState): void {\n    this.state.globals = globals;\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected getAccountFromMemory(options: StorageOptions): TAccount {\n    if (this.state.accounts == null) {\n      return null;\n    }\n    return this.state.accounts[this.getUserIdFromMemory(options)];\n  }\n\n  protected getUserIdFromMemory(options: StorageOptions): string {\n    return options?.userId != null\n      ? this.state.accounts[options.userId]?.profile?.userId\n      : this.state.activeUserId;\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    if (options?.userId == null && this.state.activeUserId == null) {\n      return null;\n    }\n\n    if (this.useAccountCache) {\n      const cachedAccount = this.accountDiskCache.get(options.userId);\n      if (cachedAccount != null) {\n        return cachedAccount;\n      }\n    }\n\n    const account = options?.useSecureStorage\n      ? (await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local })\n        ))\n      : await this.storageService.get<TAccount>(options.userId, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.set(options.userId, account);\n    }\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    }\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.delete(options.userId);\n    }\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if (this.getAccountFromMemory({ userId: account.profile.userId }) !== null) {\n      this.state.accounts[account.profile.userId] = account;\n    }\n    await this.pushAccounts();\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n    // EnvironmentUrls are set before authenticating and should override whatever is stored from any previous session\n    const environmentUrls = account.settings.environmentUrls;\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    } else if (await this.storageService.has(keys.tempAccountSettings)) {\n      account.settings = await this.storageService.get<any>(keys.tempAccountSettings);\n      await this.storageService.remove(keys.tempAccountSettings);\n    }\n    account.settings.environmentUrls = environmentUrls;\n    if (account.settings.vaultTimeoutAction === \"logOut\" && account.settings.vaultTimeout != null) {\n      account.tokens.accessToken = null;\n      account.tokens.refreshToken = null;\n      account.profile.apiKeyClientId = null;\n      account.keys.apiKeyClientSecret = null;\n    }\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n  }\n  //\n\n  protected async pushAccounts(): Promise<void> {\n    await this.pruneInMemoryAccounts();\n    if (this.state?.accounts == null || Object.keys(this.state.accounts).length < 1) {\n      this.accounts.next(null);\n      return;\n    }\n\n    this.accounts.next(this.state.accounts);\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected get defaultInMemoryOptions(): StorageOptions {\n    return { storageLocation: StorageLocation.Memory, userId: this.state.activeUserId };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId: this.state.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId: this.state.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId: this.state.activeUserId ?? (await this.getUserId()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: this.state.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await this.storageService.get<string>(keys.activeUserId);\n  }\n\n  protected async removeAccountFromLocalStorage(\n    userId: string = this.state.activeUserId\n  ): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(\n    userId: string = this.state.activeUserId\n  ): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(\n    userId: string = this.state.activeUserId\n  ): Promise<void> {\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected removeAccountFromMemory(userId: string = this.state.activeUserId): void {\n    delete this.state.accounts[userId];\n    if (this.useAccountCache) {\n      this.accountDiskCache.delete(userId);\n    }\n  }\n\n  protected async pruneInMemoryAccounts() {\n    // We preserve settings for logged out accounts, but we don't want to consider them when thinking about active account state\n    for (const userId in this.state.accounts) {\n      if (!(await this.getIsAuthenticated({ userId: userId }))) {\n        this.removeAccountFromMemory(userId);\n      }\n    }\n  }\n\n  // settings persist even on reset, and are not effected by this method\n  protected resetAccount(account: TAccount) {\n    const persistentAccountInformation = { settings: account.settings };\n    return Object.assign(this.createAccount(), persistentAccountInformation);\n  }\n\n  protected async setAccountEnvironmentUrls(account: TAccount): Promise<TAccount> {\n    account.settings.environmentUrls = await this.getGlobalEnvironmentUrls();\n    return account;\n  }\n\n  protected async getGlobalEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getGlobals(options)).environmentUrls ?? new EnvironmentUrls();\n  }\n\n  protected clearDecryptedDataForActiveUser() {\n    const userId = this.state.activeUserId;\n    if (userId == null || this.state?.accounts[userId]?.data == null) {\n      return;\n    }\n    this.state.accounts[userId].data = new AccountData();\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string) {\n    await this.setAccessToken(null, { userId: userId });\n    await this.setLastActive(null, { userId: userId });\n    this.state.authenticatedAccounts = this.state.authenticatedAccounts.filter(\n      (activeUserId) => activeUserId !== userId\n    );\n    await this.storageService.save(keys.authenticatedAccounts, this.state.authenticatedAccounts);\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  protected async dynamicallySetActiveUser() {\n    if (this.state.accounts == null || Object.keys(this.state.accounts).length < 1) {\n      await this.setActiveUser(null);\n      return;\n    }\n    for (const userId in this.state.accounts) {\n      if (userId == null) {\n        continue;\n      }\n      if (await this.getIsAuthenticated({ userId: userId })) {\n        await this.setActiveUser(userId);\n        break;\n      }\n      await this.setActiveUser(null);\n    }\n  }\n\n  private async getTimeoutBasedStorageOptions(options?: StorageOptions): Promise<StorageOptions> {\n    const timeoutAction = await this.getVaultTimeoutAction({ userId: options?.userId });\n    const timeout = await this.getVaultTimeout({ userId: options?.userId });\n    const defaultOptions =\n      timeoutAction === \"logOut\" && timeout != null\n        ? this.defaultInMemoryOptions\n        : await this.defaultOnDiskOptions();\n    return this.reconcileOptions(options, defaultOptions);\n  }\n\n  private async saveSecureStorageKey(key: string, value: string, options?: StorageOptions) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n}\n","import { GlobalState } from \"jslib-common/models/domain/globalState\";\nimport { StorageOptions } from \"jslib-common/models/domain/storageOptions\";\nimport { StateService as BaseStateService } from \"jslib-common/services/state.service\";\n\nimport { Account } from \"../models/account\";\nimport { BrowserComponentState } from \"../models/browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"../models/browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"../models/browserSendComponentState\";\n\nimport { StateService as StateServiceAbstraction } from \"./abstractions/state.service\";\n\nexport class StateService\n  extends BaseStateService<GlobalState, Account>\n  implements StateServiceAbstraction\n{\n  async addAccount(account: Account) {\n    // Apply browser overrides to default account values\n    account = new Account(account);\n    await super.addAccount(account);\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    // Firefox Private Mode can clash with non-Private Mode because they both read from the same onDiskOptions\n    // Check that there is an account in memory before considering the user authenticated\n    return (\n      (await super.getIsAuthenticated(options)) &&\n      (await this.getAccount(this.defaultInMemoryOptions)) != null\n    );\n  }\n\n  async getBrowserGroupingComponentState(\n    options?: StorageOptions\n  ): Promise<BrowserGroupingsComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.groupings;\n  }\n\n  async setBrowserGroupingComponentState(\n    value: BrowserGroupingsComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.groupings = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getBrowserCipherComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.ciphers;\n  }\n\n  async setBrowserCipherComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.ciphers = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getBrowserSendComponentState(options?: StorageOptions): Promise<BrowserSendComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.send;\n  }\n\n  async setBrowserSendComponentState(\n    value: BrowserSendComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.send = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n  async getBrowserSendTypeComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.sendType;\n  }\n\n  async setBrowserSendTypeComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.sendType = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n}\n","import { CipherType } from \"jslib-common/enums/cipherType\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n}\n","import { TreeNode } from \"jslib-common/models/domain/treeNode\";\nimport { CollectionView } from \"jslib-common/models/view/collectionView\";\nimport { FolderView } from \"jslib-common/models/view/folderView\";\n\nexport class DynamicTreeNode<T extends CollectionView | FolderView> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { KdfType } from \"../enums/kdfType\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { Policy } from \"../models/domain/policy\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport abstract class StateService<T extends Account = Account> {\n  accounts: BehaviorSubject<{ [userId: string]: T }>;\n  activeAccount: BehaviorSubject<string>;\n\n  addAccount: (account: T) => Promise<void>;\n  setActiveUser: (userId: string) => Promise<void>;\n  clean: (options?: StorageOptions) => Promise<void>;\n  init: () => Promise<void>;\n\n  getAccessToken: (options?: StorageOptions) => Promise<string>;\n  setAccessToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getAddEditCipherInfo: (options?: StorageOptions) => Promise<any>;\n  setAddEditCipherInfo: (value: any, options?: StorageOptions) => Promise<void>;\n  getAlwaysShowDock: (options?: StorageOptions) => Promise<boolean>;\n  setAlwaysShowDock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientId: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientId: (value: string, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientSecret: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientSecret: (value: string, options?: StorageOptions) => Promise<void>;\n  getAutoConfirmFingerPrints: (options?: StorageOptions) => Promise<boolean>;\n  setAutoConfirmFingerprints: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getAutoFillOnPageLoadDefault: (options?: StorageOptions) => Promise<boolean>;\n  setAutoFillOnPageLoadDefault: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricAwaitingAcceptance: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricAwaitingAcceptance: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricFingerprintValidated: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricFingerprintValidated: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricLocked: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricLocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricText: (options?: StorageOptions) => Promise<string>;\n  setBiometricText: (value: string, options?: StorageOptions) => Promise<void>;\n  getBiometricUnlock: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricUnlock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCanAccessPremium: (options?: StorageOptions) => Promise<boolean>;\n  getHasPremiumPersonally: (options?: StorageOptions) => Promise<boolean>;\n  setHasPremiumPersonally: (value: boolean, options?: StorageOptions) => Promise<void>;\n  setHasPremiumFromOrganization: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getHasPremiumFromOrganization: (options?: StorageOptions) => Promise<boolean>;\n  getClearClipboard: (options?: StorageOptions) => Promise<number>;\n  setClearClipboard: (value: number, options?: StorageOptions) => Promise<void>;\n  getCollapsedGroupings: (options?: StorageOptions) => Promise<string[]>;\n  setCollapsedGroupings: (value: string[], options?: StorageOptions) => Promise<void>;\n  getConvertAccountToKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setConvertAccountToKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setCryptoMasterKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyAuto: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyAuto: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyB64: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyB64: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  hasCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setCryptoMasterKeyBiometric: (value: string, options?: StorageOptions) => Promise<void>;\n  getDecodedToken: (options?: StorageOptions) => Promise<any>;\n  setDecodedToken: (value: any, options?: StorageOptions) => Promise<void>;\n  getDecryptedCiphers: (options?: StorageOptions) => Promise<CipherView[]>;\n  setDecryptedCiphers: (value: CipherView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCollections: (options?: StorageOptions) => Promise<CollectionView[]>;\n  setDecryptedCollections: (value: CollectionView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setDecryptedCryptoSymmetricKey: (\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedFolders: (options?: StorageOptions) => Promise<FolderView[]>;\n  setDecryptedFolders: (value: FolderView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setDecryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPinProtected: (options?: StorageOptions) => Promise<EncString>;\n  setDecryptedPinProtected: (value: EncString, options?: StorageOptions) => Promise<void>;\n  getDecryptedPolicies: (options?: StorageOptions) => Promise<Policy[]>;\n  setDecryptedPolicies: (value: Policy[], options?: StorageOptions) => Promise<void>;\n  getDecryptedPrivateKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setDecryptedPrivateKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getDecryptedProviderKeys: (options?: StorageOptions) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedProviderKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedSends: (options?: StorageOptions) => Promise<SendView[]>;\n  setDecryptedSends: (value: SendView[], options?: StorageOptions) => Promise<void>;\n  getDefaultUriMatch: (options?: StorageOptions) => Promise<UriMatchType>;\n  setDefaultUriMatch: (value: UriMatchType, options?: StorageOptions) => Promise<void>;\n  getDisableAddLoginNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAddLoginNotification: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoBiometricsPrompt: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoBiometricsPrompt: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoTotpCopy: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoTotpCopy: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableBadgeCounter: (options?: StorageOptions) => Promise<boolean>;\n  setDisableBadgeCounter: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableChangedPasswordNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableChangedPasswordNotification: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDisableContextMenuItem: (options?: StorageOptions) => Promise<boolean>;\n  setDisableContextMenuItem: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableFavicon: (options?: StorageOptions) => Promise<boolean>;\n  setDisableFavicon: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableGa: (options?: StorageOptions) => Promise<boolean>;\n  setDisableGa: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowCardsCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowCardsCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowIdentitiesCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowIdentitiesCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEmail: (options?: StorageOptions) => Promise<string>;\n  setEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmailVerified: (options?: StorageOptions) => Promise<boolean>;\n  setEmailVerified: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAlwaysOnTop: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAlwaysOnTop: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAutoFillOnPageLoad: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAutoFillOnPageLoad: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBiometric: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegration: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegrationFingerprint: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegrationFingerprint: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableCloseToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableCloseToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableFullWidth: (options?: StorageOptions) => Promise<boolean>;\n  setEnableFullWidth: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableGravitars: (options?: StorageOptions) => Promise<boolean>;\n  setEnableGravitars: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableMinimizeToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableMinimizeToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableStartToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableStartToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEncryptedCiphers: (options?: StorageOptions) => Promise<{ [id: string]: CipherData }>;\n  setEncryptedCiphers: (\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCollections: (options?: StorageOptions) => Promise<{ [id: string]: CollectionData }>;\n  setEncryptedCollections: (\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedCryptoSymmetricKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedFolders: (options?: StorageOptions) => Promise<{ [id: string]: FolderData }>;\n  setEncryptedFolders: (\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedOrganizationKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setEncryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPinProtected: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPinProtected: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedPolicies: (options?: StorageOptions) => Promise<{ [id: string]: PolicyData }>;\n  setEncryptedPolicies: (\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPrivateKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPrivateKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedProviderKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedProviderKeys: (value: any, options?: StorageOptions) => Promise<void>;\n  getEncryptedSends: (options?: StorageOptions) => Promise<{ [id: string]: SendData }>;\n  setEncryptedSends: (value: { [id: string]: SendData }, options?: StorageOptions) => Promise<void>;\n  getEntityId: (options?: StorageOptions) => Promise<string>;\n  setEntityId: (value: string, options?: StorageOptions) => Promise<void>;\n  getEntityType: (options?: StorageOptions) => Promise<any>;\n  setEntityType: (value: string, options?: StorageOptions) => Promise<void>;\n  getEnvironmentUrls: (options?: StorageOptions) => Promise<EnvironmentUrls>;\n  setEnvironmentUrls: (value: EnvironmentUrls, options?: StorageOptions) => Promise<void>;\n  getEquivalentDomains: (options?: StorageOptions) => Promise<any>;\n  setEquivalentDomains: (value: string, options?: StorageOptions) => Promise<void>;\n  getEventCollection: (options?: StorageOptions) => Promise<EventData[]>;\n  setEventCollection: (value: EventData[], options?: StorageOptions) => Promise<void>;\n  getEverBeenUnlocked: (options?: StorageOptions) => Promise<boolean>;\n  setEverBeenUnlocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getForcePasswordReset: (options?: StorageOptions) => Promise<boolean>;\n  setForcePasswordReset: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getInstalledVersion: (options?: StorageOptions) => Promise<string>;\n  setInstalledVersion: (value: string, options?: StorageOptions) => Promise<void>;\n  getIsAuthenticated: (options?: StorageOptions) => Promise<boolean>;\n  getKdfIterations: (options?: StorageOptions) => Promise<number>;\n  setKdfIterations: (value: number, options?: StorageOptions) => Promise<void>;\n  getKdfType: (options?: StorageOptions) => Promise<KdfType>;\n  setKdfType: (value: KdfType, options?: StorageOptions) => Promise<void>;\n  getKeyHash: (options?: StorageOptions) => Promise<string>;\n  setKeyHash: (value: string, options?: StorageOptions) => Promise<void>;\n  getLastActive: (options?: StorageOptions) => Promise<number>;\n  setLastActive: (value: number, options?: StorageOptions) => Promise<void>;\n  getLastSync: (options?: StorageOptions) => Promise<string>;\n  setLastSync: (value: string, options?: StorageOptions) => Promise<void>;\n  getLegacyEtmKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setLegacyEtmKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getLocalData: (options?: StorageOptions) => Promise<any>;\n  setLocalData: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocale: (options?: StorageOptions) => Promise<string>;\n  setLocale: (value: string, options?: StorageOptions) => Promise<void>;\n  getMainWindowSize: (options?: StorageOptions) => Promise<number>;\n  setMainWindowSize: (value: number, options?: StorageOptions) => Promise<void>;\n  getMinimizeOnCopyToClipboard: (options?: StorageOptions) => Promise<boolean>;\n  setMinimizeOnCopyToClipboard: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNeverDomains: (options?: StorageOptions) => Promise<{ [id: string]: any }>;\n  setNeverDomains: (value: { [id: string]: any }, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometrics: (options?: StorageOptions) => Promise<boolean>;\n  setNoAutoPromptBiometrics: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometricsText: (options?: StorageOptions) => Promise<string>;\n  setNoAutoPromptBiometricsText: (value: string, options?: StorageOptions) => Promise<void>;\n  getOpenAtLogin: (options?: StorageOptions) => Promise<boolean>;\n  setOpenAtLogin: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getOrganizationInvitation: (options?: StorageOptions) => Promise<any>;\n  setOrganizationInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  getOrganizations: (options?: StorageOptions) => Promise<{ [id: string]: OrganizationData }>;\n  setOrganizations: (\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getPasswordGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setPasswordGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getUsernameGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setUsernameGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getGeneratorOptions: (options?: StorageOptions) => Promise<any>;\n  setGeneratorOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getProtectedPin: (options?: StorageOptions) => Promise<string>;\n  setProtectedPin: (value: string, options?: StorageOptions) => Promise<void>;\n  getProviders: (options?: StorageOptions) => Promise<{ [id: string]: ProviderData }>;\n  setProviders: (value: { [id: string]: ProviderData }, options?: StorageOptions) => Promise<void>;\n  getPublicKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setPublicKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getRefreshToken: (options?: StorageOptions) => Promise<string>;\n  setRefreshToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getRememberedEmail: (options?: StorageOptions) => Promise<string>;\n  setRememberedEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getSecurityStamp: (options?: StorageOptions) => Promise<string>;\n  setSecurityStamp: (value: string, options?: StorageOptions) => Promise<void>;\n  getSettings: (options?: StorageOptions) => Promise<any>;\n  setSettings: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoCodeVerifier: (options?: StorageOptions) => Promise<string>;\n  setSsoCodeVerifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoOrgIdentifier: (options?: StorageOptions) => Promise<string>;\n  setSsoOrganizationIdentifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoState: (options?: StorageOptions) => Promise<string>;\n  setSsoState: (value: string, options?: StorageOptions) => Promise<void>;\n  getTheme: (options?: StorageOptions) => Promise<ThemeType>;\n  setTheme: (value: ThemeType, options?: StorageOptions) => Promise<void>;\n  getTwoFactorToken: (options?: StorageOptions) => Promise<string>;\n  setTwoFactorToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserId: (options?: StorageOptions) => Promise<string>;\n  getUsesKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setUsesKeyConnector: (vaule: boolean, options?: StorageOptions) => Promise<void>;\n  getVaultTimeout: (options?: StorageOptions) => Promise<number>;\n  setVaultTimeout: (value: number, options?: StorageOptions) => Promise<void>;\n  getVaultTimeoutAction: (options?: StorageOptions) => Promise<string>;\n  setVaultTimeoutAction: (value: string, options?: StorageOptions) => Promise<void>;\n  getStateVersion: () => Promise<number>;\n  setStateVersion: (value: number) => Promise<void>;\n  getWindow: () => Promise<WindowState>;\n  setWindow: (value: WindowState) => Promise<void>;\n}\n","import { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport abstract class OrganizationService {\n  get: (id: string) => Promise<Organization>;\n  getByIdentifier: (identifier: string) => Promise<Organization>;\n  getAll: (userId?: string) => Promise<Organization[]>;\n  save: (orgs: { [id: string]: OrganizationData }) => Promise<any>;\n  canManageSponsorships: () => Promise<boolean>;\n  hasOrganizations: (userId?: string) => Promise<boolean>;\n}\n","import { FolderData } from \"../models/data/folderData\";\nimport { Folder } from \"../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { FolderView } from \"../models/view/folderView\";\n\nexport abstract class FolderService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  getAll: () => Promise<Folder[]>;\n  getAllDecrypted: () => Promise<FolderView[]>;\n  getAllNested: (folders?: FolderView[]) => Promise<TreeNode<FolderView>[]>;\n  getNested: (id: string) => Promise<TreeNode<FolderView>>;\n  saveWithServer: (folder: Folder) => Promise<any>;\n  upsert: (folder: FolderData | FolderData[]) => Promise<any>;\n  replace: (folders: { [id: string]: FolderData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string) => Promise<any>;\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\n\nexport abstract class CipherService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher?: Cipher\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchType\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  saveWithServer: (cipher: Cipher) => Promise<any>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<any>;\n  upsert: (cipher: CipherData | CipherData[]) => Promise<any>;\n  replace: (ciphers: { [id: string]: CipherData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string) => Promise<any>;\n  deleteManyWithServer: (ids: string[]) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: any, b: any) => number;\n  sortCiphersByLastUsedThenName: (a: any, b: any) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[]) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) => Promise<any>;\n  restoreWithServer: (id: string) => Promise<any>;\n  restoreManyWithServer: (ids: string[]) => Promise<any>;\n}\n","import { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nexport abstract class CollectionService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { PolicyType } from \"../enums/policyType\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../models/domain/masterPasswordPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\n\nexport abstract class PolicyService {\n  clearCache: () => void;\n  getAll: (type?: PolicyType, userId?: string) => Promise<Policy[]>;\n  getPolicyForOrganization: (policyType: PolicyType, organizationId: string) => Promise<Policy>;\n  replace: (policies: { [id: string]: PolicyData }) => Promise<any>;\n  clear: (userId?: string) => Promise<any>;\n  getMasterPasswordPoliciesForInvitedUsers: (orgId: string) => Promise<MasterPasswordPolicyOptions>;\n  getMasterPasswordPolicyOptions: (policies?: Policy[]) => Promise<MasterPasswordPolicyOptions>;\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions\n  ) => boolean;\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string\n  ) => [ResetPasswordPolicyOptions, boolean];\n  mapPoliciesFromToken: (policiesResponse: ListResponse<PolicyResponse>) => Policy[];\n  policyAppliesToUser: (\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) => Promise<boolean>;\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { CollectionService } from \"jslib-common/abstractions/collection.service\";\nimport { FolderService } from \"jslib-common/abstractions/folder.service\";\nimport { OrganizationService } from \"jslib-common/abstractions/organization.service\";\nimport { PolicyService } from \"jslib-common/abstractions/policy.service\";\nimport { StateService } from \"jslib-common/abstractions/state.service\";\nimport { PolicyType } from \"jslib-common/enums/policyType\";\nimport { Organization } from \"jslib-common/models/domain/organization\";\nimport { CollectionView } from \"jslib-common/models/view/collectionView\";\nimport { FolderView } from \"jslib-common/models/view/folderView\";\n\nimport { DynamicTreeNode } from \"./models/dynamic-tree-node.model\";\n\n@Injectable()\nexport class VaultFilterService {\n  constructor(\n    protected stateService: StateService,\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.stateService.setCollapsedGroupings(Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return new Set(await this.stateService.getCollapsedGroupings());\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    return await this.organizationService.getAll();\n  }\n\n  async buildFolders(organizationId?: string): Promise<DynamicTreeNode<FolderView>> {\n    const storedFolders = await this.folderService.getAllDecrypted();\n    let folders: FolderView[];\n    if (organizationId != null) {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n      folders = storedFolders.filter(\n        (f) =>\n          orgCiphers.filter((oc) => oc.folderId == f.id).length > 0 ||\n          ciphers.filter((c) => c.folderId == f.id).length < 1\n      );\n    } else {\n      folders = storedFolders;\n    }\n    const nestedFolders = await this.folderService.getAllNested(folders);\n    return new DynamicTreeNode<FolderView>({\n      fullList: folders,\n      nestedList: nestedFolders,\n    });\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.SingleOrg);\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership);\n  }\n}\n","import { VaultFilter } from \"jslib-angular/modules/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"jslib-angular/modules/vault-filter/vault-filter.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { CollectionService } from \"jslib-common/abstractions/collection.service\";\nimport { FolderService } from \"jslib-common/abstractions/folder.service\";\nimport { OrganizationService } from \"jslib-common/abstractions/organization.service\";\nimport { PolicyService } from \"jslib-common/abstractions/policy.service\";\nimport { StateService } from \"jslib-common/abstractions/state.service\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"jslib-common/services/vaultTimeout.service\";\n\nimport { SafariApp } from \"../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    this.checkVaultTimeout();\n    if (this.platformUtilsService.isSafari()) {\n      this.checkSafari();\n    } else {\n      setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n    }\n  }\n\n  // This is a work-around to safari adding an arbitary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import { AuthService } from \"../abstractions/auth.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { PolicyType } from \"../enums/policyType\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (expired: boolean, userId?: string) => Promise<void> = null\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    this.checkVaultTimeout();\n    setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    if (await this.platformUtilsService.isViewOpen()) {\n      return;\n    }\n\n    for (const userId in this.stateService.accounts.getValue()) {\n      if (userId != null && (await this.shouldLock(userId))) {\n        await this.executeTimeoutAction(userId);\n      }\n    }\n  }\n\n  async lock(allowSoftLock = false, userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    if (await this.keyConnectorService.getUsesKeyConnector()) {\n      const pinSet = await this.isPinLockSet();\n      const pinLock =\n        (pinSet[0] && (await this.stateService.getDecryptedPinProtected()) != null) || pinSet[1];\n\n      if (!pinLock && !(await this.isBiometricLockSet())) {\n        await this.logOut(userId);\n      }\n    }\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n    }\n\n    await this.stateService.setEverBeenUnlocked(true, { userId: userId });\n    await this.stateService.setBiometricLocked(true, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n\n    await this.cryptoService.clearKey(false, userId);\n    await this.cryptoService.clearOrgKeys(true, userId);\n    await this.cryptoService.clearKeyPair(true, userId);\n    await this.cryptoService.clearEncKey(true, userId);\n\n    await this.folderService.clearCache(userId);\n    await this.cipherService.clearCache(userId);\n    await this.collectionService.clearCache(userId);\n\n    this.messagingService.send(\"locked\", { userId: userId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(false, userId);\n    }\n  }\n\n  async setVaultTimeoutOptions(timeout: number, action: string): Promise<void> {\n    await this.stateService.setVaultTimeout(timeout);\n\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const token = await this.tokenService.getToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const currentAction = await this.stateService.getVaultTimeoutAction();\n    if ((timeout != null || timeout === 0) && action === \"logOut\" && action !== currentAction) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      await this.tokenService.clearToken();\n    }\n\n    await this.stateService.setVaultTimeoutAction(action);\n\n    await this.tokenService.setToken(token);\n    await this.tokenService.setRefreshToken(refreshToken);\n    await this.tokenService.setClientId(clientId);\n    await this.tokenService.setClientSecret(clientSecret);\n\n    await this.cryptoService.toggleKey();\n  }\n\n  async isPinLockSet(): Promise<[boolean, boolean]> {\n    const protectedPin = await this.stateService.getProtectedPin();\n    const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n    return [protectedPin != null, pinProtectedKey != null];\n  }\n\n  async isBiometricLockSet(): Promise<boolean> {\n    return await this.stateService.getBiometricUnlock();\n  }\n\n  async getVaultTimeout(userId?: string): Promise<number> {\n    const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n\n    if (\n      await this.policyService.policyAppliesToUser(PolicyType.MaximumVaultTimeout, null, userId)\n    ) {\n      const policy = await this.policyService.getAll(PolicyType.MaximumVaultTimeout, userId);\n      // Remove negative values, and ensure it's smaller than maximum allowed value according to policy\n      let timeout = Math.min(vaultTimeout, policy[0].data.minutes);\n\n      if (vaultTimeout == null || timeout < 0) {\n        timeout = policy[0].data.minutes;\n      }\n\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (vaultTimeout !== timeout) {\n        await this.stateService.setVaultTimeout(timeout, { userId: userId });\n      }\n\n      return timeout;\n    }\n\n    return vaultTimeout;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEverBeenUnlocked(false, { userId: userId });\n    await this.stateService.setDecryptedPinProtected(null, { userId: userId });\n    await this.stateService.setProtectedPin(null, { userId: userId });\n  }\n\n  private async shouldLock(userId: string): Promise<boolean> {\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await this.getVaultTimeout(userId);\n    if (vaultTimeout == null || vaultTimeout < 0) {\n      return false;\n    }\n\n    const lastActive = await this.stateService.getLastActive({ userId: userId });\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: string): Promise<void> {\n    const timeoutAction = await this.stateService.getVaultTimeoutAction({ userId: userId });\n    timeoutAction === \"logOut\" ? await this.logOut(userId) : await this.lock(true, userId);\n  }\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { PasswordGenerationService } from \"jslib-common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { VaultTimeoutService } from \"jslib-common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  async init() {\n    BrowserApi.messageListener(\n      \"commands.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n          await this.processCommand(\n            msg.data.commandToRetry.msg.command,\n            msg.data.commandToRetry.sender\n          );\n        }\n\n        if (this.isVivaldi && msg.command === \"keyboardShortcutTriggered\" && msg.shortcut) {\n          await this.processCommand(msg.shortcut, sender);\n        }\n      }\n    );\n\n    if (!this.isVivaldi && chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case \"autofill_login\":\n        await this.autoFillLogin(sender ? sender.tab : null);\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock(true);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async autoFillLogin(tab?: chrome.tabs.Tab) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: \"autofill_login\" },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, \"autofill_cmd\");\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    this.main.openPopup();\n  }\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { EventService } from \"jslib-common/abstractions/event.service\";\nimport { PasswordGenerationService } from \"jslib-common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { TotpService } from \"jslib-common/abstractions/totp.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"jslib-common/enums/cipherRepromptType\";\nimport { EventType } from \"jslib-common/enums/eventType\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class ContextMenusBackground {\n  private readonly noopCommandSuffix = \"noop\";\n  private contextMenus: any;\n\n  constructor(\n    private main: MainBackground,\n    private cipherService: CipherService,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private authService: AuthService,\n    private eventService: EventService,\n    private totpService: TotpService\n  ) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  async init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener(\n      async (info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) => {\n        if (info.menuItemId === \"generate-password\") {\n          await this.generatePasswordToClipboard();\n        } else if (info.menuItemId === \"copy-identifier\") {\n          await this.getClickedElement(tab, info.frameId);\n        } else if (\n          info.parentMenuItemId === \"autofill\" ||\n          info.parentMenuItemId === \"copy-username\" ||\n          info.parentMenuItemId === \"copy-password\" ||\n          info.parentMenuItemId === \"copy-totp\"\n        ) {\n          await this.cipherAction(tab, info);\n        }\n      }\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          await this.cipherAction(\n            msg.data.commandToRetry.sender.tab,\n            msg.data.commandToRetry.msg.data\n          );\n        }\n      }\n    );\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async getClickedElement(tab: chrome.tabs.Tab, frameId: number) {\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, { command: \"getClickedElement\" }, { frameId: frameId });\n  }\n\n  private async cipherAction(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    const id = info.menuItemId.split(\"_\")[1];\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: this.noopCommandSuffix, data: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    let cipher: CipherView;\n    if (id === this.noopCommandSuffix) {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(tab.url);\n      cipher = ciphers.find((c) => c.reprompt === CipherRepromptType.None);\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find((c) => c.id === id);\n    }\n\n    if (cipher == null) {\n      return;\n    }\n\n    if (info.parentMenuItemId === \"autofill\") {\n      await this.startAutofillPage(tab, cipher);\n    } else if (info.parentMenuItemId === \"copy-username\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.username, { window: window });\n    } else if (info.parentMenuItemId === \"copy-password\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.password, { window: window });\n      this.eventService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (info.parentMenuItemId === \"copy-totp\") {\n      const totpValue = await this.totpService.getCode(cipher.login.totp);\n      this.platformUtilsService.copyToClipboard(totpValue, { window: window });\n    }\n  }\n\n  private async startAutofillPage(tab: chrome.tabs.Tab, cipher: CipherView) {\n    this.main.loginToAutoFill = cipher;\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, {\n      command: \"collectPageDetails\",\n      tab: tab,\n      sender: \"contextMenu\",\n    });\n  }\n}\n","import { NotificationsService } from \"jslib-common/abstractions/notifications.service\";\nimport { VaultTimeoutService } from \"jslib-common/abstractions/vaultTimeout.service\";\n\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: any;\n  private idleTimer: number = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private stateService: StateService,\n    private notificationsService: NotificationsService\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  async init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(async (newState: string) => {\n        if (newState === \"locked\") {\n          // If the screen is locked or the screensaver activates\n          const timeout = await this.stateService.getVaultTimeout();\n          if (timeout === -2) {\n            // On System Lock vault timeout option\n            const action = await this.stateService.getVaultTimeoutAction();\n            if (action === \"logOut\") {\n              await this.vaultTimeoutService.logOut();\n            } else {\n              await this.vaultTimeoutService.lock(true);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      window.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { AppIdService } from \"jslib-common/abstractions/appId.service\";\nimport { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CryptoService } from \"jslib-common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"jslib-common/abstractions/cryptoFunction.service\";\nimport { I18nService } from \"jslib-common/abstractions/i18n.service\";\nimport { LogService } from \"jslib-common/abstractions/log.service\";\nimport { MessagingService } from \"jslib-common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { StateService } from \"jslib-common/abstractions/state.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { Utils } from \"jslib-common/misc/utils\";\nimport { EncString } from \"jslib-common/models/domain/encString\";\nimport { SymmetricCryptoKey } from \"jslib-common/models/domain/symmetricCryptoKey\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst EncryptionAlgorithm = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private privateKey: ArrayBuffer = null;\n  private publicKey: ArrayBuffer = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private i18nService: I18nService,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateService: StateService,\n    private logService: LogService,\n    private authService: AuthService\n  ) {\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        BrowserApi.reloadExtension(null);\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(\"startDesktop\");\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted.buffer,\n              this.privateKey,\n              EncryptionAlgorithm\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              this.stateService.setBiometricFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.messagingService.send(\"showDialog\", {\n              text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n              title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n              confirmText: this.i18nService.t(\"ok\"),\n              type: \"error\",\n            });\n            break;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.showWrongUserDialog();\n            break;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(reason);\n      });\n    });\n  }\n\n  showWrongUserDialog() {\n    this.messagingService.send(\"showDialog\", {\n      text: this.i18nService.t(\"nativeMessagingWrongUserDesc\"),\n      title: this.i18nService.t(\"nativeMessagingWrongUserTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"error\",\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = await this.stateService.getUserId();\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = resolve;\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      this.port.postMessage(message);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.messagingService.send(\"showDialog\", {\n        text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n        title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n        confirmText: this.i18nService.t(\"ok\"),\n        type: \"error\",\n      });\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret)\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        await this.stateService.setBiometricAwaitingAcceptance(null);\n\n        if (message.response === \"not enabled\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotEnabledDesc\"),\n            title: this.i18nService.t(\"biometricsNotEnabledTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        } else if (message.response === \"not supported\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotSupportedDesc\"),\n            title: this.i18nService.t(\"biometricsNotSupportedTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        }\n\n        const enabled = await this.stateService.getBiometricUnlock();\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.stateService.setBiometricUnlock(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          await this.cryptoService.setKey(\n            new SymmetricCryptoKey(Utils.fromB64ToArray(message.keyB64).buffer)\n          );\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            await this.cryptoService.getFingerprint(await this.stateService.getUserId());\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKey();\n            this.showWrongUserDialog();\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          await this.stateService.setBiometricLocked(false);\n          this.runtimeBackground.processMessage({ command: \"unlocked\" }, null, null);\n        }\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: await this.stateService.getUserId(),\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = (\n      await this.cryptoService.getFingerprint(await this.stateService.getUserId(), this.publicKey)\n    ).join(\" \");\n\n    this.messagingService.send(\"showDialog\", {\n      html: `${this.i18nService.t(\n        \"desktopIntegrationVerificationText\"\n      )}<br><br><strong>${fingerprint}</strong>`,\n      title: this.i18nService.t(\"desktopSyncVerificationTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"warning\",\n    });\n  }\n}\n","export enum NotificationQueueMessageType {\n  AddLogin = 0,\n  ChangePassword = 1,\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { FolderService } from \"jslib-common/abstractions/folder.service\";\nimport { PolicyService } from \"jslib-common/abstractions/policy.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { CipherType } from \"jslib-common/enums/cipherType\";\nimport { PolicyType } from \"jslib-common/enums/policyType\";\nimport { Utils } from \"jslib-common/misc/utils\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { LoginUriView } from \"jslib-common/models/view/loginUriView\";\nimport { LoginView } from \"jslib-common/models/view/loginView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport AddChangePasswordQueueMessage from \"./models/addChangePasswordQueueMessage\";\nimport AddLoginQueueMessage from \"./models/addLoginQueueMessage\";\nimport AddLoginRuntimeMessage from \"./models/addLoginRuntimeMessage\";\nimport ChangePasswordRuntimeMessage from \"./models/changePasswordRuntimeMessage\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\nimport { NotificationQueueMessageType } from \"./models/notificationQueueMessageType\";\n\nexport default class NotificationBackground {\n  private notificationQueue: (AddLoginQueueMessage | AddChangePasswordQueueMessage)[] = [];\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private stateService: StateService\n  ) {}\n\n  async init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    BrowserApi.messageListener(\n      \"notification.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender) => {\n        await this.processMessage(msg, sender);\n      }\n    );\n\n    this.cleanupNotificationQueue();\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"unlockCompleted\":\n        if (msg.data.target !== \"notification.background\") {\n          return;\n        }\n        await this.processMessage(msg.data.commandToRetry.msg, msg.data.commandToRetry.sender);\n        break;\n      case \"bgGetDataForTab\":\n        await this.getDataForTab(sender.tab, msg.responseCommand);\n        break;\n      case \"bgCloseNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n        break;\n      case \"bgAdjustNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", msg.data);\n        break;\n      case \"bgAddLogin\":\n        await this.addLogin(msg.login, sender.tab);\n        break;\n      case \"bgChangedPassword\":\n        await this.changedPassword(msg.data, sender.tab);\n        break;\n      case \"bgAddClose\":\n      case \"bgChangeClose\":\n        this.removeTabFromNotificationQueue(sender.tab);\n        break;\n      case \"bgAddSave\":\n      case \"bgChangeSave\":\n        if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n          const retryMessage: LockedVaultPendingNotificationsItem = {\n            commandToRetry: {\n              msg: msg,\n              sender: sender,\n            },\n            target: \"notification.background\",\n          };\n          await BrowserApi.tabSendMessageData(\n            sender.tab,\n            \"addToLockedVaultPendingNotifications\",\n            retryMessage\n          );\n          await BrowserApi.tabSendMessageData(sender.tab, \"promptForLogin\");\n          return;\n        }\n        await this.saveOrUpdateCredentials(sender.tab, msg.folder);\n        break;\n      case \"bgNeverSave\":\n        await this.saveNever(sender.tab);\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"notificationBar\": {\n            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);\n            await BrowserApi.tabSendMessageData(msg.tab, \"notificationBarPageDetails\", {\n              details: msg.details,\n              forms: forms,\n            });\n            break;\n          }\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes\n  }\n\n  private doNotificationQueueCheck(tab: chrome.tabs.Tab): void {\n    if (tab == null) {\n      return;\n    }\n\n    const tabDomain = Utils.getDomain(tab.url);\n    if (tabDomain == null) {\n      return;\n    }\n\n    for (let i = 0; i < this.notificationQueue.length; i++) {\n      if (\n        this.notificationQueue[i].tabId !== tab.id ||\n        this.notificationQueue[i].domain !== tabDomain\n      ) {\n        continue;\n      }\n\n      if (this.notificationQueue[i].type === NotificationQueueMessageType.AddLogin) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"add\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      } else if (this.notificationQueue[i].type === NotificationQueueMessageType.ChangePassword) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"change\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      }\n      break;\n    }\n  }\n\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tabId === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  private async addLogin(loginInfo: AddLoginRuntimeMessage, tab: chrome.tabs.Tab) {\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    let normalizedUsername = loginInfo.username;\n    if (normalizedUsername != null) {\n      normalizedUsername = normalizedUsername.toLowerCase();\n    }\n\n    const disabledAddLogin = await this.stateService.getDisableAddLoginNotification();\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab, true);\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername\n    );\n    if (usernameMatches.length === 0) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab);\n    } else if (\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      const disabledChangePassword =\n        await this.stateService.getDisableChangedPasswordNotification();\n      if (disabledChangePassword) {\n        return;\n      }\n      this.pushChangePasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginRuntimeMessage,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async changedPassword(changeData: ChangePasswordRuntimeMessage, tab: chrome.tabs.Tab) {\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      this.pushChangePasswordToQueue(null, loginDomain, changeData.newPassword, tab, true);\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, tab);\n    }\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        (queueMessage.type !== NotificationQueueMessageType.AddLogin &&\n          queueMessage.type !== NotificationQueueMessageType.ChangePassword)\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const changePasswordMessage = queueMessage as AddChangePasswordQueueMessage;\n        const cipher = await this.getDecryptedCipherById(changePasswordMessage.cipherId);\n        if (cipher == null) {\n          return;\n        }\n        await this.updateCipher(cipher, changePasswordMessage.newPassword);\n        return;\n      }\n\n      if (queueMessage.type === NotificationQueueMessageType.AddLogin) {\n        if (!queueMessage.wasVaultLocked) {\n          await this.createNewCipher(queueMessage as AddLoginQueueMessage, folderId);\n          BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n          return;\n        }\n\n        // If the vault was locked, check if a cipher needs updating instead of creating a new one\n        const addLoginMessage = queueMessage as AddLoginQueueMessage;\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(addLoginMessage.uri);\n        const usernameMatches = ciphers.filter(\n          (c) =>\n            c.login.username != null && c.login.username.toLowerCase() === addLoginMessage.username\n        );\n\n        if (usernameMatches.length >= 1) {\n          await this.updateCipher(usernameMatches[0], addLoginMessage.password);\n          return;\n        }\n\n        await this.createNewCipher(addLoginMessage, folderId);\n        BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n      }\n    }\n  }\n\n  private async createNewCipher(queueMessage: AddLoginQueueMessage, folderId: string) {\n    const loginModel = new LoginView();\n    const loginUri = new LoginUriView();\n    loginUri.uri = queueMessage.uri;\n    loginModel.uris = [loginUri];\n    loginModel.username = queueMessage.username;\n    loginModel.password = queueMessage.password;\n    const model = new CipherView();\n    model.name = Utils.getHostname(queueMessage.uri) || queueMessage.domain;\n    model.name = model.name.replace(/^www\\./, \"\");\n    model.type = CipherType.Login;\n    model.login = loginModel;\n\n    if (!Utils.isNullOrWhitespace(folderId)) {\n      const folders = await this.folderService.getAllDecrypted();\n      if (folders.some((x) => x.id === folderId)) {\n        model.folderId = folderId;\n      }\n    }\n\n    const cipher = await this.cipherService.encrypt(model);\n    await this.cipherService.saveWithServer(cipher);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      return await cipher.decrypt();\n    }\n    return null;\n  }\n\n  private async updateCipher(cipher: CipherView, newPassword: string) {\n    if (cipher != null && cipher.type === CipherType.Login) {\n      cipher.login.password = newPassword;\n      const newCipher = await this.cipherService.encrypt(cipher);\n      await this.cipherService.saveWithServer(newCipher);\n    }\n  }\n\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  private async getDataForTab(tab: chrome.tabs.Tab, responseCommand: string) {\n    const responseData: any = {};\n    if (responseCommand === \"notificationBarGetFoldersList\") {\n      responseData.folders = await this.folderService.getAllDecrypted();\n    }\n\n    await BrowserApi.tabSendMessageData(tab, responseCommand, responseData);\n  }\n\n  private async allowPersonalOwnership(): Promise<boolean> {\n    return !(await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership));\n  }\n}\n","import { EnvironmentService } from \"jslib-common/abstractions/environment.service\";\nimport { I18nService } from \"jslib-common/abstractions/i18n.service\";\nimport { LogService } from \"jslib-common/abstractions/log.service\";\nimport { MessagingService } from \"jslib-common/abstractions/messaging.service\";\nimport { NotificationsService } from \"jslib-common/abstractions/notifications.service\";\nimport { SystemService } from \"jslib-common/abstractions/system.service\";\nimport { Utils } from \"jslib-common/misc/utils\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsItem[] = [];\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private i18nService: I18nService,\n    private notificationsService: NotificationsService,\n    private systemService: SystemService,\n    private environmentService: EnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = async (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any\n    ) => {\n      await this.processMessage(msg, sender, sendResponse);\n    };\n\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n    if (this.main.isPrivateMode) {\n      (window as any).bitwardenBackgroundMessageListener = backgroundMessageListener;\n    }\n  }\n\n  async processMessage(msg: any, sender: any, sendResponse: any) {\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsItem;\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          await BrowserApi.closeLoginTab();\n\n          item = this.lockedVaultPendingNotifications.pop();\n          if (item.commandToRetry.sender?.tab?.id) {\n            await BrowserApi.focusSpecifiedTab(item.commandToRetry.sender.tab.id);\n          }\n        }\n\n        await this.main.setIcon();\n        await this.main.refreshBadgeAndMenu(false);\n        this.notificationsService.updateConnection(msg.command === \"unlocked\");\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item\n          );\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => await this.main.refreshBadgeAndMenu(), 2000);\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"promptForLogin\":\n        await BrowserApi.createNewTab(\"popup/index.html?uilocation=popout\", true, true);\n        break;\n      case \"showDialogResolve\":\n        this.platformUtilsService.resolveDialogPromise(msg.dialogId, msg.confirmed);\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadgeAndMenu();\n        break;\n      case \"bgReseedStorage\":\n        await this.main.reseedStorage();\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case \"autofill_cmd\": {\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === \"autofill_cmd\"\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n            }\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"authResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        try {\n          BrowserApi.createNewTab(\n            \"popup/index.html?uilocation=popout#/sso?code=\" +\n              encodeURIComponent(msg.code) +\n              \"&state=\" +\n              encodeURIComponent(msg.state)\n          );\n        } catch {\n          this.logService.error(\"Unable to open sso popout tab\");\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        const params =\n          `webAuthnResponse=${encodeURIComponent(msg.data)};` +\n          `remember=${encodeURIComponent(msg.remember)}`;\n        BrowserApi.createNewTab(\n          `popup/index.html?uilocation=popout#/2fa;${params}`,\n          undefined,\n          false\n        );\n        break;\n      }\n      case \"reloadPopup\":\n        this.messagingService.send(\"reloadPopup\");\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          dialogId: \"emailVerificationRequired\",\n          title: this.i18nService.t(\"emailVerificationRequired\"),\n          text: this.i18nService.t(\"emailVerificationRequiredDesc\"),\n          confirmText: this.i18nService.t(\"ok\"),\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier, { window: window });\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async autofillPage() {\n    const totpCode = await this.autofillService.doAutoFill({\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n}\n","import MainBackground from \"./main.background\";\nimport NotificationBackground from \"./notification.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground\n  ) {}\n\n  private focusedWindowId: number;\n\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    chrome.windows.onFocusChanged.addListener(async (windowId: number) => {\n      if (windowId === null || windowId < 0) {\n        return;\n      }\n\n      this.focusedWindowId = windowId;\n      this.main.messagingService.send(\"windowChanged\");\n    });\n\n    chrome.tabs.onActivated.addListener(async (activeInfo: chrome.tabs.TabActiveInfo) => {\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onReplaced.addListener(async (addedTabId: number, removedTabId: number) => {\n      if (this.main.onReplacedRan) {\n        return;\n      }\n      this.main.onReplacedRan = true;\n\n      await this.notificationBackground.checkNotificationQueue();\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onUpdated.addListener(\n      async (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => {\n        if (this.focusedWindowId > 0 && tab.windowId != this.focusedWindowId) {\n          return;\n        }\n\n        if (!tab.active) {\n          return;\n        }\n\n        if (this.main.onUpdatedRan) {\n          return;\n        }\n        this.main.onUpdatedRan = true;\n\n        await this.notificationBackground.checkNotificationQueue(tab);\n        await this.main.refreshBadgeAndMenu();\n        this.main.messagingService.send(\"tabChanged\");\n      }\n    );\n  }\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { UriMatchType } from \"jslib-common/enums/uriMatchType\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: any[] = [];\n  private webRequest: any;\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService\n  ) {\n    this.webRequest = (window as any).chrome.webRequest;\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  async init() {\n    if (!this.webRequest || !this.webRequest.onAuthRequired) {\n      return;\n    }\n\n    this.webRequest.onAuthRequired.addListener(\n      async (details: any, callback: any) => {\n        if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        this.pendingAuthRequests.push(details.requestId);\n\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"]\n    );\n\n    this.webRequest.onCompleted.addListener((details: any) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      }\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchType.Host\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: any) {\n    const i = this.pendingAuthRequests.indexOf(details.requestId);\n    if (i > -1) {\n      this.pendingAuthRequests.splice(i, 1);\n    }\n  }\n}\n","import MainBackground from \"./background/main.background\";\n\nconst bitwardenMain = ((window as any).bitwardenMain = new MainBackground());\nbitwardenMain.bootstrap().then(() => {\n  // Finished bootstrapping\n});\n","import { ApiService as ApiServiceAbstraction } from \"jslib-common/abstractions/api.service\";\nimport { AppIdService as AppIdServiceAbstraction } from \"jslib-common/abstractions/appId.service\";\nimport { AuditService as AuditServiceAbstraction } from \"jslib-common/abstractions/audit.service\";\nimport { AuthService as AuthServiceAbstraction } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService as CipherServiceAbstraction } from \"jslib-common/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"jslib-common/abstractions/collection.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"jslib-common/abstractions/crypto.service\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"jslib-common/abstractions/cryptoFunction.service\";\nimport { EnvironmentService as EnvironmentServiceAbstraction } from \"jslib-common/abstractions/environment.service\";\nimport { EventService as EventServiceAbstraction } from \"jslib-common/abstractions/event.service\";\nimport { ExportService as ExportServiceAbstraction } from \"jslib-common/abstractions/export.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"jslib-common/abstractions/fileUpload.service\";\nimport { FolderService as FolderServiceAbstraction } from \"jslib-common/abstractions/folder.service\";\nimport { I18nService as I18nServiceAbstraction } from \"jslib-common/abstractions/i18n.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"jslib-common/abstractions/keyConnector.service\";\nimport { LogService as LogServiceAbstraction } from \"jslib-common/abstractions/log.service\";\nimport { MessagingService as MessagingServiceAbstraction } from \"jslib-common/abstractions/messaging.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"jslib-common/abstractions/notifications.service\";\nimport { OrganizationService as OrganizationServiceAbstraction } from \"jslib-common/abstractions/organization.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"jslib-common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"jslib-common/abstractions/platformUtils.service\";\nimport { PolicyService as PolicyServiceAbstraction } from \"jslib-common/abstractions/policy.service\";\nimport { ProviderService as ProviderServiceAbstraction } from \"jslib-common/abstractions/provider.service\";\nimport { SearchService as SearchServiceAbstraction } from \"jslib-common/abstractions/search.service\";\nimport { SendService as SendServiceAbstraction } from \"jslib-common/abstractions/send.service\";\nimport { SettingsService as SettingsServiceAbstraction } from \"jslib-common/abstractions/settings.service\";\nimport { StorageService as StorageServiceAbstraction } from \"jslib-common/abstractions/storage.service\";\nimport { SyncService as SyncServiceAbstraction } from \"jslib-common/abstractions/sync.service\";\nimport { SystemService as SystemServiceAbstraction } from \"jslib-common/abstractions/system.service\";\nimport { TokenService as TokenServiceAbstraction } from \"jslib-common/abstractions/token.service\";\nimport { TotpService as TotpServiceAbstraction } from \"jslib-common/abstractions/totp.service\";\nimport { TwoFactorService as TwoFactorServiceAbstraction } from \"jslib-common/abstractions/twoFactor.service\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"jslib-common/abstractions/userVerification.service\";\nimport { UsernameGenerationService as UsernameGenerationServiceAbstraction } from \"jslib-common/abstractions/usernameGeneration.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"jslib-common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"jslib-common/enums/cipherRepromptType\";\nimport { CipherType } from \"jslib-common/enums/cipherType\";\nimport { StateFactory } from \"jslib-common/factories/stateFactory\";\nimport { GlobalState } from \"jslib-common/models/domain/globalState\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { ApiService } from \"jslib-common/services/api.service\";\nimport { AppIdService } from \"jslib-common/services/appId.service\";\nimport { AuditService } from \"jslib-common/services/audit.service\";\nimport { AuthService } from \"jslib-common/services/auth.service\";\nimport { CipherService } from \"jslib-common/services/cipher.service\";\nimport { CollectionService } from \"jslib-common/services/collection.service\";\nimport { ConsoleLogService } from \"jslib-common/services/consoleLog.service\";\nimport { ContainerService } from \"jslib-common/services/container.service\";\nimport { EnvironmentService } from \"jslib-common/services/environment.service\";\nimport { EventService } from \"jslib-common/services/event.service\";\nimport { ExportService } from \"jslib-common/services/export.service\";\nimport { FileUploadService } from \"jslib-common/services/fileUpload.service\";\nimport { FolderService } from \"jslib-common/services/folder.service\";\nimport { KeyConnectorService } from \"jslib-common/services/keyConnector.service\";\nimport { NotificationsService } from \"jslib-common/services/notifications.service\";\nimport { OrganizationService } from \"jslib-common/services/organization.service\";\nimport { PasswordGenerationService } from \"jslib-common/services/passwordGeneration.service\";\nimport { PolicyService } from \"jslib-common/services/policy.service\";\nimport { ProviderService } from \"jslib-common/services/provider.service\";\nimport { SearchService } from \"jslib-common/services/search.service\";\nimport { SendService } from \"jslib-common/services/send.service\";\nimport { SettingsService } from \"jslib-common/services/settings.service\";\nimport { StateMigrationService } from \"jslib-common/services/stateMigration.service\";\nimport { SyncService } from \"jslib-common/services/sync.service\";\nimport { SystemService } from \"jslib-common/services/system.service\";\nimport { TokenService } from \"jslib-common/services/token.service\";\nimport { TotpService } from \"jslib-common/services/totp.service\";\nimport { TwoFactorService } from \"jslib-common/services/twoFactor.service\";\nimport { UserVerificationService } from \"jslib-common/services/userVerification.service\";\nimport { UsernameGenerationService } from \"jslib-common/services/usernameGeneration.service\";\nimport { WebCryptoFunctionService } from \"jslib-common/services/webCryptoFunction.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { Account } from \"../models/account\";\nimport { PopupUtilsService } from \"../popup/services/popup-utils.service\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../services/abstractions/autofill.service\";\nimport { StateService as StateServiceAbstraction } from \"../services/abstractions/state.service\";\nimport AutofillService from \"../services/autofill.service\";\nimport { BrowserCryptoService } from \"../services/browserCrypto.service\";\nimport BrowserMessagingService from \"../services/browserMessaging.service\";\nimport BrowserMessagingPrivateModeBackgroundService from \"../services/browserMessagingPrivateModeBackground.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\nimport BrowserStorageService from \"../services/browserStorage.service\";\nimport I18nService from \"../services/i18n.service\";\nimport { StateService } from \"../services/state.service\";\nimport { VaultFilterService } from \"../services/vaultFilter.service\";\nimport VaultTimeoutService from \"../services/vaultTimeout.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport ContextMenusBackground from \"./contextMenus.background\";\nimport IdleBackground from \"./idle.background\";\nimport IconDetails from \"./models/iconDetails\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport NotificationBackground from \"./notification.background\";\nimport RuntimeBackground from \"./runtime.background\";\nimport TabsBackground from \"./tabs.background\";\nimport WebRequestBackground from \"./webRequest.background\";\n\nexport default class MainBackground {\n  messagingService: MessagingServiceAbstraction;\n  storageService: StorageServiceAbstraction;\n  secureStorageService: StorageServiceAbstraction;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: EnvironmentServiceAbstraction;\n  settingsService: SettingsServiceAbstraction;\n  cipherService: CipherServiceAbstraction;\n  folderService: FolderServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutServiceAbstraction;\n  syncService: SyncServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  exportService: ExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  stateMigrationService: StateMigrationService;\n  systemService: SystemServiceAbstraction;\n  eventService: EventServiceAbstraction;\n  policyService: PolicyServiceAbstraction;\n  popupUtilsService: PopupUtilsService;\n  sendService: SendServiceAbstraction;\n  fileUploadService: FileUploadServiceAbstraction;\n  organizationService: OrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  twoFactorService: TwoFactorServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private sidebarAction: any;\n  private buildingContextMenu: boolean;\n  private menuOptionsLoaded: any[] = [];\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n\n  constructor(public isPrivateMode: boolean = false) {\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        this.notificationsService.updateConnection(false);\n      }\n      await this.setIcon();\n      await this.refreshBadgeAndMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.reloadProcess();\n      }\n    };\n\n    const logoutCallback = async (expired: boolean, userId?: string) =>\n      await this.logout(expired, userId);\n\n    this.messagingService = isPrivateMode\n      ? new BrowserMessagingPrivateModeBackgroundService()\n      : new BrowserMessagingService();\n    this.storageService = new BrowserStorageService();\n    this.secureStorageService = new BrowserStorageService();\n    this.logService = new ConsoleLogService(false);\n    this.stateMigrationService = new StateMigrationService(\n      this.storageService,\n      this.secureStorageService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.stateService = new StateService(\n      this.storageService,\n      this.secureStorageService,\n      this.logService,\n      this.stateMigrationService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.platformUtilsService = new BrowserPlatformUtilsService(\n      this.messagingService,\n      this.stateService,\n      (clipboardValue, clearMs) => {\n        if (this.systemService != null) {\n          this.systemService.clearClipboard(clipboardValue, clearMs);\n        }\n      },\n      async () => {\n        if (this.nativeMessagingBackground != null) {\n          const promise = this.nativeMessagingBackground.getResponse();\n\n          try {\n            await this.nativeMessagingBackground.send({ command: \"biometricUnlock\" });\n          } catch (e) {\n            return Promise.reject(e);\n          }\n\n          return promise.then((result) => result.response === \"unlocked\");\n        }\n      }\n    );\n    this.i18nService = new I18nService(BrowserApi.getUILanguage(window));\n    this.cryptoFunctionService = new WebCryptoFunctionService(window);\n    this.cryptoService = new BrowserCryptoService(\n      this.cryptoFunctionService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService\n    );\n    this.tokenService = new TokenService(this.stateService);\n    this.appIdService = new AppIdService(this.storageService);\n    this.environmentService = new EnvironmentService(this.stateService);\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      (expired: boolean) => this.logout(expired)\n    );\n    this.settingsService = new SettingsService(this.stateService);\n    this.fileUploadService = new FileUploadService(this.logService, this.apiService);\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.settingsService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      () => this.searchService,\n      this.logService,\n      this.stateService\n    );\n    this.folderService = new FolderService(\n      this.cryptoService,\n      this.apiService,\n      this.i18nService,\n      this.cipherService,\n      this.stateService\n    );\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateService\n    );\n    this.searchService = new SearchService(this.cipherService, this.logService, this.i18nService);\n    this.sendService = new SendService(\n      this.cryptoService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      this.cryptoFunctionService,\n      this.stateService\n    );\n    this.organizationService = new OrganizationService(this.stateService);\n    this.policyService = new PolicyService(\n      this.stateService,\n      this.organizationService,\n      this.apiService\n    );\n    this.keyConnectorService = new KeyConnectorService(\n      this.stateService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.cryptoFunctionService,\n      logoutCallback\n    );\n    this.vaultFilterService = new VaultFilterService(\n      this.stateService,\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService\n    );\n\n    this.twoFactorService = new TwoFactorService(this.i18nService, this.platformUtilsService);\n\n    // eslint-disable-next-line\n    const that = this;\n    const backgroundMessagingService = new (class extends MessagingServiceAbstraction {\n      // AuthService should send the messages to the background not popup.\n      send = (subscriber: string, arg: any = {}) => {\n        const message = Object.assign({}, { command: subscriber }, arg);\n        that.runtimeBackground.processMessage(message, that, null);\n      };\n    })();\n    this.authService = new AuthService(\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.appIdService,\n      this.platformUtilsService,\n      backgroundMessagingService,\n      this.logService,\n      this.keyConnectorService,\n      this.environmentService,\n      this.stateService,\n      this.twoFactorService,\n      this.i18nService\n    );\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.cryptoService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.tokenService,\n      this.policyService,\n      this.keyConnectorService,\n      this.stateService,\n      this.authService,\n      lockedCallback,\n      logoutCallback\n    );\n    this.providerService = new ProviderService(this.stateService);\n    this.syncService = new SyncService(\n      this.apiService,\n      this.settingsService,\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.collectionService,\n      this.messagingService,\n      this.policyService,\n      this.sendService,\n      this.logService,\n      this.keyConnectorService,\n      this.stateService,\n      this.organizationService,\n      this.providerService,\n      logoutCallback\n    );\n    this.eventService = new EventService(\n      this.apiService,\n      this.cipherService,\n      this.stateService,\n      this.logService,\n      this.organizationService\n    );\n    this.passwordGenerationService = new PasswordGenerationService(\n      this.cryptoService,\n      this.policyService,\n      this.stateService\n    );\n    this.totpService = new TotpService(\n      this.cryptoFunctionService,\n      this.logService,\n      this.stateService\n    );\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.stateService,\n      this.totpService,\n      this.eventService,\n      this.logService\n    );\n    this.containerService = new ContainerService(this.cryptoService);\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n    this.exportService = new ExportService(\n      this.folderService,\n      this.cipherService,\n      this.apiService,\n      this.cryptoService,\n      this.cryptoFunctionService\n    );\n    this.notificationsService = new NotificationsService(\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.logService,\n      this.stateService,\n      this.authService\n    );\n    this.popupUtilsService = new PopupUtilsService(isPrivateMode);\n\n    this.userVerificationService = new UserVerificationService(\n      this.cryptoService,\n      this.i18nService,\n      this.apiService\n    );\n\n    const systemUtilsServiceReloadCallback = () => {\n      const forceWindowReload =\n        this.platformUtilsService.isSafari() ||\n        this.platformUtilsService.isFirefox() ||\n        this.platformUtilsService.isOpera();\n      BrowserApi.reloadExtension(forceWindowReload ? window : null);\n      return Promise.resolve();\n    };\n\n    this.systemService = new SystemService(\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.stateService\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.sidebarAction = this.isSafari\n      ? null\n      : typeof opr !== \"undefined\" && opr.sidebarAction\n      ? opr.sidebarAction\n      : (window as any).chrome.sidebarAction;\n\n    // Background\n    this.runtimeBackground = new RuntimeBackground(\n      this,\n      this.autofillService,\n      this.platformUtilsService as BrowserPlatformUtilsService,\n      this.i18nService,\n      this.notificationsService,\n      this.systemService,\n      this.environmentService,\n      this.messagingService,\n      this.logService\n    );\n    this.nativeMessagingBackground = new NativeMessagingBackground(\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.runtimeBackground,\n      this.i18nService,\n      this.messagingService,\n      this.appIdService,\n      this.platformUtilsService,\n      this.stateService,\n      this.logService,\n      this.authService\n    );\n    this.commandsBackground = new CommandsBackground(\n      this,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.vaultTimeoutService,\n      this.authService\n    );\n    this.notificationBackground = new NotificationBackground(\n      this.autofillService,\n      this.cipherService,\n      this.authService,\n      this.policyService,\n      this.folderService,\n      this.stateService\n    );\n\n    this.tabsBackground = new TabsBackground(this, this.notificationBackground);\n    this.contextMenusBackground = new ContextMenusBackground(\n      this,\n      this.cipherService,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.authService,\n      this.eventService,\n      this.totpService\n    );\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.stateService,\n      this.notificationsService\n    );\n    this.webRequestBackground = new WebRequestBackground(\n      this.platformUtilsService,\n      this.cipherService,\n      this.authService\n    );\n\n    this.usernameGenerationService = new UsernameGenerationService(\n      this.cryptoService,\n      this.stateService,\n      this.apiService\n    );\n  }\n\n  async bootstrap() {\n    this.containerService.attachToWindow(window);\n\n    await this.stateService.init();\n\n    await (this.vaultTimeoutService as VaultTimeoutService).init(true);\n    await (this.i18nService as I18nService).init();\n    await (this.eventService as EventService).init(true);\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    await this.commandsBackground.init();\n\n    this.twoFactorService.init();\n\n    await this.tabsBackground.init();\n    await this.contextMenusBackground.init();\n    await this.idleBackground.init();\n    await this.webRequestBackground.init();\n\n    if (this.platformUtilsService.isFirefox() && !this.isPrivateMode) {\n      // Set Private Mode windows to the default icon - they do not share state with the background page\n      const privateWindows = await BrowserApi.getPrivateModeWindows();\n      privateWindows.forEach(async (win) => {\n        await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n        await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n      });\n\n      BrowserApi.onWindowCreated(async (win) => {\n        if (win.incognito) {\n          await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n          await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n        }\n      });\n    }\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        await this.environmentService.setUrlsFromStorage();\n        await this.setIcon();\n        this.fullSync(true);\n        setTimeout(() => this.notificationsService.init(), 2500);\n        resolve();\n      }, 500);\n    });\n  }\n\n  async setIcon() {\n    if ((!chrome.browserAction && !this.sidebarAction) || this.isPrivateMode) {\n      return;\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    let suffix = \"\";\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      suffix = \"_gray\";\n    } else if (authStatus === AuthenticationStatus.Locked) {\n      suffix = \"_locked\";\n    }\n\n    await this.actionSetIcon(chrome.browserAction, suffix);\n    await this.actionSetIcon(this.sidebarAction, suffix);\n  }\n\n  async refreshBadgeAndMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    const menuDisabled = await this.stateService.getDisableContextMenuItem();\n    if (!menuDisabled) {\n      await this.buildContextMenu();\n    } else {\n      await this.contextMenusRemoveAll();\n    }\n\n    if (forLocked) {\n      await this.loadMenuAndUpdateBadgeForNoAccessState(!menuDisabled);\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.contextMenuReady(tab, !menuDisabled);\n    }\n  }\n\n  async logout(expired: boolean, userId?: string) {\n    await this.eventService.uploadEvents(userId);\n\n    await Promise.all([\n      this.eventService.clearEvents(userId),\n      this.syncService.setLastSync(new Date(0), userId),\n      this.cryptoService.clearKeys(userId),\n      this.settingsService.clear(userId),\n      this.cipherService.clear(userId),\n      this.folderService.clear(userId),\n      this.collectionService.clear(userId),\n      this.policyService.clear(userId),\n      this.passwordGenerationService.clear(userId),\n      this.vaultTimeoutService.clear(userId),\n      this.keyConnectorService.clear(),\n      this.vaultFilterService.clear(),\n    ]);\n\n    await this.stateService.clean({ userId: userId });\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      this.messagingService.send(\"doneLoggingOut\", { expired: expired, userId: userId });\n    }\n\n    await this.setIcon();\n    await this.refreshBadgeAndMenu(true);\n    await this.reseedStorage();\n    this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.reloadProcess();\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    const currentVaultTimeout = await this.stateService.getVaultTimeout();\n    if (currentVaultTimeout == null) {\n      return;\n    }\n\n    const getStorage = (): Promise<any> =>\n      new Promise((resolve) => {\n        chrome.storage.local.get(null, (o: any) => resolve(o));\n      });\n\n    const clearStorage = (): Promise<void> =>\n      new Promise((resolve) => {\n        chrome.storage.local.clear(() => resolve());\n      });\n\n    const storage = await getStorage();\n    await clearStorage();\n\n    for (const key in storage) {\n      // eslint-disable-next-line\n      if (!storage.hasOwnProperty(key)) {\n        continue;\n      }\n      await this.storageService.save(key, storage[key]);\n    }\n  }\n\n  private async buildContextMenu() {\n    if (!chrome.contextMenus || this.buildingContextMenu) {\n      return;\n    }\n\n    this.buildingContextMenu = true;\n    await this.contextMenusRemoveAll();\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"root\",\n      contexts: [\"all\"],\n      title: \"Bitwarden\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"autofill\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"autoFill\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-username\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyUsername\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyPassword\"),\n    });\n\n    if (await this.stateService.getCanAccessPremium()) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp\",\n        parentId: \"root\",\n        contexts: [\"all\"],\n        title: this.i18nService.t(\"copyVerificationCode\"),\n      });\n    }\n\n    await this.contextMenusCreate({\n      type: \"separator\",\n      parentId: \"root\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"generate-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"generatePasswordCopied\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-identifier\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyElementIdentifier\"),\n    });\n\n    this.buildingContextMenu = false;\n  }\n\n  private async contextMenuReady(tab: any, contextMenuEnabled: boolean) {\n    await this.loadMenuAndUpdateBadge(tab.url, tab.id, contextMenuEnabled);\n    this.onUpdatedRan = this.onReplacedRan = false;\n  }\n\n  private async loadMenuAndUpdateBadge(url: string, tabId: number, contextMenuEnabled: boolean) {\n    if (!url || (!chrome.browserAction && !this.sidebarAction)) {\n      return;\n    }\n\n    this.actionSetBadgeBackgroundColor(chrome.browserAction);\n    this.actionSetBadgeBackgroundColor(this.sidebarAction);\n\n    this.menuOptionsLoaded = [];\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.Unlocked) {\n      try {\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(url);\n        ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n        if (contextMenuEnabled) {\n          ciphers.forEach((cipher) => {\n            this.loadLoginContextMenuOptions(cipher);\n          });\n        }\n\n        const disableBadgeCounter = await this.stateService.getDisableBadgeCounter();\n        let theText = \"\";\n\n        if (!disableBadgeCounter) {\n          if (ciphers.length > 0 && ciphers.length <= 9) {\n            theText = ciphers.length.toString();\n          } else if (ciphers.length > 0) {\n            theText = \"9+\";\n          }\n        }\n\n        if (contextMenuEnabled && ciphers.length === 0) {\n          await this.loadNoLoginsContextMenuOptions(this.i18nService.t(\"noMatchingLogins\"));\n        }\n\n        this.sidebarActionSetBadgeText(theText, tabId);\n        this.browserActionSetBadgeText(theText, tabId);\n\n        return;\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    await this.loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled);\n  }\n\n  private async loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled: boolean) {\n    if (contextMenuEnabled) {\n      const authed = await this.stateService.getIsAuthenticated();\n      await this.loadNoLoginsContextMenuOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\")\n      );\n    }\n\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach((tab) => {\n        if (tab.id != null) {\n          this.browserActionSetBadgeText(\"\", tab.id);\n          this.sidebarActionSetBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  private async loadLoginContextMenuOptions(cipher: any) {\n    if (\n      cipher == null ||\n      cipher.type !== CipherType.Login ||\n      cipher.reprompt !== CipherRepromptType.None\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n    if (cipher.login.username && cipher.login.username !== \"\") {\n      title += \" (\" + cipher.login.username + \")\";\n    }\n    await this.loadContextMenuOptions(title, cipher.id, cipher);\n  }\n\n  private async loadNoLoginsContextMenuOptions(noLoginsMessage: string) {\n    await this.loadContextMenuOptions(noLoginsMessage, \"noop\", null);\n  }\n\n  private async loadContextMenuOptions(title: string, idSuffix: string, cipher: any) {\n    if (\n      !chrome.contextMenus ||\n      this.menuOptionsLoaded.indexOf(idSuffix) > -1 ||\n      (cipher != null && cipher.type !== CipherType.Login)\n    ) {\n      return;\n    }\n\n    this.menuOptionsLoaded.push(idSuffix);\n\n    if (cipher == null || (cipher.login.password && cipher.login.password !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"autofill_\" + idSuffix,\n        parentId: \"autofill\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (cipher == null || (cipher.login.username && cipher.login.username !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-username_\" + idSuffix,\n        parentId: \"copy-username\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (\n      cipher == null ||\n      (cipher.login.password && cipher.login.password !== \"\" && cipher.viewPassword)\n    ) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-password_\" + idSuffix,\n        parentId: \"copy-password\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    if (canAccessPremium && (cipher == null || (cipher.login.totp && cipher.login.totp !== \"\"))) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp_\" + idSuffix,\n        parentId: \"copy-totp\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n  }\n\n  private sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n      this.scheduleNextSync();\n    } else {\n      this.scheduleNextSync();\n    }\n  }\n\n  private scheduleNextSync() {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n\n    this.syncTimeout = setTimeout(async () => await this.fullSync(), 5 * 60 * 1000); // check every 5 minutes\n  }\n\n  // Browser API Helpers\n\n  private contextMenusRemoveAll() {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.removeAll(() => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private contextMenusCreate(options: any) {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.create(options, () => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private async actionSetIcon(theAction: any, suffix: string, windowId?: number): Promise<any> {\n    if (!theAction || !theAction.setIcon) {\n      return;\n    }\n\n    const options: IconDetails = {\n      path: {\n        19: \"images/icon19\" + suffix + \".png\",\n        38: \"images/icon38\" + suffix + \".png\",\n      },\n    };\n\n    if (this.platformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n      await theAction.setIcon(options);\n    } else if (this.platformUtilsService.isSafari()) {\n      // Workaround since Safari 14.0.3 returns a pending promise\n      // which doesn't resolve within a reasonable time.\n      theAction.setIcon(options);\n    } else {\n      return new Promise<void>((resolve) => {\n        theAction.setIcon(options, () => resolve());\n      });\n    }\n  }\n\n  private actionSetBadgeBackgroundColor(action: any) {\n    if (action && action.setBadgeBackgroundColor) {\n      action.setBadgeBackgroundColor({ color: \"#294e5f\" });\n    }\n  }\n\n  private browserActionSetBadgeText(text: string, tabId: number) {\n    if (chrome.browserAction && chrome.browserAction.setBadgeText) {\n      chrome.browserAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private sidebarActionSetBadgeText(text: string, tabId: number) {\n    if (!this.sidebarAction) {\n      return;\n    }\n\n    if (this.sidebarAction.setBadgeText) {\n      this.sidebarAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    } else if (this.sidebarAction.setTitle) {\n      let title = \"Bitwarden\";\n      if (text && text !== \"\") {\n        title += \" [\" + text + \"]\";\n      }\n\n      this.sidebarAction.setTitle({\n        title: title,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private async reloadProcess(): Promise<void> {\n    const accounts = this.stateService.accounts.getValue();\n    if (accounts != null) {\n      for (const userId of Object.keys(accounts)) {\n        if ((await this.authService.getAuthStatus(userId)) === AuthenticationStatus.Unlocked) {\n          return;\n        }\n      }\n    }\n    await this.systemService.startProcessReload();\n  }\n}\n","export abstract class MessagingService {\n  send: (subscriber: string, arg?: any) => void;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t352: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(9535)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","AuthenticationStatus","CipherRepromptType","CipherType","StateVersion","ThemeType","DeviceType","AccountFactory","constructor","accountConstructor","this","create","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","EnvironmentUrls","base","api","identity","icons","notifications","events","webVault","keyConnector","WindowState","GlobalState","theme","System","window","stateVersion","One","environmentUrls","DeviceRequest","appId","platformUtilsService","type","getDevice","name","getDeviceString","identifier","pushToken","TokenRequestTwoFactor","provider","token","remember","BaseResponse","response","getResponseProperty","propertyName","exactName","undefined","otherCasePropertyName","charAt","toUpperCase","toLowerCase","length","slice","BillingResponse","super","invoices","transactions","balance","paymentSource","BillingSourceResponse","map","t","BillingTransactionResponse","i","BillingInvoiceResponse","cardBrand","description","needsVerification","url","pdfUrl","number","paid","date","amount","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","BillingPaymentResponse","OrganizationConnectionResponse","configType","organizationId","enabled","rawConfig","config","SsoPreValidateResponse","nodeURL","Utils","inited","isNode","process","release","isBrowser","isMobileBrowser","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","str","Uint8Array","Buffer","from","binaryString","atob","bytes","charCodeAt","fromB64ToArray","fromUrlB64ToB64","parseInt","substr","strUtf8","unescape","encodeURIComponent","arr","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromB64toUrlB64","fromBufferToB64","b64Str","replace","encodedString","apply","decodeURIComponent","escape","Array","prototype","call","x","join","urlB64Str","output","fromB64ToUtf8","utfStr","fromBufferToUrlB64","fromUtf8ToArray","c","r","Math","random","RegExp","test","uriString","getUrl","hostname","host","trim","startsWith","httpUrl","indexOf","tldEndingRegex","getUrlObject","tldjs","isValid","validIpAddress","urlDomain","getDomain","domain","search","Map","split","forEach","pair","parts","set","i18nService","prop","a","b","collator","compare","localeCompare","target","source","Object","assign","obj","filter","k","Number","isNaN","s","ipString","win","mobile","navigator","userAgent","vendor","opera","match","URL","hasProtocol","anchor","document","createElement","href","regexpEmojiPresentation","init","TokenRequest","twoFactor","device","alterIdentityTokenHeaders","headers","setTwoFactor","toIdentityToken","clientId","scope","client_id","deviceType","deviceIdentifier","deviceName","twoFactorToken","twoFactorProvider","twoFactorRemember","ApiTokenRequest","clientSecret","grant_type","client_secret","ApiKeyResponse","apiKey","revisionDate","Date","AttachmentResponse","fileName","key","size","sizeName","CardApi","data","cardholderName","brand","expMonth","expYear","FieldApi","value","linkedId","IdentityApi","title","firstName","middleName","lastName","address1","address2","address3","city","state","postalCode","country","company","email","phone","ssn","username","passportNumber","licenseNumber","LoginUriApi","uri","LoginApi","password","passwordRevisionDate","totp","autofillOnPageLoad","uris","u","SecureNoteApi","PasswordHistoryResponse","lastUsedDate","CipherResponse","folderId","notes","favorite","edit","viewPassword","organizationUseTotp","collectionIds","deletedDate","login","card","secureNote","fields","f","attachments","passwordHistory","h","reprompt","None","AttachmentUploadDataResponse","attachmentId","fileUploadType","cipherResponse","cipherMiniResponse","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","SelectionReadOnlyResponse","readOnly","hidePasswords","CollectionResponse","externalId","CollectionDetailsResponse","CollectionGroupDetailsResponse","groups","DeviceVerificationResponse","isDeviceVerificationSectionEnabled","unknownDeviceVerificationEnabled","GlobalDomainResponse","domains","excluded","DomainsResponse","globalEquivalentDomains","equivalentDomains","d","EmergencyAccessGranteeDetailsResponse","granteeId","status","waitTimeDays","creationDate","EmergencyAccessGrantorDetailsResponse","grantorId","EmergencyAccessTakeoverResponse","keyEncrypted","kdf","kdfIterations","EmergencyAccessViewResponse","ciphers","ErrorResponse","identityResponse","errorModel","responseErrorModel","message","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","isNullOrWhitespace","statusCode","getSingleMessage","hasOwnProperty","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","push","EventResponse","userId","providerId","cipherId","collectionId","groupId","policyId","organizationUserId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","FolderResponse","GroupResponse","accessAll","GroupDetailsResponse","collections","IdentityCaptchaResponse","siteKey","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","resetMasterPassword","privateKey","forcePasswordReset","apiUseKeyConnector","keyConnectorUrl","IdentityTwoFactorResponse","twoFactorProviders2","captchaToken","twoFactorProviders","KeyConnectorUserKeyResponse","ListResponse","dr","continuationToken","SsoType","OpenIdConnectRedirectBehavior","Saml2BindingType","Saml2NameIdFormat","Saml2SigningBehavior","SsoConfigApi","keyConnectorEnabled","authority","metadataAddress","redirectBehavior","getClaimsFromUserInfoEndpoint","additionalScopes","additionalUserIdClaimTypes","additionalEmailClaimTypes","additionalNameClaimTypes","acrValues","expectedReturnAcrValue","spNameIdFormat","spOutboundSigningAlgorithm","spSigningBehavior","spMinIncomingSigningAlgorithm","spWantAssertionsSigned","spValidateCertificates","idpEntityId","idpBindingType","idpSingleSignOnServiceUrl","idpSingleLogoutServiceUrl","idpX509PublicCert","idpOutboundSigningAlgorithm","idpAllowUnsolicitedAuthnResponse","idpDisableOutboundLogoutRequests","idpWantAuthnRequestsSigned","view","OpenIdConnect","openId","Saml2","saml","idpAllowOutboundLogoutRequests","OrganizationSsoResponse","urls","SsoUrls","callbackPath","signedOutCallbackPath","spEntityId","spMetadataUrl","spAcsUrl","OrganizationApiKeyInformationResponse","keyType","OrganizationAutoEnrollStatusResponse","resetPasswordEnabled","KeysResponse","publicKey","OrganizationKeysResponse","PlanResponse","product","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","baseSeats","baseStorageGb","maxCollections","maxUsers","hasAdditionalSeatsOption","maxAdditionalSeats","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","hasTotp","has2fa","hasApi","hasSso","hasResetPassword","usersGetPremium","upgradeSortOrder","displaySortOrder","legacyYear","disabled","stripePlanId","stripeSeatPlanId","stripeStoragePlanId","stripePremiumAccessPlanId","basePrice","seatPrice","additionalStoragePricePerGb","premiumAccessOptionPrice","OrganizationResponse","businessName","businessAddress1","businessAddress2","businessAddress3","businessCountry","businessTaxNumber","billingEmail","plan","planType","seats","maxAutoscaleSeats","maxStorageGb","useGroups","useDirectory","useEvents","useTotp","use2fa","useApi","useResetPassword","hasPublicAndPrivateKeys","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","SubscriptionResponse","storageName","storageGb","license","expiration","usingInAppPurchase","subscription","upcomingInvoice","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","items","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","quantity","interval","sponsoredSubscriptionItem","OrganizationSubscriptionResponse","OrganizationUserBulkPublicKeyResponse","OrganizationUserBulkResponse","error","PermissionsApi","accessEventLogs","accessImportExport","accessReports","manageAllCollections","manageAssignedCollections","createNewCollections","editAnyCollection","deleteAnyCollection","editAssignedCollections","deleteAssignedCollections","manageCiphers","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","OrganizationUserResponse","permissions","resetPasswordEnrolled","OrganizationUserUserDetailsResponse","twoFactorEnabled","usesKeyConnector","OrganizationUserDetailsResponse","OrganizationUserResetPasswordDetailsReponse","resetPasswordKey","encryptedPrivateKey","ProfileOrganizationResponse","usePolicies","useSso","useKeyConnector","selfHost","ssoBound","providerName","familySponsorshipFriendlyName","familySponsorshipAvailable","planProductType","familySponsorshipLastSyncDateString","familySponsorshipLastSyncDate","familySponsorshipValidUntilString","familySponsorshipValidUntil","familySponsorshipToDelete","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","organizations","providers","providerOrganizations","emailVerified","masterPasswordHint","premiumPersonally","premiumFromOrganization","culture","securityStamp","o","PaymentResponse","userProfile","paymentIntentClientSecret","success","PolicyResponse","PreloginResponse","ProviderOrganizationResponse","settings","ProviderOrganizationOrganizationDetailsResponse","organizationName","ProviderResponse","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","ProviderUserResponse","ProviderUserUserDetailsResponse","SendFileApi","SendTextApi","text","hidden","SendAccessResponse","file","expirationDate","creatorIdentifier","SendFileDownloadDataResponse","SendResponse","accessId","maxAccessCount","accessCount","deletionDate","disable","hideEmail","SendFileUploadDataResponse","sendResponse","SyncResponse","folders","policies","sends","profile","p","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","TwoFactorAuthenticatorResponse","TwoFactorDuoResponse","secretKey","integrationKey","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","attestation","authenticatorSelection","challenge","fromUrlB64ToArray","excludeCredentials","extensions","pubKeyCredParams","rp","timeout","user","TwoFactorYubiKeyResponse","key1","key2","key3","key4","key5","nfc","UserKeyResponse","HtmlStorageLocation","ApiService","tokenService","environmentService","appIdService","logoutCallback","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","WindowsDesktop","MacOsDesktop","LinuxDesktop","postIdentityToken","request","Headers","Accept","identityToken","getClientType","fetch","Request","getIdentityUrl","body","qsStringify","credentials","getCredentials","cache","method","responseJson","isJsonResponse","json","TwoFactorProviders2","clearTwoFactorToken","reject","refreshIdentityToken","doAuthRefresh","getProfile","send","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postPrelogin","isDev","getApiUrl","postEmailToken","postEmail","postPassword","setPassword","postSetKeyConnectorKey","postSecurityStamp","deleteAccount","getAccountRevisionDate","postPasswordHint","postRegister","postPremium","postIapCheck","postReinstatePremium","postCancelPremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountKeys","postAccountKey","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountVerifyPassword","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","postAccountRequestOTP","postAccountVerifyOTP","postConvertToKeyConnector","getUserBillingHistory","getUserBillingPayment","getFolder","postFolder","putFolder","deleteFolder","getSend","postSendAccess","apiUrl","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","sendId","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","getCipher","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","path","postImportCiphers","postImportOrganizationCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionDetails","getUserCollections","getCollections","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteCollectionUser","getGroupDetails","getGroups","getGroupUsers","postGroup","putGroup","putGroupUsers","deleteGroup","deleteGroupUser","getPolicy","getPolicies","getPoliciesByToken","getPoliciesByInvitedUser","putPolicy","getOrganizationUser","getOrganizationUserGroups","getOrganizationUsers","getOrganizationUserResetPasswordDetails","getOrganizationAutoEnrollStatus","postOrganizationUserInvite","postOrganizationUserReinvite","postManyOrganizationUserReinvite","postOrganizationUserAccept","postOrganizationUserConfirm","postOrganizationUsersPublicKey","postOrganizationUserBulkConfirm","putOrganizationUser","putOrganizationUserGroups","putOrganizationUserResetPasswordEnrollment","putOrganizationUserResetPassword","deleteOrganizationUser","deleteManyOrganizationUsers","getPlans","postImportDirectory","postPublicImportDirectory","getTaxRates","getSettingsDomains","putSettingsDomains","getSync","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","deviceResponse","rawId","getClientExtensionResults","AttestationObject","attestationObject","clientDataJson","clientDataJSON","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getDeviceVerificationSettings","putDeviceVerificationSettings","getEmergencyAccessTrusted","getEmergencyAccessGranted","getEmergencyAccess","getEmergencyGrantorPolicies","putEmergencyAccess","deleteEmergencyAccess","postEmergencyAccessInvite","postEmergencyAccessReinvite","postEmergencyAccessAccept","postEmergencyAccessConfirm","postEmergencyAccessInitiate","postEmergencyAccessApprove","postEmergencyAccessReject","postEmergencyAccessTakeover","postEmergencyAccessPassword","postEmergencyAccessView","getOrganization","getOrganizationBilling","getOrganizationSubscription","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","getOrganizationLicense","getOrganizationTaxInfo","getOrganizationSso","postOrganization","putOrganization","putOrganizationTaxInfo","postLeaveOrganization","postOrganizationLicense","postOrganizationLicenseUpdate","postOrganizationApiKey","getOrganizationApiKeyInformation","postOrganizationRotateApiKey","postOrganizationSso","postOrganizationUpgrade","postOrganizationUpdateSubscription","postOrganizationSeat","postOrganizationStorage","postOrganizationPayment","postOrganizationVerifyBank","postOrganizationCancel","postOrganizationReinstate","deleteOrganization","getOrganizationKeys","postOrganizationKeys","postProviderSetup","getProvider","putProvider","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","start","end","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","getActiveBearerToken","Authorization","getEventsUrl","JSON","stringify","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","getUserKeyFromKeyConnector","handleError","postUserKeyToKeyConnector","getKeyConnectorAlive","getToken","tokenNeedsRefresh","getApplicationVersion","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","getRefreshToken","doRefreshToken","getClientId","getClientSecret","doApiTokenRefresh","decodedToken","decodeToken","tokenResponse","setTokens","getAppId","deviceRequest","tokenRequest","setToken","authed","hasResponse","alterHeaders","requestUrl","requestInit","FormData","tokenError","isTextResponse","Message","params","hasBaseUrl","typeHeader","get","AppIdService","storageService","makeAndGetAppId","getAnonymousAppId","existingId","htmlStorageLocation","Local","guid","newGuid","save","AuditService","cryptoFunctionService","apiService","passwordLeaked","hashBytes","hash","fromBufferToHex","hashStart","hashEnding","find","v","breachedAccounts","limit","throttleKey","AuthenticationType","KeySuffixOptions","TwoFactorProviderType","propertyKey","descriptor","originalMethod","allThrottles","throttles","getThrottles","argsThrottleKey","queue","exec","onFinally","splice","delete","val","catch","err","EncryptionPair","DataEncryptionPair","AccountData","passwordGenerationHistory","AccountKeys","cryptoSymmetricKey","organizationKeys","providerKeys","AccountProfile","pinProtected","vaultTimeoutAction","AccountTokens","tokens","AuthResult","KeysRequest","LogInStrategy","cryptoService","messagingService","logService","stateService","twoFactorService","captchaBypassToken","logInTwoFactor","captchaResponse","startLogIn","clearSelectedProvider","processTwoFactorResponse","processCaptchaResponse","processTokenResponse","onSuccessfulLogin","buildDeviceRequest","buildTwoFactor","userProvidedTwoFactor","storedTwoFactorToken","getTwoFactorToken","Remember","saveAccountInformation","accountInformation","addAccount","sub","hasPremiumPersonally","premium","kdfType","result","setTwoFactorToken","setEncKey","setEncPrivateKey","createKeyPairForOldAccount","setBiometricLocked","setProviders","makeKeyPair","encryptedString","HashPurpose","ApiLogInStrategy","keyConnectorService","getKeyConnectorUrl","getAndSetKey","logIn","setApiKeyClientId","setApiKeyClientSecret","PasswordTokenRequest","masterPasswordHash","fromUtf8ToUrlB64","PasswordLogInStrategy","authService","setKey","setKeyHash","localHashedPassword","masterPassword","makePreloginKey","hashPassword","LocalAuthorization","hashedPassword","SsoTokenRequest","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLogInStrategy","newSsoUser","convertNewSsoUserToKeyConnector","orgId","redirectUrl","PreloginRequest","AuthService","logInStrategy","strategy","clearState","Password","Sso","Api","requiresTwoFactor","saveState","requiresCaptcha","logOut","callback","authingWithApiKey","authingWithSso","authingWithPassword","getAuthStatus","getIsAuthenticated","LoggedOut","hasKeyStored","Auto","getEverBeenUnlocked","getKey","hasKeyInMemory","Unlocked","Locked","preloginResponse","makeKey","startSessionTimeout","clearSessionTimeout","sessionTimeout","setTimeout","clearTimeout","FieldType","UriMatchType","EncryptionType","sequentialize","cacheKey","caches","getCache","argsCacheKey","AttachmentData","CardData","FieldData","IdentityData","LoginUriData","LoginData","PasswordHistoryData","SecureNoteData","CipherData","Login","SecureNote","Card","Identity","ph","AttachmentView","EncString","encryptedStringOrType","iv","mac","encType","encryptionType","headerPieces","encPieces","AesCbc128_HmacSha256_B64","AesCbc256_B64","AesCbc256_HmacSha256_B64","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","decrypt","decryptedValue","containerService","getCryptoService","getOrgKey","decryptToUtf8","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","self","theProp","mapProp","all","SymmetricCryptoKey","encKey","macKey","keyB64","encKeyB64","macKeyB64","LoginLinkedId","CardLinkedId","IdentityLinkedId","Attachment","orgKey","decValue","decryptToBytes","toAttachmentData","LinkedMetadata","_i18nKey","linkedFieldOption","i18nKey","linkedFieldOptions","ItemView","CardView","_brand","_number","_subTitle","repeat","count","exp","formatYear","year","toCardData","IdentityView","_firstName","_lastName","address","addressPart2","LoginView","l","hasUris","some","canLaunch","launchUri","SecureNoteView","n","CipherView","localData","subTitle","hasAttachments","linkedFieldValue","linkedFieldI18nKey","FieldView","newField","showValue","showCount","Field","toFieldData","toIdentityData","CanLaunchWhitelist","LoginUriView","_uri","_domain","_hostname","_host","_canLaunch","RegularExpression","getHostname","getHost","LoginUri","toLoginUriData","toLoginData","toISOString","PasswordHistoryView","toPasswordHistoryData","toSecureNoteData","Cipher","model","reduce","promise","attachment","decAttachment","field","decField","decPh","toCipherData","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","has","addCiphers","sort","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","clear","lastUsedIndex","max","cipher","lastLaunched","y","valueOf","getNextIndex","CipherBulkDeleteRequest","ids","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherCollectionsRequest","CipherCreateRequest","CipherShareRequest","DomainMatchBlacklist","Set","CipherService","settingsService","fileUploadService","searchService","sortedCiphersCache","sortCiphersByLastUsed","getDecryptedCipherCache","getDecryptedCiphers","setDecryptedCipherCache","setDecryptedCiphers","clearIndex","indexCiphers","clearCache","clearDecryptedCiphersState","encrypt","originalCipher","existingCipher","hasFields","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","encryptObjProperty","encryptCipherData","encryptFields","encryptPasswordHistories","encryptAttachments","attachmentsModel","encAttachments","fieldsModel","encFields","encField","encryptField","fieldModel","Boolean","phModels","encPhs","encPh","encryptPasswordHistory","phModel","getEncryptedCiphers","getLocalData","getAll","getAllDecrypted","getUserId","indexedEntityId","decCiphers","hasKey","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","isDeleted","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","eqDomainsPromise","getEquivalentDomains","eqDomains","matches","eqDomain","concat","matchingDomains","getDefaultUriMatch","domainUrlHost","Host","urlHost","Exact","StartsWith","Never","getAllFromApiForOrganization","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","getTime","setLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","getNeverDomains","setNeverDomains","saveWithServer","upsert","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","reader","FileReader","readAsArrayBuffer","onload","evt","cData","saveAttachmentRawWithServer","onerror","filename","encFileName","dataEncKey","makeEncKey","encData","encryptToBytes","fileSize","adminRequest","uploadDataResponse","uploadCipherAttachment","legacyServerAttachmentFileUpload","fd","blob","Blob","append","filepath","contentType","saveCollectionsWithServer","setEncryptedCiphers","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","sortCiphersByLastUsedThenName","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","attachmentView","attachmentResponse","buf","arrayBuffer","decBuf","decryptFromBytes","theObj","modelProp","loginUri","lastUsed","autofillOnPageLoadDefault","getAutoFillOnPageLoadDefault","clearSortedCiphers","TreeNode","node","parent","children","ServiceUtils","nodeTree","partIndex","delimiter","partName","nestedTraverse","newPartName","getTreeNodeObject","CollectionData","CollectionView","Collection","CollectionService","setDecryptedCollections","collection","decryptMany","decCollections","getSortFunction","getEncryptedCollections","decryptedCollections","getDecryptedCollections","getAllNested","nodes","collectionCopy","getNested","setEncryptedCollections","LogLevelType","ConsoleLogService","timersMap","debug","write","Debug","info","Info","warning","Warning","level","console","log","warn","time","label","hrtime","timeEnd","elapsed","ContainerService","attachToWindow","attachToGlobal","bitwardenContainerService","EnvironmentService","urlsSubject","Subject","activeAccount","subscribe","setUrlsFromStorage","baseUrl","getNotificationsUrl","notificationsUrl","getWebVaultUrl","webVaultUrl","getSendUrl","getIconsUrl","iconsUrl","identityUrl","eventsUrl","getEnvironmentUrls","envUrls","setUrls","formatUrl","setEnvironmentUrls","next","getUrls","EventData","EventRequest","EventService","cipherService","organizationService","checkOnInterval","uploadEvents","setInterval","collect","eventType","uploadImmediately","orgIds","eventCollection","getEventCollection","event","setEventCollection","clearEvents","KdfType","PBKDF2_SHA256","CardExport","FieldExport","Text","IdentityExport","LoginUriExport","LoginExport","toView","toDomain","SecureNoteType","EventType","SecureNoteExport","Generic","CipherExport","values","build","CipherWithIdExport","CollectionExport","CollectionWithIdExport","EventExport","humanReadableMessage","appIcon","appName","userName","userEmail","ip","FolderView","Folder","FolderExport","FolderWithIdExport","FileUploadType","ExportService","folderService","getExport","format","getOrganizationExport","getEncryptedExport","getDecryptedExport","getPasswordProtectedExport","clearText","salt","randomBytes","makePinKey","encKeyValidation","encText","jsonDoc","encrypted","passwordProtected","encKeyValidation_DO_NOT_EDIT","getOrganizationEncryptedExport","getOrganizationDecryptedExport","getEventExport","getFileName","extension","now","getFullYear","padNumber","getMonth","getDate","getHours","getMinutes","getSeconds","decFolders","foldersMap","exportCiphers","buildCommonCipher","collectionPromises","decCol","cipherPromises","decCipher","collectionsMap","num","width","padCharacter","numString","login_uri","login_username","login_password","login_totp","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","toUTCString","searchParams","blobResponse","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","fromUtf8ToB64","blockIdList","xml","version","Version","month","day","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadSendFile","uploadData","Direct","Azure","FolderData","FolderRequest","FolderService","setDecryptedFolders","getEncryptedFolders","decryptedFolders","getDecryptedFolders","noneFolder","folderCopy","setEncryptedFolders","updates","cId","OrganizationUserType","SetKeyConnectorKeyRequest","orgIdentifier","KeyConnectorUserKeyRequest","KeyConnectorService","setUsesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","organization","keyConnectorRequest","handleKeyConnectorError","userKeyResponse","keyArr","Admin","Owner","isProviderUser","getEmail","pubKey","privKey","setPasswordRequest","setConvertAccountRequired","setConvertAccountToKeyConnector","getConvertAccountRequired","getConvertAccountToKeyConnector","removeConvertAccountRequired","NotificationType","NotificationResponse","contextId","payload","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrgKeys","SyncSettings","LogOut","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","OrganizationUserStatusType","Permissions","NotificationsService","syncService","connected","inactive","reconnectTimer","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","withHubProtocol","on","processNotification","onclose","reconnect","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","notification","isAuthenticated","payloadUserId","UserId","myUserId","syncUpsertCipher","syncDeleteCipher","syncUpsertFolder","syncDeleteFolder","fullSync","syncUpsertSend","syncDeleteSend","min","floor","Organization","Confirmed","Manager","isAdmin","isManager","canCreateNewCollections","canEditAnyCollection","canDeleteAnyCollection","canDeleteAssignedCollections","canEditAssignedCollections","canManagePolicies","hasAnyPermission","includes","AccessEventLogs","canAccessEventLogs","AccessImportExport","canAccessImportExport","AccessReports","canAccessReports","CreateNewCollections","EditAnyCollection","DeleteAnyCollection","EditAssignedCollections","DeleteAssignedCollections","ManageGroups","canManageGroups","ManageOrganization","isOwner","ManagePolicies","ManageUsers","canManageUsers","ManageUsersPassword","canManageUsersPassword","ManageSso","canManageSso","ManageBilling","canManageBilling","hasProvider","OrganizationService","getOrganizations","getByIdentifier","setOrganizations","canManageSponsorships","hasOrganizations","PolicyType","EEFLongWordList","GeneratedPasswordHistory","PasswordGeneratorPolicyOptions","defaultType","minLength","useUppercase","useLowercase","useNumbers","numberCount","useSpecial","specialCount","minNumberWords","capitalize","includeNumber","inEffect","DefaultOptions","ambiguous","minNumber","uppercase","minUppercase","lowercase","minLowercase","special","minSpecial","numWords","wordSeparator","PasswordGenerationService","policyService","generatePassword","options","generatePassphrase","sanitizePasswordLength","positions","shuffleArray","allCharSet","lowercaseCharSet","uppercaseCharSet","numberCharSet","specialCharSet","positionChars","randomCharIndex","randomNumber","listLength","wordList","wordIndex","appendRandomNumberToRandomWord","getOptions","getPasswordGenerationOptions","setPasswordGenerationOptions","enforcedOptions","enforcePasswordGeneratorPoliciesOnOptions","enforcedPolicyOptions","getPasswordGeneratorPolicyOptions","PasswordGenerator","currentPolicy","useUpper","useLower","minNumbers","saveOptions","getHistory","getDecryptedPasswordGenerationHistory","getEncryptedPasswordGenerationHistory","decrypted","decryptHistory","setDecryptedPasswordGenerationHistory","addHistory","currentHistory","matchesPrevious","unshift","pop","newHistory","encryptHistory","setEncryptedPasswordGenerationHistory","passwordStrength","userInputs","globalUserInputs","finalUserInputs","normalizeOptions","index","history","array","j","forGeneration","minUppercaseCalc","minLowercaseCalc","minNumberCalc","minSpecialCalc","PolicyData","MasterPasswordPolicyOptions","minComplexity","requireUpper","requireLower","requireNumbers","requireSpecial","Policy","ResetPasswordPolicyOptions","autoEnrollEnabled","ProviderUserStatusType","ProviderUserType","PolicyService","setDecryptedPolicies","decryptedPolicies","getDecryptedPolicies","diskPolicies","getEncryptedPolicies","policy","getPolicyForOrganization","policyType","org","setEncryptedPolicies","getMasterPasswordPoliciesForInvitedUsers","mapPoliciesFromToken","getMasterPasswordPolicyOptions","MasterPassword","evaluateMasterPassword","newPassword","toLocaleLowerCase","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","policiesResponse","policyAppliesToUser","policyFilter","filteredPolicies","policySet","Accepted","isExcemptFromPolicies","MaximumVaultTimeout","isExemptFromPolicies","Provider","isProviderAdmin","ProviderAdmin","ProviderService","getProviders","SendType","SearchService","indexing","searchableMinLength","locale","lunr","Pipeline","registerFunction","normalizeAccentsPipelineFunction","isSearchable","query","normalizeSearchQuery","builder","Builder","pipeline","add","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","searchCiphers","results","isArray","every","getIndexForSearch","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","searchSends","sendsMatched","lowPriorityMatched","joined","protocolIndex","queryIndex","substring","searchableFields","metadata","normalize","SendFileData","SendTextData","SendData","File","SendFileView","SendTextView","SendView","SendFile","SendText","Send","cryptoKey","makeSendKey","SendRequest","fileLength","SendService","setDecryptedSends","fileData","passwordHash","pbkdf2","ArrayBuffer","encryptFileData","parseFile","getEncryptedSends","decSends","getDecryptedSends","sendData","legacyServerSendFileUpload","setEncryptedSends","removePasswordWithServer","Keys","SettingsService","setSettings","getSettingsKey","setEquivalentDomains","setSettingsKey","getSettings","TokenService","decoded","fromUrlB64ToUtf8","parse","clientIdClientSecret","setRefreshToken","setClientId","setClientSecret","getApiKeyClientId","getApiKeyClientSecret","setAccessToken","getAccessToken","clearToken","storedToken","getDecodedToken","getTokenExpirationDate","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","msRemaining","round","minutes","getEmailVerified","email_verified","getName","getIssuer","iss","amr","v1Keys","alwaysShowDock","autoConfirmFingerprints","autoFillOnPageLoadDefault","biometricAwaitingAcceptance","biometricFingerprintValidated","biometricText","biometricUnlock","clearClipboard","collapsedGroupings","convertAccountToKeyConnector","defaultUriMatch","disableAddLoginNotification","disableAutoBiometricsPrompt","disableAutoTotpCopy","disableBadgeCounter","disableChangedPasswordNotification","disableContextMenuItem","disableFavicon","disableGa","dontShowCardsCurrentTab","dontShowIdentitiesCurrentTab","enableAlwaysOnTop","enableAutoFillOnPageLoad","enableBiometric","enableBrowserIntegration","enableBrowserIntegrationFingerprint","enableCloseToTray","enableFullWidth","enableGravatars","enableMinimizeToTray","enableStartToTray","enableTray","encOrgKeys","encPrivate","encProviderKeys","entityId","entityType","installedVersion","keyHash","lastActive","mainWindowSize","minimizeOnCopyToClipboard","neverDomains","noAutoPromptBiometricsText","openAtLogin","passwordGenerationOptions","protectedPin","ssoCodeVerifier","ssoIdentifier","ssoState","stamp","usesConnector","vaultTimeout","rememberedEmail","v1KeyPrefixes","lastSync","partialKeys","StateMigrationService","secureStorageService","stateFactory","needsMigration","currentStateVersion","getCurrentStateVersion","Latest","migrate","migrateStateFrom1To2","Two","migrateStateFrom2To3","Three","migrateStateFrom3To4","clearV1Keys","clearingUserId","keyPrefix","globals","noAutoPromptBiometrics","ssoOrganizationIdentifier","defaultAccount","accountSettings","autoConfirmFingerPrints","biometricLocked","enableGravitars","addEditCipherInfo","apiKeyClientSecret","cryptoMasterKey","cryptoMasterKeyAuto","cryptoMasterKeyB64","cryptoMasterKeyBiometric","legacyEtmKey","apiKeyClientId","authenticationStatus","everBeenUnlocked","accountActivity","keySuffix","remove","authenticatedUserIds","account","getGlobals","Four","OrganizationData","ProviderData","SyncService","collectionService","sendService","providerService","syncInProgress","getLastSync","setLastSync","toJSON","forceSync","allowThrowOnError","syncStarted","syncCompleted","needsSync","needsSyncing","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","syncPolicies","isEdit","localFolder","remoteFolder","shouldUpdate","localCipher","checkCollections","remoteCipher","localSend","remoteSend","successfully","getSecurityStamp","setProviderKeys","setOrgKeys","setSecurityStamp","setEmailVerified","setHasPremiumPersonally","setHasPremiumFromOrganization","setForcePasswordReset","SystemService","reloadCallback","reloadInterval","clearClipboardTimeout","clearClipboardTimeoutFunction","startProcessReload","getDecryptedPinProtected","getBiometricLocked","cancelProcessReload","doRefresh","getLastActive","biometricLockedFingerprintValidated","getBiometricFingerprintValidated","clearInterval","clipboardValue","timeoutMs","getClearClipboard","clearSeconds","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","clearPendingClipboard","B32Chars","SteamChars","TotpService","getCode","period","alg","digits","keyB32","isOtpAuth","isSteamAuth","getQueryParams","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","fromHexToArray","keyBytes","b32ToBytes","sign","offset","otp","fullCode","trunc","pow","getTimeInterval","isAutoCopyEnabled","getDisableAutoTotpCopy","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","signature","hmac","TwoFactorProviders","Authenticator","priority","Yubikey","Duo","OrganizationDuo","Email","WebAuthn","TwoFactorService","selectedTwoFactorProviderType","getSupportedProviders","twoFactorProvidersData","supportsDuo","supportsWebAuthn","getDefaultProvider","webAuthnSupported","providerType","providerPriority","_value","setSelectedProvider","clearProviders","VerificationType","VerifyOTPRequest","OTP","SecretVerificationRequest","UserVerificationService","buildRequest","verification","requestClass","alreadyHashed","validateInput","secret","verifyUser","compareAndUpdateKeyHash","requestOTP","wordCapitalize","wordIncludeNumber","subaddressType","catchallType","forwardedService","forwardedAnonAddyDomain","UsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","word","zeroPad","subaddressEmail","atIndex","emailBeginning","emailEnding","subaddressString","randomString","website","catchallDomain","startString","forwardedSimpleLoginApiKey","generateSimpleLoginAlias","forwardedAnonAddyApiToken","generateAnonAddyAlias","forwardedFirefoxApiToken","generateFirefoxRelayAlias","getUsernameGenerationOptions","setUsernameGenerationOptions","charSet","redirect","Authentication","note","alias","apiToken","websiteNote","generated_for","full_address","DecryptParameters","WebCryptoFunctionService","crypto","subtle","algorithm","iterations","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","importKey","deriveBits","hkdf","ikm","outputByteSize","hkdfParams","hkdfExpand","prk","hashLen","infoBuf","infoArr","runningOkmLength","previousT","okm","md","valueBytes","toByteString","update","fromByteStringToArray","digest","valueBuf","signingAlgorithm","mac1","mac2","arr1","arr2","hmacFast","getBytes","compareFast","rand","Uint32Array","putInt32","aesEncrypt","aesDecryptFastParameters","meta","encKeyByteString","macKeyByteString","macData","aesDecryptFast","parameters","dataBuffer","decipher","finish","aesDecrypt","rsaEncrypt","rsaParams","rsaDecrypt","rsaExtractPublicKey","impPrivateKey","jwkPrivateKey","exportKey","jwkPublicKeyParams","kty","ext","impPublicKey","rsaGenerateKeyPair","modulusLength","publicExponent","keyPair","generateKey","getRandomValues","fromBufferToByteString","SafariApp","command","resolveNow","BrowserApi","isSafariApi","messageId","MAX_SAFE_INTEGER","browser","runtime","sendNativeMessage","responseData","tabsQueryFirst","active","windowId","chrome","windows","WINDOW_ID_CURRENT","currentWindow","tabsQuery","tabs","tab","tabSendMessage","sendMessage","lastError","incognito","onCreated","addListener","getBackgroundPage","getManifest","getViews","extensionPage","onMessage","msg","sender","windowType","tabToClose","tabId","highlighted","isWebExtensionsApi","isFirefoxOnAndroid","finally","close","blobData","blobOptions","sendMessageToApp","msSaveOrOpenBlob","msSaveBlob","createObjectURL","download","appendChild","click","removeChild","i18n","getUILanguage","location","reload","w","application","connectNative","isChromeApi","permission","getPlatformInfo","BrowserComponentState","BrowserGroupingsComponentState","BrowserSendComponentState","AccountSettings","Account","groupings","sendType","PopupUtilsService","privateMode","inSidebar","inTab","inPopout","inPopup","inPrivateMode","getContentScrollY","scrollingContainer","getElementsByTagName","scrollTop","setContentScrollY","scrollY","popOut","hrefParts","bodyRect","querySelector","getBoundingClientRect","height","closePopup","AutofillScript","documentUUID","script","properties","autosubmit","AutoFillConstants","UsernameFieldNames","PasswordFieldIgnoreList","ExcludedAutofillTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","EmailFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","AutofillService","totpService","eventService","getFormsWithPasswordFields","pageDetails","formData","passwordFields","loadPasswordFields","formKey","forms","formPasswordFields","pf","form","uf","findUsernameField","passwords","doAutoFill","totpPromise","getActiveTab","canAccessPremium","getCanAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","fillNewPassword","delay_between_operations","skipLastUsed","frameId","Cipher_ClientAutofilled","doAutoFillActiveTab","fromCommand","lastLaunchedCipher","totpCode","getTabFromCurrentWindow","filledFields","fieldNames","hasValue","opid","viewable","tagName","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","setFillScriptForFocus","passwordFieldsForForm","passField","elementNumber","fieldIsFuzzyMatch","fillFields","forCustomFieldsOnly","isExcludedType","attr","isFieldMatch","makeScriptAction","selectInfo","siOptions","option","fieldAttrsContain","maxLength","colonIndex","fullMonth","fullYear","partYear","makeScriptActionWithValue","containsVal","doesContain","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","fullName","excludedTypes","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","valueIsLikePassword","cleanedValue","readonly","htmlID","htmlName","placeholder","autoCompleteType","passwordField","withoutForm","usernameField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","property","separator","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","EncArrayBuffer","EncryptedObject","CryptoService","platformUtilService","setCryptoMasterKey","storeKey","setDecryptedCryptoSymmetricKey","setEncryptedCryptoSymmetricKey","encPrivateKey","setDecryptedPrivateKey","setEncryptedPrivateKey","orgs","providerOrgs","orgKeys","providerOrg","providerKey","getProviderKey","setDecryptedOrganizationKeys","setEncryptedOrganizationKeys","setDecryptedProviderKeys","setEncryptedProviderKeys","inMemoryKey","getCryptoMasterKey","symmetricKey","getKeyFromStorage","retrieveKeyFromStorage","validateKey","clearSecretKeyStore","getKeyHash","storedKeyHash","localKeyHash","serverKeyHash","ServerAuthorization","getEncKey","getEncKeyHelper","getPublicKey","inMemoryPublicKey","getPrivateKey","setPublicKey","decryptedPrivateKey","getDecryptedPrivateKey","getEncryptedPrivateKey","getFingerprint","keyFingerprint","userFingerprint","hashPhrase","getOrgKeys","decryptedOrganizationKeys","getDecryptedOrganizationKeys","getEncryptedOrganizationKeys","getProviderKeys","decryptedProviderKeys","getDecryptedProviderKeys","getEncryptedProviderKeys","Biometric","getCryptoMasterKeyAuto","hasCryptoMasterKeyBiometric","hasEncKey","getEncryptedCryptoSymmetricKey","clearKey","clearSecretStorage","setLegacyEtmKey","clearStoredKey","setCryptoMasterKeyAuto","setCryptoMasterKeyBiometric","clearKeyHash","clearEncKey","memoryOnly","clearKeyPair","keysToClear","clearOrgKeys","clearProviderKeys","clearPinProtectedKey","setEncryptedPinProtected","clearKeys","toggleKey","makeKeyFromPin","pin","protectedKeyCs","pinProtectedKey","getEncryptedPinProtected","pinKey","decKey","makeShareKey","shareKey","stretchKey","keyMaterial","sendKey","hashPurpose","theKey","getKeyForEncryption","buildEncKey","remakeEncKey","plainValue","plainBuf","encObj","encValue","macLen","encBytes","privateKeyValue","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","encString","aesDecryptToBytes","aesDecryptToUtf8","encBuf","ctBytes","ivBytes","macBytes","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","shouldStoreKey","getVaultTimeout","getBiometricUnlock","supportsSecureStorage","getCryptoMasterKeyBiometric","keyForEnc","resolveLegacyKey","fastParams","computedMac","legacyKey","getLegacyEtmKey","newKey","minimumEntropy","entropyPerWord","hashArr","phrase","hashNumber","remainder","mod","divide","encKeyEnc","getDecryptedCryptoSymmetricKey","decEncKey","encKeyCipher","symmetricCryptoKey","ClientType","BrowserCryptoService","authenticateBiometric","BrowserMessagingService","subscriber","arg","BrowserMessagingPrivateModeBackgroundService","bitwardenPopupMainMessageListener","DialogPromiseExpiration","BrowserPlatformUtilsService","clipboardWriteCallback","biometricCallback","showDialogResolves","passwordDialogResolves","deviceCache","prefersColorSchemeDark","matchMedia","FirefoxExtension","opr","addons","OperaExtension","EdgeExtension","VivaldiExtension","ChromeExtension","SafariExtension","Browser","isFirefox","isChrome","isEdge","isOpera","isVivaldi","isSafari","isIE","isMacAppStore","isViewOpen","isPopupOpen","sidebarView","sidebarViewName","lockTimeout","createNewTab","saveFile","downloadFile","PublicKeyCredential","showToast","showDialog","confirmText","cancelText","bodyIsHtml","dialogId","html","doc","clearMs","clipboard","writeText","clipboardData","setData","queryCommandSupported","textarea","textContent","style","position","select","execCommand","readText","focus","resolveDialogPromise","confirmed","resolvePasswordDialogPromise","canceled","resolveObj","tryResolve","supportsBiometric","os","getBrowserInfo","sidebarAction","getDefaultSystemTheme","Dark","Light","onDefaultSystemThemeChange","addEventListener","getEffectiveTheme","getTheme","BrowserStorageService","chromeStorageApi","storage","local","keyedObj","I18nService","systemLanguage","localesDirectory","getLocalesJson","supportedTranslationLocales","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","translate","messagesObj","formattedLocale","locales","placeholders","placeProp","content","replaceToken","replaceContent","getMessage","StorageLocation","State","accounts","authenticatedAccounts","StateService","stateMigrationService","useAccountCache","BehaviorSubject","createGlobals","hasBeenInited","accountDiskCache","initAccountState","syncAccountFromDisk","storedActiveUser","activeUserId","pushAccounts","diskAccount","getAccountFromDisk","setAccountEnvironmentUrls","scaffoldNewAccountStorage","setLastActive","setActiveUser","clearDecryptedDataForActiveUser","clean","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","dynamicallySetActiveUser","removeAccountFromDisk","removeAccountFromMemory","getTimeoutBasedStorageOptions","getAccount","saveAccount","getAddEditCipherInfo","setAddEditCipherInfo","getAlwaysShowDock","defaultOnDiskOptions","setAlwaysShowDock","saveGlobals","getAutoConfirmFingerPrints","setAutoConfirmFingerprints","setAutoFillOnPageLoadDefault","getBiometricAwaitingAcceptance","setBiometricAwaitingAcceptance","setBiometricFingerprintValidated","getBiometricText","setBiometricText","setBiometricUnlock","getHasPremiumPersonally","getHasPremiumFromOrganization","hasPremiumFromOrganization","defaultOnDiskLocalOptions","setClearClipboard","getCollapsedGroupings","setCollapsedGroupings","defaultSecureStorageOptions","saveSecureStorageKey","getCryptoMasterKeyB64","setCryptoMasterKeyB64","setDecodedToken","setDecryptedPinProtected","setDefaultUriMatch","getDisableAddLoginNotification","setDisableAddLoginNotification","getDisableAutoBiometricsPrompt","setDisableAutoBiometricsPrompt","setDisableAutoTotpCopy","getDisableBadgeCounter","setDisableBadgeCounter","getDisableChangedPasswordNotification","setDisableChangedPasswordNotification","getDisableContextMenuItem","setDisableContextMenuItem","getDisableFavicon","setDisableFavicon","getDisableGa","setDisableGa","getDontShowCardsCurrentTab","setDontShowCardsCurrentTab","getDontShowIdentitiesCurrentTab","setDontShowIdentitiesCurrentTab","setEmail","getEnableAlwaysOnTop","accountPreference","globalPreference","setEnableAlwaysOnTop","getEnableAutoFillOnPageLoad","setEnableAutoFillOnPageLoad","getEnableBiometric","enableBiometrics","setEnableBiometric","getEnableBrowserIntegration","setEnableBrowserIntegration","getEnableBrowserIntegrationFingerprint","setEnableBrowserIntegrationFingerprint","getEnableCloseToTray","setEnableCloseToTray","getEnableFullWidth","setEnableFullWidth","getEnableGravitars","setEnableGravitars","getEnableMinimizeToTray","setEnableMinimizeToTray","getEnableStartToTray","setEnableStartToTray","getEnableTray","setEnableTray","defaultOnDiskMemoryOptions","getEntityId","setEntityId","getEntityType","setEntityType","getGlobalEnvironmentUrls","setEverBeenUnlocked","getForcePasswordReset","getInstalledVersion","setInstalledVersion","getKdfIterations","setKdfIterations","getKdfType","setKdfType","getLocale","setLocale","getMainWindowSize","setMainWindowSize","getMinimizeOnCopyToClipboard","setMinimizeOnCopyToClipboard","getNoAutoPromptBiometrics","setNoAutoPromptBiometrics","getNoAutoPromptBiometricsText","setNoAutoPromptBiometricsText","getOpenAtLogin","setOpenAtLogin","getOrganizationInvitation","organizationInvitation","setOrganizationInvitation","usernameGenerationOptions","getGeneratorOptions","generatorOptions","setGeneratorOptions","getProtectedPin","setProtectedPin","getRememberedEmail","setRememberedEmail","getSsoCodeVerifier","setSsoCodeVerifier","getSsoOrgIdentifier","setSsoOrganizationIdentifier","getSsoState","setSsoState","setTheme","setVaultTimeout","getVaultTimeoutAction","accountVaultTimeoutAction","globalVaultTimeoutAction","setVaultTimeoutAction","getStateVersion","setStateVersion","getWindow","setWindow","useMemory","storageLocation","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","useSecureStorage","getAccountFromMemory","getUserIdFromMemory","cachedAccount","Memory","Both","Disk","saveAccountToMemory","saveAccountToDisk","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","storedAccount","pruneInMemoryAccounts","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","persistentAccountInformation","timeoutAction","getBrowserGroupingComponentState","setBrowserGroupingComponentState","getBrowserCipherComponentState","setBrowserCipherComponentState","getBrowserSendComponentState","setBrowserSendComponentState","getBrowserSendTypeComponentState","setBrowserSendTypeComponentState","VaultFilter","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","cipherType","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","DynamicTreeNode","hasId","fullList","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildFolders","storedFolders","orgCiphers","oc","nestedFolders","nestedList","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","PersonalOwnership","VaultFilterService","vaultFilter","allVaults","myVault","getVaultFilter","setVaultFilter","filterCipherForSelectedVault","VaultTimeoutService","lockedCallback","loggedOutCallback","startCheck","checkVaultTimeout","getValue","shouldLock","executeTimeoutAction","lock","allowSoftLock","pinSet","isPinLockSet","isBiometricLockSet","setVaultTimeoutOptions","action","currentAction","authStatus","vaultTimeoutSeconds","checkSafari","CommandsBackground","main","passwordGenerationService","vaultTimeoutService","messageListener","processCommand","commandToRetry","shortcut","commands","onCommand","generatePasswordToClipboard","autoFillLogin","openPopup","getTabFromCurrentWindowId","retryMessage","tabSendMessageData","collectPageDetailsForContentScript","ContextMenusBackground","noopCommandSuffix","contextMenus","onClicked","menuItemId","getClickedElement","parentMenuItemId","cipherAction","startAutofillPage","Cipher_ClientCopiedPassword","totpValue","loginToAutoFill","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","newState","onStateChanged","setDetectionInterval","pollIdle","handler","queryState","NativeMessagingBackground","runtimeBackground","resolver","secureSetupResolve","onAdded","reloadExtension","connect","port","connecting","connectedCallback","disconnect","sharedSecret","validatingFingerprint","showFingerprintDialog","showWrongUserDialog","onDisconnect","timestamp","postMessage","encryptMessage","secureCommunication","getResponse","rawMessage","abs","processMessage","sendUnencrypted","fingerprint","NotificationQueueMessageType","NotificationBackground","autofillService","notificationQueue","cleanupNotificationQueue","getDataForTab","responseCommand","addLogin","changedPassword","removeTabFromNotificationQueue","saveOrUpdateCredentials","saveNever","checkNotificationQueue","doNotificationQueueCheck","currentTab","expires","tabDomain","AddLogin","typeData","isVaultLocked","wasVaultLocked","ChangePassword","loginInfo","loginDomain","normalizedUsername","disabledAddLogin","allowPersonalOwnership","pushAddLoginToQueue","usernameMatches","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","queueMessage","changePasswordMessage","getDecryptedCipherById","updateCipher","createNewCipher","addLoginMessage","loginModel","newCipher","RuntimeBackground","systemService","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","onInstalled","reason","checkOnInstalled","backgroundMessageListener","isPrivateMode","bitwardenBackgroundMessageListener","closeLoginTab","focusSpecifiedTab","setIcon","refreshBadgeAndMenu","logout","expired","reseedStorage","autofillTimeout","autofillPage","vaultUrl","referrer","TabsBackground","notificationBackground","onFocusChanged","focusedWindowId","onActivated","activeInfo","onReplaced","addedTabId","removedTabId","onReplacedRan","onUpdated","changeInfo","onUpdatedRan","WebRequestBackground","pendingAuthRequests","webRequest","onAuthRequired","requestId","resolveAuthCredentials","onCompleted","completeAuthRequest","onErrorOccurred","authCredentials","bitwardenMain","menuOptionsLoaded","nativeMessagingBackground","vaultFilterService","that","backgroundMessagingService","reloadProcess","auditService","exportService","popupUtilsService","userVerificationService","forceWindowReload","commandsBackground","tabsBackground","contextMenusBackground","idleBackground","webRequestBackground","usernameGenerationService","bootstrap","getPrivateModeWindows","actionSetIcon","browserAction","onWindowCreated","suffix","forLocked","menuDisabled","contextMenusRemoveAll","buildContextMenu","loadMenuAndUpdateBadgeForNoAccessState","contextMenuReady","buildingContextMenu","contextMenusCreate","contexts","parentId","contextMenuEnabled","loadMenuAndUpdateBadge","actionSetBadgeBackgroundColor","loadLoginContextMenuOptions","theText","loadNoLoginsContextMenuOptions","sidebarActionSetBadgeText","browserActionSetBadgeText","getActiveTabs","loadContextMenuOptions","noLoginsMessage","idSuffix","sanitizeContextMenuTitle","override","syncInternal","lastSyncAgo","scheduleNextSync","syncTimeout","removeAll","theAction","setBadgeBackgroundColor","color","setBadgeText","setTitle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","definition","defineProperty","enumerable","globalThis","Function","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}