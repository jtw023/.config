{"version":3,"file":"background.js","mappings":"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GAPZ,KAAAC,OAAqB,GACrB,KAAAD,aAAoB,GACpB,KAAAE,WAAkB,GAClB,KAAAhpB,QAAe,GACf,KAAAipB,SAAgB,GAChB,KAAAC,WAAkB,KAGhB3hF,KAAKuhF,aAAeA,GCTjB,MAAMK,IACK,GAAAC,mBAA+B,CAE7C,WACA,YACA,QACA,gBACA,SACA,iBACA,SACA,UACA,cACA,WAEA,eACA,gBACA,gBACA,iBACA,aACA,eAGc,GAAAC,wBAAoC,CAClD,kBACA,UACA,eACA,UAGc,GAAAC,sBAAkC,CAChD,QACA,WACA,SACA,OACA,SACA,QACA,QACA,UAIG,MAAMC,IACK,GAAAC,eAA2B,CACzC,mBACA,cACA,WACA,SACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,uBAAmC,IAC9CF,GAA4BC,eAC/B,eAGc,GAAAE,qBAAiC,CAC/C,UACA,YACA,kBACA,aACA,OACA,OAGc,GAAAC,0BAAsC,CACpD,UACA,YACA,kBACA,aACA,UAGc,GAAAC,qBAAiC,CAC/C,YACA,SACA,cACA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,UAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///./node_modules/@angular/core/__ivy_ngcc__/bundles|lazy|groupOptions: {}|namespace object","webpack:///./jslib/common/src/enums/authenticationStatus.ts","webpack:///./jslib/common/src/enums/cipherRepromptType.ts","webpack:///./jslib/common/src/enums/cipherType.ts","webpack:///./jslib/common/src/enums/stateVersion.ts","webpack:///./jslib/common/src/enums/themeType.ts","webpack:///./jslib/common/src/enums/deviceType.ts","webpack:///./jslib/common/src/factories/accountFactory.ts","webpack:///./jslib/common/src/factories/globalStateFactory.ts","webpack:///./jslib/common/src/factories/stateFactory.ts","webpack:///./jslib/common/src/models/domain/environmentUrls.ts","webpack:///./jslib/common/src/models/domain/windowState.ts","webpack:///./jslib/common/src/models/domain/globalState.ts","webpack:///./jslib/common/src/models/request/deviceRequest.ts","webpack:///./jslib/common/src/models/request/identityToken/tokenRequestTwoFactor.ts","webpack:///./jslib/common/src/models/response/baseResponse.ts","webpack:///./jslib/common/src/models/response/billingResponse.ts","webpack:///./jslib/common/src/models/response/billingHistoryResponse.ts","webpack:///./jslib/common/src/models/response/billingPaymentResponse.ts","webpack:///./jslib/common/src/models/response/organizationConnectionResponse.ts","webpack:///./jslib/common/src/misc/utils.ts","webpack:///./jslib/common/src/models/request/identityToken/tokenRequest.ts","webpack:///./jslib/common/src/models/request/identityToken/apiTokenRequest.ts","webpack:///./jslib/common/src/models/response/apiKeyResponse.ts","webpack:///./jslib/common/src/models/response/attachmentResponse.ts","webpack:///./jslib/common/src/models/api/cardApi.ts","webpack:///./jslib/common/src/models/api/fieldApi.ts","webpack:///./jslib/common/src/models/api/identityApi.ts","webpack:///./jslib/common/src/models/api/loginUriApi.ts","webpack:///./jslib/common/src/models/api/loginApi.ts","webpack:///./jslib/common/src/models/api/secureNoteApi.ts","webpack:///./jslib/common/src/models/response/passwordHistoryResponse.ts","webpack:///./jslib/common/src/models/response/cipherResponse.ts","webpack:///./jslib/common/src/models/response/attachmentUploadDataResponse.ts","webpack:///./jslib/common/src/models/response/breachAccountResponse.ts","webpack:///./jslib/common/src/models/response/selectionReadOnlyResponse.ts","webpack:///./jslib/common/src/models/response/collectionResponse.ts","webpack:///./jslib/common/src/models/response/globalDomainResponse.ts","webpack:///./jslib/common/src/models/response/domainsResponse.ts","webpack:///./jslib/common/src/models/response/emergencyAccessResponse.ts","webpack:///./jslib/common/src/models/response/errorResponse.ts","webpack:///./jslib/common/src/models/response/eventResponse.ts","webpack:///./jslib/common/src/models/response/folderResponse.ts","webpack:///./jslib/common/src/models/response/groupResponse.ts","webpack:///./jslib/common/src/models/response/identityCaptchaResponse.ts","webpack:///./jslib/common/src/models/response/identityTokenResponse.ts","webpack:///./jslib/common/src/models/response/identityTwoFactorResponse.ts","webpack:///./jslib/common/src/models/response/keyConnectorUserKeyResponse.ts","webpack:///./jslib/common/src/models/response/listResponse.ts","webpack:///./jslib/common/src/enums/ssoEnums.ts","webpack:///./jslib/common/src/models/api/ssoConfigApi.ts","webpack:///./jslib/common/src/models/response/organization/organizationSsoResponse.ts","webpack:///./jslib/common/src/models/response/organizationApiKeyInformationResponse.ts","webpack:///./jslib/common/src/models/response/organizationAutoEnrollStatusResponse.ts","webpack:///./jslib/common/src/models/response/keysResponse.ts","webpack:///./jslib/common/src/models/response/organizationKeysResponse.ts","webpack:///./jslib/common/src/models/response/planResponse.ts","webpack:///./jslib/common/src/models/response/organizationResponse.ts","webpack:///./jslib/common/src/models/response/organizationSponsorshipSyncStatusResponse.ts","webpack:///./jslib/common/src/models/response/subscriptionResponse.ts","webpack:///./jslib/common/src/models/response/organizationSubscriptionResponse.ts","webpack:///./jslib/common/src/models/response/organizationUserBulkPublicKeyResponse.ts","webpack:///./jslib/common/src/models/response/organizationUserBulkResponse.ts","webpack:///./jslib/common/src/models/api/permissionsApi.ts","webpack:///./jslib/common/src/models/response/organizationUserResponse.ts","webpack:///./jslib/common/src/models/response/profileOrganizationResponse.ts","webpack:///./jslib/common/src/models/response/profileProviderOrganizationResponse.ts","webpack:///./jslib/common/src/models/response/profileProviderResponse.ts","webpack:///./jslib/common/src/models/response/profileResponse.ts","webpack:///./jslib/common/src/models/response/paymentResponse.ts","webpack:///./jslib/common/src/models/response/policyResponse.ts","webpack:///./jslib/common/src/models/response/preloginResponse.ts","webpack:///./jslib/common/src/models/response/provider/providerOrganizationResponse.ts","webpack:///./jslib/common/src/models/response/provider/providerResponse.ts","webpack:///./jslib/common/src/models/response/provider/providerUserBulkPublicKeyResponse.ts","webpack:///./jslib/common/src/models/response/provider/providerUserBulkResponse.ts","webpack:///./jslib/common/src/models/response/provider/providerUserResponse.ts","webpack:///./jslib/common/src/models/api/sendFileApi.ts","webpack:///./jslib/common/src/models/api/sendTextApi.ts","webpack:///./jslib/common/src/models/response/sendAccessResponse.ts","webpack:///./jslib/common/src/models/response/sendFileDownloadDataResponse.ts","webpack:///./jslib/common/src/models/response/sendResponse.ts","webpack:///./jslib/common/src/models/response/sendFileUploadDataResponse.ts","webpack:///./jslib/common/src/models/response/syncResponse.ts","webpack:///./jslib/common/src/models/response/taxInfoResponse.ts","webpack:///./jslib/common/src/models/response/taxRateResponse.ts","webpack:///./jslib/common/src/models/response/twoFactorAuthenticatorResponse.ts","webpack:///./jslib/common/src/models/response/twoFactorDuoResponse.ts","webpack:///./jslib/common/src/models/response/twoFactorEmailResponse.ts","webpack:///./jslib/common/src/models/response/twoFactorProviderResponse.ts","webpack:///./jslib/common/src/models/response/twoFactorRescoverResponse.ts","webpack:///./jslib/common/src/models/response/twoFactorWebAuthnResponse.ts","webpack:///./jslib/common/src/models/response/twoFactorYubiKeyResponse.ts","webpack:///./jslib/common/src/models/response/userKeyResponse.ts","webpack:///./jslib/common/src/enums/htmlStorageLocation.ts","webpack:///./jslib/common/src/services/api.service.ts","webpack:///./jslib/common/src/services/appId.service.ts","webpack:///./jslib/common/src/services/audit.service.ts","webpack:///./jslib/common/src/misc/throttle.ts","webpack:///./jslib/common/src/enums/authenticationType.ts","webpack:///./jslib/common/src/enums/keySuffixOptions.ts","webpack:///./jslib/common/src/enums/twoFactorProviderType.ts","webpack:///./jslib/common/src/models/domain/account.ts","webpack:///./jslib/common/src/models/domain/authResult.ts","webpack:///./jslib/common/src/models/request/keysRequest.ts","webpack:///./jslib/common/src/misc/logInStrategies/logIn.strategy.ts","webpack:///./jslib/common/src/enums/hashPurpose.ts","webpack:///./jslib/common/src/misc/logInStrategies/apiLogin.strategy.ts","webpack:///./jslib/common/src/models/request/identityToken/passwordTokenRequest.ts","webpack:///./jslib/common/src/misc/logInStrategies/passwordLogin.strategy.ts","webpack:///./jslib/common/src/models/request/identityToken/ssoTokenRequest.ts","webpack:///./jslib/common/src/misc/logInStrategies/ssoLogin.strategy.ts","webpack:///./jslib/common/src/models/request/preloginRequest.ts","webpack:///./jslib/common/src/services/auth.service.ts","webpack:///./jslib/common/src/enums/fieldType.ts","webpack:///./jslib/common/src/enums/uriMatchType.ts","webpack:///./jslib/common/src/enums/encryptionType.ts","webpack:///./jslib/common/src/misc/sequentialize.ts","webpack:///./jslib/common/src/models/data/attachmentData.ts","webpack:///./jslib/common/src/models/data/cardData.ts","webpack:///./jslib/common/src/models/data/fieldData.ts","webpack:///./jslib/common/src/models/data/identityData.ts","webpack:///./jslib/common/src/models/data/loginUriData.ts","webpack:///./jslib/common/src/models/data/loginData.ts","webpack:///./jslib/common/src/models/data/passwordHistoryData.ts","webpack:///./jslib/common/src/models/data/secureNoteData.ts","webpack:///./jslib/common/src/models/data/cipherData.ts","webpack:///./jslib/common/src/models/view/attachmentView.ts","webpack:///./jslib/common/src/models/domain/encString.ts","webpack:///./jslib/common/src/models/domain/domainBase.ts","webpack:///./jslib/common/src/models/domain/symmetricCryptoKey.ts","webpack:///./jslib/common/src/enums/linkedIdType.ts","webpack:///./jslib/common/src/models/domain/attachment.ts","webpack:///./jslib/common/src/misc/linkedFieldOption.decorator.ts","webpack:///./jslib/common/src/models/view/itemView.ts","webpack:///./jslib/common/src/models/view/cardView.ts","webpack:///./jslib/common/src/models/domain/card.ts","webpack:///./jslib/common/src/models/view/identityView.ts","webpack:///./jslib/common/src/models/view/loginView.ts","webpack:///./jslib/common/src/models/view/secureNoteView.ts","webpack:///./jslib/common/src/models/view/cipherView.ts","webpack:///./jslib/common/src/models/view/fieldView.ts","webpack:///./jslib/common/src/models/domain/field.ts","webpack:///./jslib/common/src/models/domain/identity.ts","webpack:///./jslib/common/src/models/view/loginUriView.ts","webpack:///./jslib/common/src/models/domain/loginUri.ts","webpack:///./jslib/common/src/models/domain/login.ts","webpack:///./jslib/common/src/models/view/passwordHistoryView.ts","webpack:///./jslib/common/src/models/domain/password.ts","webpack:///./jslib/common/src/models/domain/secureNote.ts","webpack:///./jslib/common/src/models/domain/cipher.ts","webpack:///./jslib/common/src/models/domain/sortedCiphersCache.ts","webpack:///./jslib/common/src/models/request/cipherBulkDeleteRequest.ts","webpack:///./jslib/common/src/models/request/cipherBulkMoveRequest.ts","webpack:///./jslib/common/src/models/request/cipherBulkRestoreRequest.ts","webpack:///./jslib/common/src/models/request/attachmentRequest.ts","webpack:///./jslib/common/src/models/request/cipherRequest.ts","webpack:///./jslib/common/src/models/request/cipherWithIdRequest.ts","webpack:///./jslib/common/src/models/request/cipherBulkShareRequest.ts","webpack:///./jslib/common/src/models/request/cipherCollectionsRequest.ts","webpack:///./jslib/common/src/models/request/cipherCreateRequest.ts","webpack:///./jslib/common/src/models/request/cipherShareRequest.ts","webpack:///./jslib/common/src/services/cipher.service.ts","webpack:///./jslib/common/src/models/domain/treeNode.ts","webpack:///./jslib/common/src/misc/serviceUtils.ts","webpack:///./jslib/common/src/models/data/collectionData.ts","webpack:///./jslib/common/src/models/view/collectionView.ts","webpack:///./jslib/common/src/models/domain/collection.ts","webpack:///./jslib/common/src/services/collection.service.ts","webpack:///./jslib/common/src/enums/logLevelType.ts","webpack:///./jslib/common/src/services/consoleLog.service.ts","webpack:///./jslib/common/src/services/container.service.ts","webpack:///./jslib/common/src/services/environment.service.ts","webpack:///./jslib/common/src/models/data/eventData.ts","webpack:///./jslib/common/src/models/request/eventRequest.ts","webpack:///./jslib/common/src/services/event.service.ts","webpack:///./jslib/common/src/enums/kdfType.ts","webpack:///./jslib/common/src/models/export/cardExport.ts","webpack:///./jslib/common/src/models/export/fieldExport.ts","webpack:///./jslib/common/src/models/export/identityExport.ts","webpack:///./jslib/common/src/models/export/loginUriExport.ts","webpack:///./jslib/common/src/models/export/loginExport.ts","webpack:///./jslib/common/src/enums/secureNoteType.ts","webpack:///./jslib/common/src/enums/eventType.ts","webpack:///./jslib/common/src/models/export/secureNoteExport.ts","webpack:///./jslib/common/src/models/export/cipherExport.ts","webpack:///./jslib/common/src/models/export/cipherWithIdsExport.ts","webpack:///./jslib/common/src/models/export/collectionExport.ts","webpack:///./jslib/common/src/models/export/collectionWithIdExport.ts","webpack:///./jslib/common/src/models/export/eventExport.ts","webpack:///./jslib/common/src/models/view/folderView.ts","webpack:///./jslib/common/src/models/domain/folder.ts","webpack:///./jslib/common/src/models/export/folderExport.ts","webpack:///./jslib/common/src/models/export/folderWithIdExport.ts","webpack:///./jslib/common/src/enums/fileUploadType.ts","webpack:///./jslib/common/src/services/export.service.ts","webpack:///./jslib/common/src/services/azureFileUpload.service.ts","webpack:///./jslib/common/src/services/bitwardenFileUpload.service.ts","webpack:///./jslib/common/src/services/fileUpload.service.ts","webpack:///./jslib/common/src/models/data/folderData.ts","webpack:///./jslib/common/src/models/request/folderRequest.ts","webpack:///./jslib/common/src/services/folder.service.ts","webpack:///./jslib/common/src/enums/organizationUserType.ts","webpack:///./jslib/common/src/models/request/account/setKeyConnectorKeyRequest.ts","webpack:///./jslib/common/src/models/request/keyConnectorUserKeyRequest.ts","webpack:///./jslib/common/src/services/keyConnector.service.ts","webpack:///./jslib/common/src/enums/notificationType.ts","webpack:///./jslib/common/src/models/response/notificationResponse.ts","webpack:///./jslib/common/src/enums/organizationUserStatusType.ts","webpack:///./jslib/common/src/enums/permissions.ts","webpack:///./jslib/common/src/services/notifications.service.ts","webpack:///./jslib/common/src/models/domain/organization.ts","webpack:///./jslib/common/src/services/organization.service.ts","webpack:///./jslib/common/src/enums/policyType.ts","webpack:///./jslib/common/src/misc/wordlist.ts","webpack:///./jslib/common/src/models/domain/generatedPasswordHistory.ts","webpack:///./jslib/common/src/models/domain/passwordGeneratorPolicyOptions.ts","webpack:///./jslib/common/src/services/passwordGeneration.service.ts","webpack:///./jslib/common/src/models/data/policyData.ts","webpack:///./jslib/common/src/models/domain/masterPasswordPolicyOptions.ts","webpack:///./jslib/common/src/models/domain/policy.ts","webpack:///./jslib/common/src/models/domain/resetPasswordPolicyOptions.ts","webpack:///./jslib/common/src/enums/providerUserStatusType.ts","webpack:///./jslib/common/src/enums/providerUserType.ts","webpack:///./jslib/common/src/services/policy.service.ts","webpack:///./jslib/common/src/models/domain/provider.ts","webpack:///./jslib/common/src/services/provider.service.ts","webpack:///./jslib/common/src/enums/sendType.ts","webpack:///./jslib/common/src/services/search.service.ts","webpack:///./jslib/common/src/models/data/sendFileData.ts","webpack:///./jslib/common/src/models/data/sendTextData.ts","webpack:///./jslib/common/src/models/data/sendData.ts","webpack:///./jslib/common/src/models/view/sendFileView.ts","webpack:///./jslib/common/src/models/view/sendTextView.ts","webpack:///./jslib/common/src/models/view/sendView.ts","webpack:///./jslib/common/src/models/domain/sendFile.ts","webpack:///./jslib/common/src/models/domain/sendText.ts","webpack:///./jslib/common/src/models/domain/send.ts","webpack:///./jslib/common/src/models/request/sendRequest.ts","webpack:///./jslib/common/src/services/send.service.ts","webpack:///./jslib/common/src/services/settings.service.ts","webpack:///./jslib/common/src/services/token.service.ts","webpack:///./jslib/common/src/services/stateMigration.service.ts","webpack:///./jslib/common/src/models/data/organizationData.ts","webpack:///./jslib/common/src/models/data/providerData.ts","webpack:///./jslib/common/src/services/sync.service.ts","webpack:///./jslib/common/src/services/system.service.ts","webpack:///./jslib/common/src/services/totp.service.ts","webpack:///./jslib/common/src/services/twoFactor.service.ts","webpack:///./jslib/common/src/enums/verificationType.ts","webpack:///./jslib/common/src/models/request/account/verifyOTPRequest.ts","webpack:///./jslib/common/src/models/request/secretVerificationRequest.ts","webpack:///./jslib/common/src/services/userVerification.service.ts","webpack:///./jslib/common/src/services/usernameGeneration.service.ts","webpack:///./jslib/common/src/models/domain/decryptParameters.ts","webpack:///./jslib/common/src/services/webCryptoFunction.service.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/browser/browserApi.ts","webpack:///./src/models/browserComponentState.ts","webpack:///./src/models/browserGroupingsComponentState.ts","webpack:///./src/models/browserSendComponentState.ts","webpack:///./src/models/account.ts","webpack:///./src/popup/services/popup-utils.service.ts","webpack:///./src/models/autofillScript.ts","webpack:///./src/services/autofillConstants.ts","webpack:///./src/services/autofill.service.ts","webpack:///./jslib/common/src/models/domain/encArrayBuffer.ts","webpack:///./jslib/common/src/models/domain/encryptedObject.ts","webpack:///./jslib/common/src/services/crypto.service.ts","webpack:///./jslib/common/src/enums/clientType.ts","webpack:///./src/services/browserCrypto.service.ts","webpack:///./src/services/browserMessaging.service.ts","webpack:///./src/services/browserMessagingPrivateModeBackground.service.ts","webpack:///./src/services/browserPlatformUtils.service.ts","webpack:///./src/services/browserStorage.service.ts","webpack:///./src/services/i18n.service.ts","webpack:///./jslib/common/src/services/i18n.service.ts","webpack:///./jslib/common/src/enums/storageLocation.ts","webpack:///./jslib/common/src/models/domain/state.ts","webpack:///./jslib/common/src/services/state.service.ts","webpack:///./src/services/state.service.ts","webpack:///./jslib/angular/src/modules/vault-filter/models/vault-filter.model.ts","webpack:///./jslib/angular/src/modules/vault-filter/models/dynamic-tree-node.model.ts","webpack:///./jslib/common/src/abstractions/state.service.ts","webpack:///./jslib/common/src/abstractions/organization.service.ts","webpack:///./jslib/common/src/abstractions/folder.service.ts","webpack:///./jslib/common/src/abstractions/cipher.service.ts","webpack:///./jslib/common/src/abstractions/collection.service.ts","webpack:///./jslib/common/src/abstractions/policy.service.ts","webpack:///./jslib/angular/src/modules/vault-filter/vault-filter.service.ts","webpack:///./src/services/vaultFilter.service.ts","webpack:///./src/services/vaultTimeout.service.ts","webpack:///./jslib/common/src/services/vaultTimeout.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/contextMenus.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/background/models/notificationQueueMessageType.ts","webpack:///./src/background/notification.background.ts","webpack:///./src/background/runtime.background.ts","webpack:///./src/background/tabs.background.ts","webpack:///./src/background/webRequest.background.ts","webpack:///./src/background.ts","webpack:///./src/background/main.background.ts","webpack:///./jslib/common/src/abstractions/messaging.service.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 82255;\nmodule.exports = webpackEmptyAsyncContext;","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum StateVersion {\n  One = 1, // Original flat key/value pair store\n  Two = 2, // Move to a typed State object\n  Three = 3, // Fix migration of users' premium status\n  Four = 4, // Fix 'Never Lock' option by removing stale data\n  Latest = Four,\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/globalState\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/globalState\";\n\nimport { AccountFactory } from \"./accountFactory\";\nimport { GlobalStateFactory } from \"./globalStateFactory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","export class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n}\n","export class WindowState {\n  width?: number;\n  height?: number;\n  isMaximized?: boolean;\n  // TODO: displayBounds is an Electron.Rectangle.\n  // We need to establish some kind of client-specific global state, similiar to the way we already extend a base Account.\n  displayBounds: any;\n  x?: number;\n  y?: number;\n}\n","import { StateVersion } from \"../../enums/stateVersion\";\nimport { ThemeType } from \"../../enums/themeType\";\n\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { WindowState } from \"./windowState\";\n\nexport class GlobalState {\n  enableAlwaysOnTop?: boolean;\n  installedVersion?: string;\n  locale?: string;\n  organizationInvitation?: any;\n  ssoCodeVerifier?: string;\n  ssoOrganizationIdentifier?: string;\n  ssoState?: string;\n  rememberedEmail?: string;\n  theme?: ThemeType = ThemeType.System;\n  window?: WindowState = new WindowState();\n  twoFactorToken?: string;\n  disableFavicon?: boolean;\n  biometricAwaitingAcceptance?: boolean;\n  biometricFingerprintValidated?: boolean;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n  loginRedirect?: any;\n  mainWindowSize?: number;\n  enableBiometrics?: boolean;\n  biometricText?: string;\n  noAutoPromptBiometrics?: boolean;\n  noAutoPromptBiometricsText?: string;\n  stateVersion: StateVersion = StateVersion.One;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n}\n","import { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { DeviceType } from \"../../enums/deviceType\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n}\n","import { TwoFactorProviderType } from \"jslib-common/enums/twoFactorProviderType\";\n\nexport class TokenRequestTwoFactor {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false\n  ) {}\n}\n","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { PaymentMethodType } from \"../../enums/paymentMethodType\";\nimport { TransactionType } from \"../../enums/transactionType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billingResponse\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingSourceResponse } from \"./billingResponse\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { OrganizationConnectionType } from \"jslib-common/enums/organizationConnectionType\";\n\nimport { BillingSyncConfigApi } from \"../api/billingSyncConfigApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","/* eslint-disable no-useless-escape */\nimport * as tldjs from \"tldjs\";\n\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof window === \"undefined\" ? require(\"url\") : null;\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: any = null;\n  static tldEndingRegex =\n    /.*\\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n    Utils.global = Utils.isNode && !Utils.isBrowser ? global : window;\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = window.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"utf8\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      const encodedString = String.fromCharCode.apply(null, bytes);\n      return decodeURIComponent(escape(encodedString));\n    }\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(window.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(window.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static isGuid(id: string) {\n    return RegExp(\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/,\n      \"i\"\n    ).test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.hostname !== \"\" ? url.hostname : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    let httpUrl = uriString.startsWith(\"http://\") || uriString.startsWith(\"https://\");\n    if (\n      !httpUrl &&\n      uriString.indexOf(\"://\") < 0 &&\n      Utils.tldEndingRegex.test(uriString) &&\n      uriString.indexOf(\"@\") < 0\n    ) {\n      uriString = \"http://\" + uriString;\n      httpUrl = true;\n    }\n\n    if (httpUrl) {\n      try {\n        const url = Utils.getUrlObject(uriString);\n        const validHostname = tldjs?.isValid != null ? tldjs.isValid(url.hostname) : true;\n        if (!validHostname) {\n          return null;\n        }\n\n        if (url.hostname === \"localhost\" || Utils.validIpAddress(url.hostname)) {\n          return url.hostname;\n        }\n\n        const urlDomain =\n          tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(url.hostname) : null;\n        return urlDomain != null ? urlDomain : url.hostname;\n      } catch (e) {\n        // Invalid domain, try another approach below.\n      }\n    }\n\n    try {\n      const domain = tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(uriString) : null;\n\n      if (domain != null) {\n        return domain;\n      }\n    } catch {\n      return null;\n    }\n\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1])\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction(i18nService: I18nService, prop: string) {\n    return (a: any, b: any) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop], b[prop])\n        : a[prop].localeCompare(b[prop]);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    let url = Utils.getUrlObject(uriString);\n    if (url == null) {\n      const hasHttpProtocol =\n        uriString.indexOf(\"http://\") === 0 || uriString.indexOf(\"https://\") === 0;\n      if (!hasHttpProtocol && uriString.indexOf(\".\") > -1) {\n        url = Utils.getUrlObject(\"http://\" + uriString);\n      }\n    }\n    return url;\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  private static validIpAddress(ipString: string): boolean {\n    const ipRegex =\n      /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return ipRegex.test(ipString);\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4)\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      } else if (typeof URL === \"function\") {\n        return new URL(uriString);\n      } else if (window != null) {\n        const hasProtocol = uriString.indexOf(\"://\") > -1;\n        if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n          uriString = \"http://\" + uriString;\n        } else if (!hasProtocol) {\n          return null;\n        }\n        const anchor = window.document.createElement(\"a\");\n        anchor.href = uriString;\n        return anchor as any;\n      }\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n\n  constructor(protected twoFactor: TokenRequestTwoFactor, device?: DeviceRequest) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenRequestTwoFactor) {\n    this.twoFactor = twoFactor;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    if (this.twoFactor.token && this.twoFactor.provider != null) {\n      obj.twoFactorToken = this.twoFactor.token;\n      obj.twoFactorProvider = this.twoFactor.provider;\n      obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n    }\n\n    return obj;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class ApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nimport { LoginUriApi } from \"./loginUriApi\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nimport { AttachmentResponse } from \"./attachmentResponse\";\nimport { BaseResponse } from \"./baseResponse\";\nimport { PasswordHistoryResponse } from \"./passwordHistoryResponse\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n  }\n}\n\nexport class CollectionGroupDetailsResponse extends CollectionResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { GlobalDomainResponse } from \"./globalDomainResponse\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d)\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { EmergencyAccessStatusType } from \"../../enums/emergencyAccessStatusType\";\nimport { EmergencyAccessType } from \"../../enums/emergencyAccessType\";\nimport { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class EmergencyAccessGranteeDetailsResponse extends BaseResponse {\n  id: string;\n  granteeId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.granteeId = this.getResponseProperty(\"GranteeId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessGrantorDetailsResponse extends BaseResponse {\n  id: string;\n  grantorId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.grantorId = this.getResponseProperty(\"GrantorId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessTakeoverResponse extends BaseResponse {\n  keyEncrypted: string;\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n\nexport class EmergencyAccessViewResponse extends BaseResponse {\n  keyEncrypted: string;\n  ciphers: CipherResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    } else {\n      if (status === 429) {\n        this.message = \"Rate limit exceeded. Try again later.\";\n      }\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","import { DeviceType } from \"../../enums/deviceType\";\nimport { EventType } from \"../../enums/eventType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class GroupResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  accessAll: boolean;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class GroupDetailsResponse extends GroupResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  forcePasswordReset: boolean;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  twoFactorProviders: TwoFactorProviderType[];\n  twoFactorProviders2 = new Map<TwoFactorProviderType, { [key: string]: string }>();\n  captchaToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    const twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    if (twoFactorProviders2 != null) {\n      for (const prop in twoFactorProviders2) {\n        // eslint-disable-next-line\n        if (twoFactorProviders2.hasOwnProperty(prop)) {\n          this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);\n        }\n      }\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","export enum SsoType {\n  None = 0,\n  OpenIdConnect = 1,\n  Saml2 = 2,\n}\n\nexport enum OpenIdConnectRedirectBehavior {\n  RedirectGet = 0,\n  FormPost = 1,\n}\n\nexport enum Saml2BindingType {\n  HttpRedirect = 1,\n  HttpPost = 2,\n}\n\nexport enum Saml2NameIdFormat {\n  NotConfigured = 0,\n  Unspecified = 1,\n  EmailAddress = 2,\n  X509SubjectName = 3,\n  WindowsDomainQualifiedName = 4,\n  KerberosPrincipalName = 5,\n  EntityIdentifier = 6,\n  Persistent = 7,\n  Transient = 8,\n}\n\nexport enum Saml2SigningBehavior {\n  IfIdpWantAuthnRequestsSigned = 0,\n  Always = 1,\n  Never = 3,\n}\n","import {\n  OpenIdConnectRedirectBehavior,\n  Saml2BindingType,\n  Saml2NameIdFormat,\n  Saml2SigningBehavior,\n  SsoType,\n} from \"../../enums/ssoEnums\";\nimport { BaseResponse } from \"../response/baseResponse\";\nimport { SsoConfigView } from \"../view/ssoConfigView\";\n\nexport class SsoConfigApi extends BaseResponse {\n  static fromView(view: SsoConfigView, api = new SsoConfigApi()) {\n    api.configType = view.configType;\n\n    api.keyConnectorEnabled = view.keyConnectorEnabled;\n    api.keyConnectorUrl = view.keyConnectorUrl;\n\n    if (api.configType === SsoType.OpenIdConnect) {\n      api.authority = view.openId.authority;\n      api.clientId = view.openId.clientId;\n      api.clientSecret = view.openId.clientSecret;\n      api.metadataAddress = view.openId.metadataAddress;\n      api.redirectBehavior = view.openId.redirectBehavior;\n      api.getClaimsFromUserInfoEndpoint = view.openId.getClaimsFromUserInfoEndpoint;\n      api.additionalScopes = view.openId.additionalScopes;\n      api.additionalUserIdClaimTypes = view.openId.additionalUserIdClaimTypes;\n      api.additionalEmailClaimTypes = view.openId.additionalEmailClaimTypes;\n      api.additionalNameClaimTypes = view.openId.additionalNameClaimTypes;\n      api.acrValues = view.openId.acrValues;\n      api.expectedReturnAcrValue = view.openId.expectedReturnAcrValue;\n    } else if (api.configType === SsoType.Saml2) {\n      api.spNameIdFormat = view.saml.spNameIdFormat;\n      api.spOutboundSigningAlgorithm = view.saml.spOutboundSigningAlgorithm;\n      api.spSigningBehavior = view.saml.spSigningBehavior;\n      api.spMinIncomingSigningAlgorithm = view.saml.spMinIncomingSigningAlgorithm;\n      api.spWantAssertionsSigned = view.saml.spWantAssertionsSigned;\n      api.spValidateCertificates = view.saml.spValidateCertificates;\n\n      api.idpEntityId = view.saml.idpEntityId;\n      api.idpBindingType = view.saml.idpBindingType;\n      api.idpSingleSignOnServiceUrl = view.saml.idpSingleSignOnServiceUrl;\n      api.idpSingleLogoutServiceUrl = view.saml.idpSingleLogoutServiceUrl;\n      api.idpX509PublicCert = view.saml.idpX509PublicCert;\n      api.idpOutboundSigningAlgorithm = view.saml.idpOutboundSigningAlgorithm;\n      api.idpAllowUnsolicitedAuthnResponse = view.saml.idpAllowUnsolicitedAuthnResponse;\n      api.idpWantAuthnRequestsSigned = view.saml.idpWantAuthnRequestsSigned;\n\n      // Value is inverted in the api model (disable instead of allow)\n      api.idpDisableOutboundLogoutRequests = !view.saml.idpAllowOutboundLogoutRequests;\n    }\n\n    return api;\n  }\n  configType: SsoType;\n\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n\n  // OpenId\n  authority: string;\n  clientId: string;\n  clientSecret: string;\n  metadataAddress: string;\n  redirectBehavior: OpenIdConnectRedirectBehavior;\n  getClaimsFromUserInfoEndpoint: boolean;\n  additionalScopes: string;\n  additionalUserIdClaimTypes: string;\n  additionalEmailClaimTypes: string;\n  additionalNameClaimTypes: string;\n  acrValues: string;\n  expectedReturnAcrValue: string;\n\n  // SAML\n  spNameIdFormat: Saml2NameIdFormat;\n  spOutboundSigningAlgorithm: string;\n  spSigningBehavior: Saml2SigningBehavior;\n  spMinIncomingSigningAlgorithm: boolean;\n  spWantAssertionsSigned: boolean;\n  spValidateCertificates: boolean;\n\n  idpEntityId: string;\n  idpBindingType: Saml2BindingType;\n  idpSingleSignOnServiceUrl: string;\n  idpSingleLogoutServiceUrl: string;\n  idpX509PublicCert: string;\n  idpOutboundSigningAlgorithm: string;\n  idpAllowUnsolicitedAuthnResponse: boolean;\n  idpDisableOutboundLogoutRequests: boolean;\n  idpWantAuthnRequestsSigned: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n\n    this.configType = this.getResponseProperty(\"ConfigType\");\n\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n\n    this.authority = this.getResponseProperty(\"Authority\");\n    this.clientId = this.getResponseProperty(\"ClientId\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.metadataAddress = this.getResponseProperty(\"MetadataAddress\");\n    this.redirectBehavior = this.getResponseProperty(\"RedirectBehavior\");\n    this.getClaimsFromUserInfoEndpoint = this.getResponseProperty(\"GetClaimsFromUserInfoEndpoint\");\n    this.additionalScopes = this.getResponseProperty(\"AdditionalScopes\");\n    this.additionalUserIdClaimTypes = this.getResponseProperty(\"AdditionalUserIdClaimTypes\");\n    this.additionalEmailClaimTypes = this.getResponseProperty(\"AdditionalEmailClaimTypes\");\n    this.additionalNameClaimTypes = this.getResponseProperty(\"AdditionalNameClaimTypes\");\n    this.acrValues = this.getResponseProperty(\"AcrValues\");\n    this.expectedReturnAcrValue = this.getResponseProperty(\"ExpectedReturnAcrValue\");\n\n    this.spNameIdFormat = this.getResponseProperty(\"SpNameIdFormat\");\n    this.spOutboundSigningAlgorithm = this.getResponseProperty(\"SpOutboundSigningAlgorithm\");\n    this.spSigningBehavior = this.getResponseProperty(\"SpSigningBehavior\");\n    this.spMinIncomingSigningAlgorithm = this.getResponseProperty(\"SpMinIncomingSigningAlgorithm\");\n    this.spWantAssertionsSigned = this.getResponseProperty(\"SpWantAssertionsSigned\");\n    this.spValidateCertificates = this.getResponseProperty(\"SpValidateCertificates\");\n\n    this.idpEntityId = this.getResponseProperty(\"IdpEntityId\");\n    this.idpBindingType = this.getResponseProperty(\"IdpBindingType\");\n    this.idpSingleSignOnServiceUrl = this.getResponseProperty(\"IdpSingleSignOnServiceUrl\");\n    this.idpSingleLogoutServiceUrl = this.getResponseProperty(\"IdpSingleLogoutServiceUrl\");\n    this.idpX509PublicCert = this.getResponseProperty(\"IdpX509PublicCert\");\n    this.idpOutboundSigningAlgorithm = this.getResponseProperty(\"IdpOutboundSigningAlgorithm\");\n    this.idpAllowUnsolicitedAuthnResponse = this.getResponseProperty(\n      \"IdpAllowUnsolicitedAuthnResponse\"\n    );\n    this.idpDisableOutboundLogoutRequests = this.getResponseProperty(\n      \"IdpDisableOutboundLogoutRequests\"\n    );\n    this.idpWantAuthnRequestsSigned = this.getResponseProperty(\"IdpWantAuthnRequestsSigned\");\n  }\n}\n","import { SsoConfigApi } from \"../../api/ssoConfigApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class OrganizationSsoResponse extends BaseResponse {\n  enabled: boolean;\n  data: SsoConfigApi;\n  urls: SsoUrls;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.data =\n      this.getResponseProperty(\"Data\") != null\n        ? new SsoConfigApi(this.getResponseProperty(\"Data\"))\n        : null;\n    this.urls = new SsoUrls(this.getResponseProperty(\"Urls\"));\n  }\n}\n\nclass SsoUrls extends BaseResponse {\n  callbackPath: string;\n  signedOutCallbackPath: string;\n  spEntityId: string;\n  spMetadataUrl: string;\n  spAcsUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.callbackPath = this.getResponseProperty(\"CallbackPath\");\n    this.signedOutCallbackPath = this.getResponseProperty(\"SignedOutCallbackPath\");\n    this.spEntityId = this.getResponseProperty(\"SpEntityId\");\n    this.spMetadataUrl = this.getResponseProperty(\"SpMetadataUrl\");\n    this.spAcsUrl = this.getResponseProperty(\"SpAcsUrl\");\n  }\n}\n","import { OrganizationApiKeyType } from \"../../enums/organizationApiKeyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationApiKeyInformationResponse extends BaseResponse {\n  keyType: OrganizationApiKeyType;\n\n  constructor(response: any) {\n    super(response);\n    this.keyType = this.getResponseProperty(\"KeyType\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationAutoEnrollStatusResponse extends BaseResponse {\n  id: string;\n  resetPasswordEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.resetPasswordEnabled = this.getResponseProperty(\"ResetPasswordEnabled\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeysResponse extends BaseResponse {\n  privateKey: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","import { KeysResponse } from \"./keysResponse\";\n\nexport class OrganizationKeysResponse extends KeysResponse {\n  constructor(response: any) {\n    super(response);\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\nimport { ProductType } from \"../../enums/productType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  product: ProductType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  baseSeats: number;\n  baseStorageGb: number;\n  maxCollections: number;\n  maxUsers: number;\n\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasPremiumAccessOption: boolean;\n  trialPeriodDays: number;\n\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripeStoragePlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  additionalStoragePricePerGb: number;\n  premiumAccessOptionPrice: number;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.product = this.getResponseProperty(\"Product\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxUsers = this.getResponseProperty(\"MaxUsers\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"SortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { PlanResponse } from \"./planResponse\";\n\nexport class OrganizationResponse extends BaseResponse {\n  id: string;\n  identifier: string;\n  name: string;\n  businessName: string;\n  businessAddress1: string;\n  businessAddress2: string;\n  businessAddress3: string;\n  businessCountry: string;\n  businessTaxNumber: string;\n  billingEmail: string;\n  plan: PlanResponse;\n  planType: PlanType;\n  seats: number;\n  maxAutoscaleSeats: number;\n  maxCollections: number;\n  maxStorageGb: number;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useResetPassword: boolean;\n  hasPublicAndPrivateKeys: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.businessAddress1 = this.getResponseProperty(\"BusinessAddress1\");\n    this.businessAddress2 = this.getResponseProperty(\"BusinessAddress2\");\n    this.businessAddress3 = this.getResponseProperty(\"BusinessAddress3\");\n    this.businessCountry = this.getResponseProperty(\"BusinessCountry\");\n    this.businessTaxNumber = this.getResponseProperty(\"BusinessTaxNumber\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n    const plan = this.getResponseProperty(\"Plan\");\n    this.plan = plan == null ? null : new PlanResponse(plan);\n    this.planType = this.getResponseProperty(\"PlanType\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxAutoscaleSeats = this.getResponseProperty(\"MaxAutoscaleSeats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  license: any;\n  expiration: string;\n  usingInAppPurchase: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    this.usingInAppPurchase = this.getResponseProperty(\"UsingInAppPurchase\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.trialEndDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n","import { OrganizationResponse } from \"./organizationResponse\";\nimport {\n  BillingSubscriptionResponse,\n  BillingSubscriptionUpcomingInvoiceResponse,\n} from \"./subscriptionResponse\";\n\nexport class OrganizationSubscriptionResponse extends OrganizationResponse {\n  storageName: string;\n  storageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  expiration: string;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n    this.expiration = this.getResponseProperty(\"Expiration\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAllCollections: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAssignedCollections: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    // For backwards compatibility with Server <= 1.43.0\n    this.manageAllCollections = this.getResponseProperty(\"ManageAllCollections\");\n    this.manageAssignedCollections = this.getResponseProperty(\"ManageAssignedCollections\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\nimport { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class OrganizationUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n  }\n}\n\nexport class OrganizationUserUserDetailsResponse extends OrganizationUserResponse {\n  name: string;\n  email: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n  }\n}\n\nexport class OrganizationUserDetailsResponse extends OrganizationUserResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n\nexport class OrganizationUserResetPasswordDetailsReponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  resetPasswordKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.resetPasswordKey = this.getResponseProperty(\"ResetPasswordKey\");\n    this.encryptedPrivateKey = this.getResponseProperty(\"EncryptedPrivateKey\");\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  providerId: string;\n  providerName: string;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.planProductType = this.getResponseProperty(\"PlanProductType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\"\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\"\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"./profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"./profileProviderResponse\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: string;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  masterPasswordHint: string;\n  premium: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.masterPasswordHint = this.getResponseProperty(\"MasterPasswordHint\");\n    this.premium = this.getResponseProperty(\"Premium\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o)\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  businessName: string;\n  billingEmail: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"../organizationUserBulkPublicKeyResponse\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { ProviderUserStatusType } from \"../../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../../enums/providerUserType\";\nimport { PermissionsApi } from \"../../api/permissionsApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\nimport { CollectionDetailsResponse } from \"./collectionResponse\";\nimport { DomainsResponse } from \"./domainsResponse\";\nimport { FolderResponse } from \"./folderResponse\";\nimport { PolicyResponse } from \"./policyResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  secretKey: string;\n  integrationKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.secretKey = this.getResponseProperty(\"SecretKey\");\n    this.integrationKey = this.getResponseProperty(\"IntegrationKey\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","import { AppIdService } from \"jslib-common/abstractions/appId.service\";\nimport { OrganizationConnectionType } from \"jslib-common/enums/organizationConnectionType\";\nimport { DeviceRequest } from \"jslib-common/models/request/deviceRequest\";\nimport { TokenRequestTwoFactor } from \"jslib-common/models/request/identityToken/tokenRequestTwoFactor\";\nimport { OrganizationConnectionRequest } from \"jslib-common/models/request/organizationConnectionRequest\";\nimport { BillingHistoryResponse } from \"jslib-common/models/response/billingHistoryResponse\";\nimport { BillingPaymentResponse } from \"jslib-common/models/response/billingPaymentResponse\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"jslib-common/models/response/organizationConnectionResponse\";\n\nimport { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { DeviceType } from \"../enums/deviceType\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { Utils } from \"../misc/utils\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { VerifyOTPRequest } from \"../models/request/account/verifyOTPRequest\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { BitPayInvoiceRequest } from \"../models/request/bitPayInvoiceRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CollectionRequest } from \"../models/request/collectionRequest\";\nimport { DeleteRecoverRequest } from \"../models/request/deleteRecoverRequest\";\nimport { EmailRequest } from \"../models/request/emailRequest\";\nimport { EmailTokenRequest } from \"../models/request/emailTokenRequest\";\nimport { EmergencyAccessAcceptRequest } from \"../models/request/emergencyAccessAcceptRequest\";\nimport { EmergencyAccessConfirmRequest } from \"../models/request/emergencyAccessConfirmRequest\";\nimport { EmergencyAccessInviteRequest } from \"../models/request/emergencyAccessInviteRequest\";\nimport { EmergencyAccessPasswordRequest } from \"../models/request/emergencyAccessPasswordRequest\";\nimport { EmergencyAccessUpdateRequest } from \"../models/request/emergencyAccessUpdateRequest\";\nimport { EventRequest } from \"../models/request/eventRequest\";\nimport { FolderRequest } from \"../models/request/folderRequest\";\nimport { GroupRequest } from \"../models/request/groupRequest\";\nimport { IapCheckRequest } from \"../models/request/iapCheckRequest\";\nimport { ApiTokenRequest } from \"../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../models/request/identityToken/ssoTokenRequest\";\nimport { ImportCiphersRequest } from \"../models/request/importCiphersRequest\";\nimport { ImportDirectoryRequest } from \"../models/request/importDirectoryRequest\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/importOrganizationCiphersRequest\";\nimport { KdfRequest } from \"../models/request/kdfRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { OrganizationSponsorshipCreateRequest } from \"../models/request/organization/organizationSponsorshipCreateRequest\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../models/request/organization/organizationSponsorshipRedeemRequest\";\nimport { OrganizationSsoRequest } from \"../models/request/organization/organizationSsoRequest\";\nimport { OrganizationApiKeyRequest } from \"../models/request/organizationApiKeyRequest\";\nimport { OrganizationCreateRequest } from \"../models/request/organizationCreateRequest\";\nimport { OrganizationImportRequest } from \"../models/request/organizationImportRequest\";\nimport { OrganizationKeysRequest } from \"../models/request/organizationKeysRequest\";\nimport { OrganizationSubscriptionUpdateRequest } from \"../models/request/organizationSubscriptionUpdateRequest\";\nimport { OrganizationTaxInfoUpdateRequest } from \"../models/request/organizationTaxInfoUpdateRequest\";\nimport { OrganizationUpdateRequest } from \"../models/request/organizationUpdateRequest\";\nimport { OrganizationUpgradeRequest } from \"../models/request/organizationUpgradeRequest\";\nimport { OrganizationUserAcceptRequest } from \"../models/request/organizationUserAcceptRequest\";\nimport { OrganizationUserBulkConfirmRequest } from \"../models/request/organizationUserBulkConfirmRequest\";\nimport { OrganizationUserBulkRequest } from \"../models/request/organizationUserBulkRequest\";\nimport { OrganizationUserConfirmRequest } from \"../models/request/organizationUserConfirmRequest\";\nimport { OrganizationUserInviteRequest } from \"../models/request/organizationUserInviteRequest\";\nimport { OrganizationUserResetPasswordEnrollmentRequest } from \"../models/request/organizationUserResetPasswordEnrollmentRequest\";\nimport { OrganizationUserResetPasswordRequest } from \"../models/request/organizationUserResetPasswordRequest\";\nimport { OrganizationUserUpdateGroupsRequest } from \"../models/request/organizationUserUpdateGroupsRequest\";\nimport { OrganizationUserUpdateRequest } from \"../models/request/organizationUserUpdateRequest\";\nimport { PasswordHintRequest } from \"../models/request/passwordHintRequest\";\nimport { PasswordRequest } from \"../models/request/passwordRequest\";\nimport { PaymentRequest } from \"../models/request/paymentRequest\";\nimport { PolicyRequest } from \"../models/request/policyRequest\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ProviderAddOrganizationRequest } from \"../models/request/provider/providerAddOrganizationRequest\";\nimport { ProviderOrganizationCreateRequest } from \"../models/request/provider/providerOrganizationCreateRequest\";\nimport { ProviderSetupRequest } from \"../models/request/provider/providerSetupRequest\";\nimport { ProviderUpdateRequest } from \"../models/request/provider/providerUpdateRequest\";\nimport { ProviderUserAcceptRequest } from \"../models/request/provider/providerUserAcceptRequest\";\nimport { ProviderUserBulkConfirmRequest } from \"../models/request/provider/providerUserBulkConfirmRequest\";\nimport { ProviderUserBulkRequest } from \"../models/request/provider/providerUserBulkRequest\";\nimport { ProviderUserConfirmRequest } from \"../models/request/provider/providerUserConfirmRequest\";\nimport { ProviderUserInviteRequest } from \"../models/request/provider/providerUserInviteRequest\";\nimport { ProviderUserUpdateRequest } from \"../models/request/provider/providerUserUpdateRequest\";\nimport { RegisterRequest } from \"../models/request/registerRequest\";\nimport { SeatRequest } from \"../models/request/seatRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { SelectionReadOnlyRequest } from \"../models/request/selectionReadOnlyRequest\";\nimport { SendAccessRequest } from \"../models/request/sendAccessRequest\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { SetPasswordRequest } from \"../models/request/setPasswordRequest\";\nimport { StorageRequest } from \"../models/request/storageRequest\";\nimport { TaxInfoUpdateRequest } from \"../models/request/taxInfoUpdateRequest\";\nimport { TwoFactorEmailRequest } from \"../models/request/twoFactorEmailRequest\";\nimport { TwoFactorProviderRequest } from \"../models/request/twoFactorProviderRequest\";\nimport { TwoFactorRecoveryRequest } from \"../models/request/twoFactorRecoveryRequest\";\nimport { UpdateDomainsRequest } from \"../models/request/updateDomainsRequest\";\nimport { UpdateKeyRequest } from \"../models/request/updateKeyRequest\";\nimport { UpdateProfileRequest } from \"../models/request/updateProfileRequest\";\nimport { UpdateTempPasswordRequest } from \"../models/request/updateTempPasswordRequest\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../models/request/updateTwoFactorAuthenticatorRequest\";\nimport { UpdateTwoFactorDuoRequest } from \"../models/request/updateTwoFactorDuoRequest\";\nimport { UpdateTwoFactorEmailRequest } from \"../models/request/updateTwoFactorEmailRequest\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../models/request/updateTwoFactorWebAuthnDeleteRequest\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../models/request/updateTwoFactorWebAuthnRequest\";\nimport { UpdateTwoFactorYubioOtpRequest } from \"../models/request/updateTwoFactorYubioOtpRequest\";\nimport { VerifyBankRequest } from \"../models/request/verifyBankRequest\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verifyDeleteRecoverRequest\";\nimport { VerifyEmailRequest } from \"../models/request/verifyEmailRequest\";\nimport { ApiKeyResponse } from \"../models/response/apiKeyResponse\";\nimport { AttachmentResponse } from \"../models/response/attachmentResponse\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { BillingResponse } from \"../models/response/billingResponse\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport {\n  CollectionGroupDetailsResponse,\n  CollectionResponse,\n} from \"../models/response/collectionResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport {\n  EmergencyAccessGranteeDetailsResponse,\n  EmergencyAccessGrantorDetailsResponse,\n  EmergencyAccessTakeoverResponse,\n  EmergencyAccessViewResponse,\n} from \"../models/response/emergencyAccessResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { EventResponse } from \"../models/response/eventResponse\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport { GroupDetailsResponse, GroupResponse } from \"../models/response/groupResponse\";\nimport { IdentityCaptchaResponse } from \"../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\nimport { KeyConnectorUserKeyResponse } from \"../models/response/keyConnectorUserKeyResponse\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { OrganizationSsoResponse } from \"../models/response/organization/organizationSsoResponse\";\nimport { OrganizationApiKeyInformationResponse } from \"../models/response/organizationApiKeyInformationResponse\";\nimport { OrganizationAutoEnrollStatusResponse } from \"../models/response/organizationAutoEnrollStatusResponse\";\nimport { OrganizationKeysResponse } from \"../models/response/organizationKeysResponse\";\nimport { OrganizationResponse } from \"../models/response/organizationResponse\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../models/response/organizationSponsorshipSyncStatusResponse\";\nimport { OrganizationSubscriptionResponse } from \"../models/response/organizationSubscriptionResponse\";\nimport { OrganizationUserBulkPublicKeyResponse } from \"../models/response/organizationUserBulkPublicKeyResponse\";\nimport { OrganizationUserBulkResponse } from \"../models/response/organizationUserBulkResponse\";\nimport {\n  OrganizationUserDetailsResponse,\n  OrganizationUserResetPasswordDetailsReponse,\n  OrganizationUserUserDetailsResponse,\n} from \"../models/response/organizationUserResponse\";\nimport { PaymentResponse } from \"../models/response/paymentResponse\";\nimport { PlanResponse } from \"../models/response/planResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { PreloginResponse } from \"../models/response/preloginResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../models/response/provider/providerOrganizationResponse\";\nimport { ProviderResponse } from \"../models/response/provider/providerResponse\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../models/response/provider/providerUserBulkPublicKeyResponse\";\nimport { ProviderUserBulkResponse } from \"../models/response/provider/providerUserBulkResponse\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../models/response/provider/providerUserResponse\";\nimport { SelectionReadOnlyResponse } from \"../models/response/selectionReadOnlyResponse\";\nimport { SendAccessResponse } from \"../models/response/sendAccessResponse\";\nimport { SendFileDownloadDataResponse } from \"../models/response/sendFileDownloadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SubscriptionResponse } from \"../models/response/subscriptionResponse\";\nimport { SyncResponse } from \"../models/response/syncResponse\";\nimport { TaxInfoResponse } from \"../models/response/taxInfoResponse\";\nimport { TaxRateResponse } from \"../models/response/taxRateResponse\";\nimport { TwoFactorAuthenticatorResponse } from \"../models/response/twoFactorAuthenticatorResponse\";\nimport { TwoFactorDuoResponse } from \"../models/response/twoFactorDuoResponse\";\nimport { TwoFactorEmailResponse } from \"../models/response/twoFactorEmailResponse\";\nimport { TwoFactorProviderResponse } from \"../models/response/twoFactorProviderResponse\";\nimport { TwoFactorRecoverResponse } from \"../models/response/twoFactorRescoverResponse\";\nimport {\n  TwoFactorWebAuthnResponse,\n  ChallengeResponse,\n} from \"../models/response/twoFactorWebAuthnResponse\";\nimport { TwoFactorYubiKeyResponse } from \"../models/response/twoFactorYubiKeyResponse\";\nimport { UserKeyResponse } from \"../models/response/userKeyResponse\";\nimport { SendAccessView } from \"../models/view/sendAccessView\";\n\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private customUserAgent: string = null\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof ApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        await this.tokenService.clearTwoFactorToken();\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.doAuthRefresh();\n    } catch (e) {\n      return Promise.reject(null);\n    }\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  deleteAccount(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/accounts\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  postRegister(request: RegisterRequest): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      false,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postIapCheck(request: IapCheckRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/iap-check\", request, true, false);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  postCancelPremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/cancel-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountKey(request: UpdateKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/key\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountVerifyPassword(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-password\", request, true, false);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  postAccountRequestOTP(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Folder APIs\n\n  async getFolder(id: string): Promise<FolderResponse> {\n    const r = await this.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  deleteFolder(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n\n  // Send APIs\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + sendId + \"/file/\" + fileId, null, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id + \"/remove-password\", null, true, true);\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  putCipherCollections(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections\", request, true, false);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkDeleteRequest\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionDetails(\n    organizationId: string,\n    id: string\n  ): Promise<CollectionGroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new CollectionGroupDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[]\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupDetails(organizationId: string, id: string): Promise<GroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new GroupDetailsResponse(r);\n  }\n\n  async getGroups(organizationId: string): Promise<ListResponse<GroupResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, GroupResponse);\n  }\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async postGroup(organizationId: string, request: GroupRequest): Promise<GroupResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroup(\n    organizationId: string,\n    id: string,\n    request: GroupRequest\n  ): Promise<GroupResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroupUsers(organizationId: string, id: string, request: string[]): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteGroup(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Policy APIs\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        encodeURIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByInvitedUser(\n    organizationId: string,\n    userId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/invited-user?\" + \"userId=\" + userId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async putPolicy(\n    organizationId: string,\n    type: PolicyType,\n    request: PolicyRequest\n  ): Promise<PolicyResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  // Organization User APIs\n\n  async getOrganizationUser(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserDetailsResponse(r);\n  }\n\n  async getOrganizationUserGroups(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async getOrganizationUsers(\n    organizationId: string\n  ): Promise<ListResponse<OrganizationUserUserDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserUserDetailsResponse);\n  }\n\n  async getOrganizationUserResetPasswordDetails(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserResetPasswordDetailsReponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password-details\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserResetPasswordDetailsReponse(r);\n  }\n\n  async getOrganizationAutoEnrollStatus(\n    identifier: string\n  ): Promise<OrganizationAutoEnrollStatusResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + identifier + \"/auto-enroll-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationAutoEnrollStatusResponse(r);\n  }\n\n  postOrganizationUserInvite(\n    organizationId: string,\n    request: OrganizationUserInviteRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/invite\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserReinvite(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyOrganizationUserReinvite(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  postOrganizationUserAccept(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserConfirm(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postOrganizationUsersPublicKey(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkPublicKeyResponse);\n  }\n\n  async postOrganizationUserBulkConfirm(\n    organizationId: string,\n    request: OrganizationUserBulkConfirmRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  putOrganizationUser(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserGroups(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateGroupsRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPasswordEnrollment(\n    organizationId: string,\n    userId: string,\n    request: OrganizationUserResetPasswordEnrollmentRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + userId + \"/reset-password-enrollment\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPassword(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserResetPasswordRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans/\", null, true, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async postImportDirectory(organizationId: string, request: ImportDirectoryRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + organizationId + \"/import\", request, true, false);\n  }\n\n  async postPublicImportDirectory(request: OrganizationImportRequest): Promise<any> {\n    return this.send(\"POST\", \"/public/organization/import\", request, true, false);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubioOtpRequest\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  // Emergency Access APIs\n\n  async getEmergencyAccessTrusted(): Promise<ListResponse<EmergencyAccessGranteeDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/trusted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGranteeDetailsResponse);\n  }\n\n  async getEmergencyAccessGranted(): Promise<ListResponse<EmergencyAccessGrantorDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/granted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGrantorDetailsResponse);\n  }\n\n  async getEmergencyAccess(id: string): Promise<EmergencyAccessGranteeDetailsResponse> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id, null, true, true);\n    return new EmergencyAccessGranteeDetailsResponse(r);\n  }\n\n  async getEmergencyGrantorPolicies(id: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id + \"/policies\", null, true, true);\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  putEmergencyAccess(id: string, request: EmergencyAccessUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/emergency-access/\" + id, request, true, false);\n  }\n\n  deleteEmergencyAccess(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/emergency-access/\" + id, null, true, false);\n  }\n\n  postEmergencyAccessInvite(request: EmergencyAccessInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/invite\", request, true, false);\n  }\n\n  postEmergencyAccessReinvite(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reinvite\", null, true, false);\n  }\n\n  postEmergencyAccessAccept(id: string, request: EmergencyAccessAcceptRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/accept\", request, true, false);\n  }\n\n  postEmergencyAccessConfirm(id: string, request: EmergencyAccessConfirmRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/confirm\", request, true, false);\n  }\n\n  postEmergencyAccessInitiate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/initiate\", null, true, false);\n  }\n\n  postEmergencyAccessApprove(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/approve\", null, true, false);\n  }\n\n  postEmergencyAccessReject(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reject\", null, true, false);\n  }\n\n  async postEmergencyAccessTakeover(id: string): Promise<EmergencyAccessTakeoverResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/takeover\", null, true, true);\n    return new EmergencyAccessTakeoverResponse(r);\n  }\n\n  async postEmergencyAccessPassword(\n    id: string,\n    request: EmergencyAccessPasswordRequest\n  ): Promise<any> {\n    await this.send(\"POST\", \"/emergency-access/\" + id + \"/password\", request, true, true);\n  }\n\n  async postEmergencyAccessView(id: string): Promise<EmergencyAccessViewResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/view\", null, true, true);\n    return new EmergencyAccessViewResponse(r);\n  }\n\n  // Organization APIs\n\n  async getOrganization(id: string): Promise<OrganizationResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id, null, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async getOrganizationBilling(id: string): Promise<BillingResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/billing\", null, true, true);\n    return new BillingResponse(r);\n  }\n\n  async getOrganizationSubscription(id: string): Promise<OrganizationSubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/subscription\", null, true, true);\n    return new OrganizationSubscriptionResponse(r);\n  }\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  async getOrganizationLicense(id: string, installationId: string): Promise<any> {\n    return this.send(\n      \"GET\",\n      \"/organizations/\" + id + \"/license?installationId=\" + installationId,\n      null,\n      true,\n      true\n    );\n  }\n\n  async getOrganizationTaxInfo(id: string): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async getOrganizationSso(id: string): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/sso\", null, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganization(request: OrganizationCreateRequest): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations\", request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganization(\n    id: string,\n    request: OrganizationUpdateRequest\n  ): Promise<OrganizationResponse> {\n    const r = await this.send(\"PUT\", \"/organizations/\" + id, request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganizationTaxInfo(\n    id: string,\n    request: OrganizationTaxInfoUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/organizations/\" + id + \"/tax\", request, true, false);\n  }\n\n  postLeaveOrganization(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/leave\", null, true, false);\n  }\n\n  async postOrganizationLicense(data: FormData): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations/license\", data, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async postOrganizationLicenseUpdate(id: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/license\", data, true, false);\n  }\n\n  async postOrganizationApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async getOrganizationApiKeyInformation(\n    id: string\n  ): Promise<ListResponse<OrganizationApiKeyInformationResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + id + \"/api-key-information\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationApiKeyInformationResponse);\n  }\n\n  async postOrganizationRotateApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + id + \"/rotate-api-key\",\n      request,\n      true,\n      true\n    );\n    return new ApiKeyResponse(r);\n  }\n\n  async postOrganizationSso(\n    id: string,\n    request: OrganizationSsoRequest\n  ): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/sso\", request, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganizationUpgrade(\n    id: string,\n    request: OrganizationUpgradeRequest\n  ): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/upgrade\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationUpdateSubscription(\n    id: string,\n    request: OrganizationSubscriptionUpdateRequest\n  ): Promise<void> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/subscription\", request, true, false);\n  }\n\n  async postOrganizationSeat(id: string, request: SeatRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/seat\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationStorage(id: string, request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postOrganizationPayment(id: string, request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/payment\", request, true, false);\n  }\n\n  postOrganizationVerifyBank(id: string, request: VerifyBankRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/verify-bank\", request, true, false);\n  }\n\n  postOrganizationCancel(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/cancel\", null, true, false);\n  }\n\n  postOrganizationReinstate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/reinstate\", null, true, false);\n  }\n\n  deleteOrganization(id: string, request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/organizations/\" + id, request, true, false);\n  }\n\n  async getOrganizationKeys(id: string): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/keys\", null, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  async postOrganizationKeys(\n    id: string,\n    request: OrganizationKeysRequest\n  ): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/keys\", request, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  // Provider APIs\n\n  async postProviderSetup(id: string, request: ProviderSetupRequest) {\n    const r = await this.send(\"POST\", \"/providers/\" + id + \"/setup\", request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async getProvider(id: string) {\n    const r = await this.send(\"GET\", \"/providers/\" + id, null, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async putProvider(id: string, request: ProviderUpdateRequest) {\n    const r = await this.send(\"PUT\", \"/providers/\" + id, request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[]): Promise<any> {\n    const authHeader = await this.getActiveBearerToken();\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const response = await this.fetch(\n      new Request(this.environmentService.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      })\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getUserKeyFromKeyConnector(keyConnectorUrl: string): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      await this.doAuthRefresh();\n      accessToken = await this.tokenService.getToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersion()\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<boolean> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      })\n    );\n\n    if (response.status === 200) {\n      return true;\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false\n    );\n  }\n\n  protected async doAuthRefresh(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.doRefreshToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.doApiTokenRefresh();\n    }\n\n    throw new Error(\"Cannot refresh token, no refresh token or api keys are stored\");\n  }\n\n  protected async doRefreshToken(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const decodedToken = await this.tokenService.decodeToken();\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n      await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        tokenResponse.refreshToken,\n        null\n      );\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async doApiTokenRefresh(): Promise<void> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n\n    const tokenRequest = new ApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenRequestTwoFactor(),\n      deviceRequest\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    await this.tokenService.setToken(response.accessToken);\n  }\n\n  private async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void\n  ): Promise<any> {\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? this.environmentService.getApiUrl() : apiUrl;\n\n    const requestUrl = apiUrl + path;\n    // Prevent directory traversal from malicious paths\n    if (new URL(requestUrl).href !== requestUrl) {\n      return Promise.reject(\"Invalid request url path.\");\n    }\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    if (hasResponse && response.status === 200) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean\n  ): Promise<ErrorResponse> {\n    if (\n      authed &&\n      ((tokenError && response.status === 400) ||\n        response.status === 401 ||\n        response.status === 403)\n    ) {\n      await this.logoutCallback(true);\n      return null;\n    }\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private getCredentials(): RequestCredentials {\n    if (!this.isWebClient || this.environmentService.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { AppIdService as AppIdServiceAbstraction } from \"../abstractions/appId.service\";\nimport { StorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { Utils } from \"../misc/utils\";\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  constructor(private storageService: StorageService) {}\n\n  getAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"appId\");\n  }\n\n  getAnonymousAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"anonymousAppId\");\n  }\n\n  private async makeAndGetAppId(key: string) {\n    const existingId = await this.storageService.get<string>(key, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    if (existingId != null) {\n      return existingId;\n    }\n\n    const guid = Utils.newGuid();\n    await this.storageService.save(key, guid, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    return guid;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { throttle } from \"../misc/throttle\";\nimport { Utils } from \"../misc/utils\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  Api = 2,\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n}\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","import { AuthenticationStatus } from \"../../enums/authenticationStatus\";\nimport { KdfType } from \"../../enums/kdfType\";\nimport { UriMatchType } from \"../../enums/uriMatchType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CollectionData } from \"../data/collectionData\";\nimport { EventData } from \"../data/eventData\";\nimport { FolderData } from \"../data/folderData\";\nimport { OrganizationData } from \"../data/organizationData\";\nimport { PolicyData } from \"../data/policyData\";\nimport { ProviderData } from \"../data/providerData\";\nimport { SendData } from \"../data/sendData\";\nimport { CipherView } from \"../view/cipherView\";\nimport { CollectionView } from \"../view/collectionView\";\nimport { FolderView } from \"../view/folderView\";\nimport { SendView } from \"../view/sendView\";\n\nimport { EncString } from \"./encString\";\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { GeneratedPasswordHistory } from \"./generatedPasswordHistory\";\nimport { Policy } from \"./policy\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n}\n\nexport class DataEncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n  decrypted?: TDecrypted[];\n}\n\nexport class AccountData {\n  ciphers?: DataEncryptionPair<CipherData, CipherView> = new DataEncryptionPair<\n    CipherData,\n    CipherView\n  >();\n  folders?: DataEncryptionPair<FolderData, FolderView> = new DataEncryptionPair<\n    FolderData,\n    FolderView\n  >();\n  localData?: any;\n  sends?: DataEncryptionPair<SendData, SendView> = new DataEncryptionPair<SendData, SendView>();\n  collections?: DataEncryptionPair<CollectionData, CollectionView> = new DataEncryptionPair<\n    CollectionData,\n    CollectionView\n  >();\n  policies?: DataEncryptionPair<PolicyData, Policy> = new DataEncryptionPair<PolicyData, Policy>();\n  passwordGenerationHistory?: EncryptionPair<\n    GeneratedPasswordHistory[],\n    GeneratedPasswordHistory[]\n  > = new EncryptionPair<GeneratedPasswordHistory[], GeneratedPasswordHistory[]>();\n  addEditCipherInfo?: any;\n  eventCollection?: EventData[];\n  organizations?: { [id: string]: OrganizationData };\n  providers?: { [id: string]: ProviderData };\n}\n\nexport class AccountKeys {\n  cryptoMasterKey?: SymmetricCryptoKey;\n  cryptoMasterKeyAuto?: string;\n  cryptoMasterKeyB64?: string;\n  cryptoMasterKeyBiometric?: string;\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n  organizationKeys?: EncryptionPair<any, Map<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Map<string, SymmetricCryptoKey>\n  >();\n  providerKeys?: EncryptionPair<any, Map<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Map<string, SymmetricCryptoKey>\n  >();\n  privateKey?: EncryptionPair<string, ArrayBuffer> = new EncryptionPair<string, ArrayBuffer>();\n  legacyEtmKey?: SymmetricCryptoKey;\n  publicKey?: ArrayBuffer;\n  apiKeyClientSecret?: string;\n}\n\nexport class AccountProfile {\n  apiKeyClientId?: string;\n  authenticationStatus?: AuthenticationStatus;\n  convertAccountToKeyConnector?: boolean;\n  email?: string;\n  emailVerified?: boolean;\n  entityId?: string;\n  entityType?: string;\n  everBeenUnlocked?: boolean;\n  forcePasswordReset?: boolean;\n  hasPremiumPersonally?: boolean;\n  lastSync?: string;\n  userId?: string;\n  usesKeyConnector?: boolean;\n  keyHash?: string;\n  kdfIterations?: number;\n  kdfType?: KdfType;\n}\n\nexport class AccountSettings {\n  autoConfirmFingerPrints?: boolean;\n  autoFillOnPageLoadDefault?: boolean;\n  biometricLocked?: boolean;\n  biometricUnlock?: boolean;\n  clearClipboard?: number;\n  collapsedGroupings?: string[];\n  defaultUriMatch?: UriMatchType;\n  disableAddLoginNotification?: boolean;\n  disableAutoBiometricsPrompt?: boolean;\n  disableAutoTotpCopy?: boolean;\n  disableBadgeCounter?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n  disableGa?: boolean;\n  dontShowCardsCurrentTab?: boolean;\n  dontShowIdentitiesCurrentTab?: boolean;\n  enableAlwaysOnTop?: boolean;\n  enableAutoFillOnPageLoad?: boolean;\n  enableBiometric?: boolean;\n  enableFullWidth?: boolean;\n  enableGravitars?: boolean;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  equivalentDomains?: any;\n  minimizeOnCopyToClipboard?: boolean;\n  neverDomains?: { [id: string]: any };\n  passwordGenerationOptions?: any;\n  usernameGenerationOptions?: any;\n  generatorOptions?: any;\n  pinProtected?: EncryptionPair<string, EncString> = new EncryptionPair<string, EncString>();\n  protectedPin?: string;\n  settings?: any; // TODO: Merge whatever is going on here into the AccountSettings model properly\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string = \"lock\";\n}\n\nexport class AccountTokens {\n  accessToken?: string;\n  decodedToken?: any;\n  refreshToken?: string;\n  securityStamp?: string;\n}\n\nexport class Account {\n  data?: AccountData = new AccountData();\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n  settings?: AccountSettings = new AccountSettings();\n  tokens?: AccountTokens = new AccountTokens();\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      data: {\n        ...new AccountData(),\n        ...init?.data,\n      },\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n      settings: {\n        ...new AccountSettings(),\n        ...init?.settings,\n      },\n      tokens: {\n        ...new AccountTokens(),\n        ...init?.tokens,\n      },\n    });\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class AuthResult {\n  captchaSiteKey = \"\";\n  resetMasterPassword = false;\n  forcePasswordReset = false;\n  twoFactorProviders: Map<TwoFactorProviderType, { [key: string]: string }> = null;\n\n  get requiresCaptcha() {\n    return !Utils.isNullOrWhitespace(this.captchaSiteKey);\n  }\n\n  get requiresTwoFactor() {\n    return this.twoFactorProviders != null;\n  }\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Account, AccountProfile, AccountTokens } from \"../../models/domain/account\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../../models/domain/logInCredentials\";\nimport { DeviceRequest } from \"../../models/request/deviceRequest\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\nimport { KeysRequest } from \"../../models/request/keysRequest\";\nimport { IdentityCaptchaResponse } from \"../../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../../models/response/identityTwoFactorResponse\";\n\nexport abstract class LogInStrategy {\n  protected abstract tokenRequest: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest;\n  protected captchaBypassToken: string = null;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService\n  ) {}\n\n  abstract logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult>;\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string = null\n  ): Promise<AuthResult> {\n    this.tokenRequest.setTwoFactor(twoFactor);\n    return this.startLogIn();\n  }\n\n  protected async startLogIn(): Promise<AuthResult> {\n    this.twoFactorService.clearSelectedProvider();\n\n    const response = await this.apiService.postIdentityToken(this.tokenRequest);\n\n    if (response instanceof IdentityTwoFactorResponse) {\n      return this.processTwoFactorResponse(response);\n    } else if (response instanceof IdentityCaptchaResponse) {\n      return this.processCaptchaResponse(response);\n    } else if (response instanceof IdentityTokenResponse) {\n      return this.processTokenResponse(response);\n    }\n\n    throw new Error(\"Invalid response object.\");\n  }\n\n  protected onSuccessfulLogin(response: IdentityTokenResponse): Promise<void> {\n    // Implemented in subclass if required\n    return null;\n  }\n\n  protected async buildDeviceRequest() {\n    const appId = await this.appIdService.getAppId();\n    return new DeviceRequest(appId, this.platformUtilsService);\n  }\n\n  protected async buildTwoFactor(userProvidedTwoFactor?: TokenRequestTwoFactor) {\n    if (userProvidedTwoFactor != null) {\n      return userProvidedTwoFactor;\n    }\n\n    const storedTwoFactorToken = await this.tokenService.getTwoFactorToken();\n    if (storedTwoFactorToken != null) {\n      return new TokenRequestTwoFactor(TwoFactorProviderType.Remember, storedTwoFactorToken, false);\n    }\n\n    return new TokenRequestTwoFactor();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    const accountInformation = await this.tokenService.decodeToken(tokenResponse.accessToken);\n    await this.stateService.addAccount(\n      new Account({\n        profile: {\n          ...new AccountProfile(),\n          ...{\n            userId: accountInformation.sub,\n            email: accountInformation.email,\n            hasPremiumPersonally: accountInformation.premium,\n            kdfIterations: tokenResponse.kdfIterations,\n            kdfType: tokenResponse.kdf,\n          },\n        },\n        tokens: {\n          ...new AccountTokens(),\n          ...{\n            accessToken: tokenResponse.accessToken,\n            refreshToken: tokenResponse.refreshToken,\n          },\n        },\n      })\n    );\n  }\n\n  protected async processTokenResponse(response: IdentityTokenResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.resetMasterPassword = response.resetMasterPassword;\n    result.forcePasswordReset = response.forcePasswordReset;\n\n    await this.saveAccountInformation(response);\n\n    if (response.twoFactorToken != null) {\n      await this.tokenService.setTwoFactorToken(response);\n    }\n\n    const newSsoUser = response.key == null;\n    if (!newSsoUser) {\n      await this.cryptoService.setEncKey(response.key);\n      await this.cryptoService.setEncPrivateKey(\n        response.privateKey ?? (await this.createKeyPairForOldAccount())\n      );\n    }\n\n    await this.onSuccessfulLogin(response);\n\n    await this.stateService.setBiometricLocked(false);\n    this.messagingService.send(\"loggedIn\");\n\n    return result;\n  }\n\n  private async processTwoFactorResponse(response: IdentityTwoFactorResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.twoFactorProviders = response.twoFactorProviders2;\n    this.twoFactorService.setProviders(response);\n    this.captchaBypassToken = response.captchaToken ?? null;\n    return result;\n  }\n\n  private async processCaptchaResponse(response: IdentityCaptchaResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.captchaSiteKey = response.siteKey;\n    return result;\n  }\n\n  private async createKeyPairForOldAccount() {\n    try {\n      const [publicKey, privateKey] = await this.cryptoService.makeKeyPair();\n      await this.apiService.postAccountKeys(new KeysRequest(publicKey, privateKey.encryptedString));\n      return privateKey.encryptedString;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../../abstractions/environment.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { ApiLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class ApiLogInStrategy extends LogInStrategy {\n  tokenRequest: ApiTokenRequest;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    if (tokenResponse.apiUseKeyConnector) {\n      const keyConnectorUrl = this.environmentService.getKeyConnectorUrl();\n      await this.keyConnectorService.getAndSetKey(keyConnectorUrl);\n    }\n  }\n\n  async logIn(credentials: ApiLogInCredentials) {\n    this.tokenRequest = new ApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    await super.saveAccountInformation(tokenResponse);\n    await this.stateService.setApiKeyClientId(this.tokenRequest.clientId);\n    await this.stateService.setApiKeyClientSecret(this.tokenRequest.clientSecret);\n  }\n}\n","import { ClientType } from \"../../../enums/clientType\";\nimport { Utils } from \"../../../misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captchaProtectedRequest\";\nimport { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { AuthService } from \"../../abstractions/auth.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { HashPurpose } from \"../../enums/hashPurpose\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport { PasswordLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class PasswordLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get masterPasswordHash() {\n    return this.tokenRequest.masterPasswordHash;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n\n  private localHashedPassword: string;\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private authService: AuthService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin() {\n    await this.cryptoService.setKey(this.key);\n    await this.cryptoService.setKeyHash(this.localHashedPassword);\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  async logIn(credentials: PasswordLogInCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    this.key = await this.authService.makePreloginKey(masterPassword, email);\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    this.localHashedPassword = await this.cryptoService.hashPassword(\n      masterPassword,\n      this.key,\n      HashPurpose.LocalAuthorization\n    );\n    const hashedPassword = await this.cryptoService.hashPassword(masterPassword, this.key);\n\n    this.tokenRequest = new PasswordTokenRequest(\n      email,\n      hashedPassword,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { SsoLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class SsoLogInStrategy extends LogInStrategy {\n  tokenRequest: SsoTokenRequest;\n  orgId: string;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (tokenResponse.keyConnectorUrl != null) {\n      if (!newSsoUser) {\n        await this.keyConnectorService.getAndSetKey(tokenResponse.keyConnectorUrl);\n      } else {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(tokenResponse, this.orgId);\n      }\n    }\n  }\n\n  async logIn(credentials: SsoLogInCredentials) {\n    this.orgId = credentials.orgId;\n    this.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","export class PreloginRequest {\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/twoFactor.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { AuthenticationType } from \"../enums/authenticationType\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { ApiLogInStrategy } from \"../misc/logInStrategies/apiLogin.strategy\";\nimport { PasswordLogInStrategy } from \"../misc/logInStrategies/passwordLogin.strategy\";\nimport { SsoLogInStrategy } from \"../misc/logInStrategies/ssoLogin.strategy\";\nimport { AuthResult } from \"../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst sessionTimeoutLength = 2 * 60 * 1000; // 2 minutes\n\nexport class AuthService implements AuthServiceAbstraction {\n  get email(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy ? this.logInStrategy.email : null;\n  }\n\n  get masterPasswordHash(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy\n      ? this.logInStrategy.masterPasswordHash\n      : null;\n  }\n\n  private logInStrategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n  private sessionTimeout: any;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected keyConnectorService: KeyConnectorService,\n    protected environmentService: EnvironmentService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected i18nService: I18nService\n  ) {}\n\n  async logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult> {\n    this.clearState();\n\n    let strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n\n    if (credentials.type === AuthenticationType.Password) {\n      strategy = new PasswordLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this\n      );\n    } else if (credentials.type === AuthenticationType.Sso) {\n      strategy = new SsoLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.keyConnectorService\n      );\n    } else if (credentials.type === AuthenticationType.Api) {\n      strategy = new ApiLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.environmentService,\n        this.keyConnectorService\n      );\n    }\n\n    const result = await strategy.logIn(credentials as any);\n\n    if (result?.requiresTwoFactor) {\n      this.saveState(strategy);\n    }\n    return result;\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    if (this.logInStrategy == null) {\n      throw new Error(this.i18nService.t(\"sessionTimeout\"));\n    }\n\n    try {\n      const result = await this.logInStrategy.logInTwoFactor(twoFactor, captchaResponse);\n\n      // Only clear state if 2FA token has been accepted, otherwise we need to be able to try again\n      if (!result.requiresTwoFactor && !result.requiresCaptcha) {\n        this.clearState();\n      }\n      return result;\n    } catch (e) {\n      // API exceptions are okay, but if there are any unhandled client-side errors then clear state to be safe\n      if (!(e instanceof ErrorResponse)) {\n        this.clearState();\n      }\n      throw e;\n    }\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messagingService.send(\"loggedOut\");\n  }\n\n  authingWithApiKey(): boolean {\n    return this.logInStrategy instanceof ApiLogInStrategy;\n  }\n\n  authingWithSso(): boolean {\n    return this.logInStrategy instanceof SsoLogInStrategy;\n  }\n\n  authingWithPassword(): boolean {\n    return this.logInStrategy instanceof PasswordLogInStrategy;\n  }\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    const isAuthenticated = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!isAuthenticated) {\n      return AuthenticationStatus.LoggedOut;\n    }\n\n    // Keys aren't stored for a device that is locked or logged out\n    // Make sure we're logged in before checking this, otherwise we could mix up those states\n    const neverLock =\n      (await this.cryptoService.hasKeyStored(KeySuffixOptions.Auto, userId)) &&\n      !(await this.stateService.getEverBeenUnlocked({ userId: userId }));\n    if (neverLock) {\n      // TODO: This also _sets_ the key so when we check memory in the next line it finds a key.\n      // We should refactor here.\n      await this.cryptoService.getKey(KeySuffixOptions.Auto, userId);\n    }\n\n    const hasKeyInMemory = await this.cryptoService.hasKeyInMemory(userId);\n    if (!hasKeyInMemory) {\n      return AuthenticationStatus.Locked;\n    }\n\n    return AuthenticationStatus.Unlocked;\n  }\n\n  async makePreloginKey(masterPassword: string, email: string): Promise<SymmetricCryptoKey> {\n    email = email.trim().toLowerCase();\n    let kdf: KdfType = null;\n    let kdfIterations: number = null;\n    try {\n      const preloginResponse = await this.apiService.postPrelogin(new PreloginRequest(email));\n      if (preloginResponse != null) {\n        kdf = preloginResponse.kdf;\n        kdfIterations = preloginResponse.kdfIterations;\n      }\n    } catch (e) {\n      if (e == null || e.statusCode !== 404) {\n        throw e;\n      }\n    }\n    return this.cryptoService.makeKey(masterPassword, email, kdf, kdfIterations);\n  }\n\n  private saveState(strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy) {\n    this.logInStrategy = strategy;\n    this.startSessionTimeout();\n  }\n\n  private clearState() {\n    this.logInStrategy = null;\n    this.clearSessionTimeout();\n  }\n\n  private startSessionTimeout() {\n    this.clearSessionTimeout();\n    this.sessionTimeout = setTimeout(() => this.clearState(), sessionTimeoutLength);\n  }\n\n  private clearSessionTimeout() {\n    if (this.sessionTimeout != null) {\n      clearTimeout(this.sessionTimeout);\n    }\n  }\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export enum UriMatchType {\n  Domain = 0,\n  Host = 1,\n  StartsWith = 2,\n  Exact = 3,\n  RegularExpression = 4,\n  Never = 5,\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n","/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n    const caches = new Map<any, Map<string, Promise<any>>>();\n\n    const getCache = (obj: any) => {\n      let cache = caches.get(obj);\n      if (cache != null) {\n        return cache;\n      }\n      cache = new Map<string, Promise<any>>();\n      caches.set(obj, cache);\n      return cache;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","import { AttachmentResponse } from \"../response/attachmentResponse\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../api/cardApi\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldApi } from \"../api/fieldApi\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../api/identityApi\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\n\nexport class LoginUriData {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../api/loginApi\";\n\nimport { LoginUriData } from \"./loginUriData\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/passwordHistoryResponse\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherResponse } from \"../response/cipherResponse\";\n\nimport { AttachmentData } from \"./attachmentData\";\nimport { CardData } from \"./cardData\";\nimport { FieldData } from \"./fieldData\";\nimport { IdentityData } from \"./identityData\";\nimport { LoginData } from \"./loginData\";\nimport { PasswordHistoryData } from \"./passwordHistoryData\";\nimport { SecureNoteData } from \"./secureNoteData\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n}\n","import { Attachment } from \"../domain/attachment\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { View } from \"./view\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncString {\n  encryptedString?: string;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string\n  ) {\n    if (data != null) {\n      // data and header\n      const encType = encryptedStringOrType as EncryptionType;\n\n      if (iv != null) {\n        this.encryptedString = encType + \".\" + iv + \"|\" + data;\n      } else {\n        this.encryptedString = encType + \".\" + data;\n      }\n\n      // mac\n      if (mac != null) {\n        this.encryptedString += \"|\" + mac;\n      }\n\n      this.encryptionType = encType;\n      this.data = data;\n      this.iv = iv;\n      this.mac = mac;\n\n      return;\n    }\n\n    this.encryptedString = encryptedStringOrType as string;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const headerPieces = this.encryptedString.split(\".\");\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        this.encryptionType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return;\n      }\n    } else {\n      encPieces = this.encryptedString.split(\"|\");\n      this.encryptionType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    switch (this.encryptionType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encPieces.length !== 3) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encPieces.length !== 2) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        if (encPieces.length !== 1) {\n          return;\n        }\n\n        this.data = encPieces[0];\n        break;\n      default:\n        return;\n    }\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    let cryptoService: CryptoService;\n    const containerService = (Utils.global as any).bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      if (key == null) {\n        key = await cryptoService.getOrgKey(orgId);\n      }\n      this.decryptedValue = await cryptoService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n}\n","import { View } from \"../view/view\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","import { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class SymmetricCryptoKey {\n  key: ArrayBuffer;\n  encKey?: ArrayBuffer;\n  macKey?: ArrayBuffer;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: ArrayBuffer, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { AttachmentData } from \"../data/attachmentData\";\nimport { AttachmentView } from \"../view/attachmentView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.key != null) {\n      let cryptoService: CryptoService;\n      const containerService = (Utils.global as any).bitwardenContainerService;\n      if (containerService) {\n        cryptoService = containerService.getCryptoService();\n      } else {\n        throw new Error(\"global bitwardenContainerService not initialized.\");\n      }\n\n      try {\n        const orgKey = await cryptoService.getOrgKey(orgId);\n        const decValue = await cryptoService.decryptToBytes(this.key, orgKey ?? encKey);\n        view.key = new SymmetricCryptoKey(decValue);\n      } catch (e) {\n        // TODO: error?\n      }\n    }\n\n    return view;\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n    return a;\n  }\n}\n","import { LinkedIdType } from \"../enums/linkedIdType\";\nimport { ItemView } from \"../models/view/itemView\";\n\nexport class LinkedMetadata {\n  constructor(readonly propertyKey: string, private readonly _i18nKey?: string) {}\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name\n *    of the class property will be used as the i18n key.\n */\nexport function linkedFieldOption(id: LinkedIdType, i18nKey?: string) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));\n  };\n}\n","import { LinkedMetadata } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { View } from \"./view\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { CardLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName)\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, \"expirationMonth\")\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, \"expirationYear\")\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, \"securityCode\")\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand)\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number)\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    if (!this.expMonth && !this.expYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (this.expYear != null ? this.formatYear(this.expYear) : \"____\");\n    return exp;\n  }\n\n  private formatYear(year: string): string {\n    return year.length === 2 ? \"20\" + year : year;\n  }\n}\n","import { CardData } from \"../data/cardData\";\nimport { CardView } from \"../view/cardView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n}\n","import { IdentityLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title)\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName)\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1)\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2)\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3)\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, \"cityTown\")\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, \"stateProvince\")\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, \"zipPostalCode\")\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country)\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company)\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email)\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone)\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn)\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber)\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber)\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName)\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName)\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName)\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n}\n","import { LoginLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\nimport { Login } from \"../domain/login\";\n\nimport { ItemView } from \"./itemView\";\nimport { LoginUriView } from \"./loginUriView\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password)\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = null;\n  autofillOnPageLoad: boolean = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote } from \"../domain/secureNote\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachmentView\";\nimport { CardView } from \"./cardView\";\nimport { FieldView } from \"./fieldView\";\nimport { IdentityView } from \"./identityView\";\nimport { LoginView } from \"./loginView\";\nimport { PasswordHistoryView } from \"./passwordHistoryView\";\nimport { SecureNoteView } from \"./secureNoteView\";\nimport { View } from \"./view\";\n\nexport class CipherView implements View {\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: any;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item.linkedFieldOptions;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Field } from \"../domain/field\";\n\nimport { View } from \"./view\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldData } from \"../data/fieldData\";\nimport { FieldView } from \"../view/fieldView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"]\n    );\n    return f;\n  }\n}\n","import { IdentityData } from \"../data/identityData\";\nimport { IdentityView } from \"../view/identityView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { Utils } from \"../../misc/utils\";\nimport { LoginUri } from \"../domain/loginUri\";\n\nimport { View } from \"./view\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class LoginUriView implements View {\n  match: UriMatchType = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchType.RegularExpression) {\n      const uri = this.launchUri;\n      for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n        if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n          this._canLaunch = true;\n          return this._canLaunch;\n        }\n      }\n    }\n    this._canLaunch = false;\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriData } from \"../data/loginUriData\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  match: UriMatchType;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        match: null,\n      },\n      [\"match\"]\n    );\n    return u;\n  }\n}\n","import { LoginData } from \"../data/loginData\";\nimport { LoginView } from \"../view/loginView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { LoginUri } from \"./loginUri\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      []\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        view.uris.push(uri);\n      }\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    return l;\n  }\n}\n","import { Password } from \"../domain/password\";\n\nimport { View } from \"./view\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n}\n","import { PasswordHistoryData } from \"../data/passwordHistoryData\";\nimport { PasswordHistoryView } from \"../view/passwordHistoryView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteData } from \"../data/secureNoteData\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nimport Domain from \"./domainBase\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secureNote\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Cipher extends Domain {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: any;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(obj?: CipherData, localData: any = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"]\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  async decrypt(encKey?: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    const orgId = this.organizationId;\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(orgId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(orgId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(orgId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n}\n","import { CipherView } from \"../view/cipherView\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL)\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf()\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n\n  constructor(ids: string[]) {\n    this.ids = ids == null ? [] : ids;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachmentRequest\";\nimport { PasswordHistoryRequest } from \"./passwordHistoryRequest\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris = null;\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.uris != null) {\n          this.login.uris = cipher.login.uris.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            return uri;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipherWithIdRequest\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport Domain from \"../models/domain/domainBase\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/loginUri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secureNote\";\nimport { SortedCiphersCache } from \"../models/domain/sortedCiphersCache\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipherBulkRestoreRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { AttachmentView } from \"../models/view/attachmentView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { PasswordHistoryView } from \"../models/view/passwordHistoryView\";\nimport { View } from \"../models/view/view\";\n\nconst DomainMatchBlacklist = new Map<string, Set<string>>([\n  [\"google.com\", new Set([\"script.google.com\"])],\n]);\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private settingsService: SettingsService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private searchService: () => SearchService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async getDecryptedCipherCache(): Promise<CipherView[]> {\n    const decryptedCiphers = await this.stateService.getDecryptedCiphers();\n    return decryptedCiphers;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[]) {\n    await this.stateService.setDecryptedCiphers(value);\n    if (this.searchService != null) {\n      if (value == null) {\n        this.searchService().clearIndex();\n      } else {\n        this.searchService().indexCiphers();\n      }\n    }\n  }\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher: Cipher = null\n  ): Promise<Cipher> {\n    // Adjust password history\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        const existingCipher = await originalCipher.decrypt();\n        model.passwordHistory = existingCipher.passwordHistory || [];\n        if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n          if (\n            existingCipher.login.password != null &&\n            existingCipher.login.password !== \"\" &&\n            existingCipher.login.password !== model.login.password\n          ) {\n            const ph = new PasswordHistoryView();\n            ph.password = existingCipher.login.password;\n            ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n            model.passwordHistory.splice(0, 0, ph);\n          } else {\n            model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n          }\n        }\n        if (existingCipher.hasFields) {\n          const existingHiddenFields = existingCipher.fields.filter(\n            (f) =>\n              f.type === FieldType.Hidden &&\n              f.name != null &&\n              f.name !== \"\" &&\n              f.value != null &&\n              f.value !== \"\"\n          );\n          const hiddenFields =\n            model.fields == null\n              ? []\n              : model.fields.filter(\n                  (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\"\n                );\n          existingHiddenFields.forEach((ef) => {\n            const matchedField = hiddenFields.find((f) => f.name === ef.name);\n            if (matchedField == null || matchedField.value !== ef.value) {\n              const ph = new PasswordHistoryView();\n              ph.password = ef.name + \": \" + ef.value;\n              ph.lastUsedDate = new Date();\n              model.passwordHistory.splice(0, 0, ph);\n            }\n          });\n        }\n      }\n      if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n        model.passwordHistory = null;\n      } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n        // only save last 5 history\n        model.passwordHistory = model.passwordHistory.slice(0, 5);\n      }\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n\n    if (key == null && cipher.organizationId != null) {\n      key = await this.cryptoService.getOrgKey(cipher.organizationId);\n      if (key == null) {\n        throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n      }\n    }\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n\n    return cipher;\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await this.stateService.getLocalData();\n    return new Cipher(ciphers[id], localData ? localData[id] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await this.stateService.getLocalData();\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        response.push(new Cipher(ciphers[id], localData ? localData[id] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    const userId = await this.stateService.getUserId();\n    if ((await this.getDecryptedCipherCache()) != null) {\n      if (\n        this.searchService != null &&\n        (this.searchService().indexedEntityId ?? userId) !== userId\n      ) {\n        await this.searchService().indexCiphers(userId, await this.getDecryptedCipherCache());\n      }\n      return await this.getDecryptedCipherCache();\n    }\n\n    const decCiphers: CipherView[] = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: any[] = [];\n    const ciphers = await this.getAll();\n    ciphers.forEach(async (cipher) => {\n      promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n    });\n\n    await Promise.all(promises);\n    decCiphers.sort(this.getLocaleSortingFunction());\n    await this.setDecryptedCipherCache(decCiphers);\n    return decCiphers;\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchType = null\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return Promise.resolve([]);\n    }\n\n    const domain = Utils.getDomain(url);\n    const eqDomainsPromise =\n      domain == null\n        ? Promise.resolve([])\n        : this.settingsService.getEquivalentDomains().then((eqDomains: any[][]) => {\n            let matches: any[] = [];\n            eqDomains.forEach((eqDomain) => {\n              if (eqDomain.length && eqDomain.indexOf(domain) >= 0) {\n                matches = matches.concat(eqDomain);\n              }\n            });\n\n            if (!matches.length) {\n              matches.push(domain);\n            }\n\n            return matches;\n          });\n\n    const result = await Promise.all([eqDomainsPromise, this.getAllDecrypted()]);\n    const matchingDomains = result[0];\n    const ciphers = result[1];\n\n    if (defaultMatch == null) {\n      defaultMatch = await this.stateService.getDefaultUriMatch();\n      if (defaultMatch == null) {\n        defaultMatch = UriMatchType.Domain;\n      }\n    }\n\n    return ciphers.filter((cipher) => {\n      if (cipher.deletedDate != null) {\n        return false;\n      }\n      if (includeOtherTypes != null && includeOtherTypes.indexOf(cipher.type) > -1) {\n        return true;\n      }\n\n      if (url != null && cipher.type === CipherType.Login && cipher.login.uris != null) {\n        for (let i = 0; i < cipher.login.uris.length; i++) {\n          const u = cipher.login.uris[i];\n          if (u.uri == null) {\n            continue;\n          }\n\n          const match = u.match == null ? defaultMatch : u.match;\n          switch (match) {\n            case UriMatchType.Domain:\n              if (domain != null && u.domain != null && matchingDomains.indexOf(u.domain) > -1) {\n                if (DomainMatchBlacklist.has(u.domain)) {\n                  const domainUrlHost = Utils.getHost(url);\n                  if (!DomainMatchBlacklist.get(u.domain).has(domainUrlHost)) {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n              break;\n            case UriMatchType.Host: {\n              const urlHost = Utils.getHost(url);\n              if (urlHost != null && urlHost === Utils.getHost(u.uri)) {\n                return true;\n              }\n              break;\n            }\n            case UriMatchType.Exact:\n              if (url === u.uri) {\n                return true;\n              }\n              break;\n            case UriMatchType.StartsWith:\n              if (url.startsWith(u.uri)) {\n                return true;\n              }\n              break;\n            case UriMatchType.RegularExpression:\n              try {\n                const regex = new RegExp(u.uri, \"i\");\n                if (regex.test(url)) {\n                  return true;\n                }\n              } catch (e) {\n                this.logService.error(e);\n              }\n              break;\n            case UriMatchType.Never:\n            default:\n              break;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const ciphers = await this.apiService.getCiphersOrganization(organizationId);\n    if (ciphers != null && ciphers.data != null && ciphers.data.length) {\n      const decCiphers: CipherView[] = [];\n      const promises: any[] = [];\n      ciphers.data.forEach((r) => {\n        const data = new CipherData(r);\n        const cipher = new Cipher(data);\n        promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n      });\n      await Promise.all(promises);\n      decCiphers.sort(this.getLocaleSortingFunction());\n      return decCiphers;\n    } else {\n      return [];\n    }\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await this.stateService.getNeverDomains();\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.stateService.setNeverDomains(domains);\n  }\n\n  async saveWithServer(cipher: Cipher): Promise<any> {\n    let response: CipherResponse;\n    if (cipher.id == null) {\n      if (cipher.collectionIds != null) {\n        const request = new CipherCreateRequest(cipher);\n        response = await this.apiService.postCipherCreate(request);\n      } else {\n        const request = new CipherRequest(cipher);\n        response = await this.apiService.postCipher(request);\n      }\n      cipher.id = response.id;\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId)\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encrypt(cipher);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encrypt(cipher).then((c) => {\n          encCiphers.push(c);\n        })\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(cipher: Cipher, unencryptedFile: any, admin = false): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            admin\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin = false\n  ): Promise<Cipher> {\n    const key = await this.cryptoService.getOrgKey(cipher.organizationId);\n    const encFileName = await this.cryptoService.encrypt(filename, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(data, dataEncKey[0]);\n\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.uploadCipherAttachment(\n        admin,\n        uploadDataResponse,\n        encFileName,\n        encData\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          admin,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1]\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<any> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    await this.apiService.putCipherCollections(cipher.id, request);\n    const data = cipher.toCipherData();\n    await this.upsert(data);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<any> {\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    if (cipher instanceof CipherData) {\n      const c = cipher as CipherData;\n      ciphers[c.id] = c;\n    } else {\n      (cipher as CipherData[]).forEach((c) => {\n        ciphers[c.id] = c;\n      });\n    }\n\n    await this.replace(ciphers);\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }): Promise<any> {\n    await this.clearDecryptedCiphersState();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (ciphers[id] == null) {\n        return;\n      }\n      delete ciphers[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteCipher(id);\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.deleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[id].attachments.length; i++) {\n      if (ciphers[id].attachments[i].id === attachmentId) {\n        ciphers[id].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: string) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async softDeleteWithServer(id: string): Promise<any> {\n    await this.apiService.putDeleteCipher(id);\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.putDeleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      if (ciphers[c.id] == null) {\n        return;\n      }\n      ciphers[c.id].deletedDate = null;\n      ciphers[c.id].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async restoreWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putRestoreCipher(id);\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  async restoreManyWithServer(ids: string[]): Promise<any> {\n    const response = await this.apiService.putRestoreManyCiphers(new CipherBulkRestoreRequest(ids));\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  // Helpers\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" })\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const buf = await attachmentResponse.arrayBuffer();\n    const decBuf = await this.cryptoService.decryptFromBytes(buf, null);\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    const encFileName = await this.cryptoService.encrypt(attachmentView.fileName, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(decBuf, dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key\n            );\n            cipher.login.uris.push(loginUri);\n          }\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.stateService.getAutoFillOnPageLoadDefault();\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false)\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId?: string) {\n    await this.stateService.setEncryptedCiphers(null, { userId: userId });\n  }\n\n  private async clearDecryptedCiphersState(userId?: string) {\n    await this.stateService.setDecryptedCiphers(null, { userId: userId });\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  parent: T;\n  node: T;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, name: string, parent: T) {\n    this.parent = parent;\n    this.node = node;\n    this.node.name = name;\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"../models/domain/treeNode\";\n\nexport class ServiceUtils {\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: ITreeNodeObject,\n    delimiter: string\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end = partIndex === parts.length - 1;\n    const partName = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== parts[partIndex]) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node with the same name.\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i].node,\n        delimiter\n      );\n      return;\n    }\n\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      if (end) {\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      const newPartName = parts[partIndex] + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter\n      );\n    }\n  }\n\n  static getTreeNodeObject(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    id: string\n  ): TreeNode<ITreeNodeObject> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { CollectionDetailsResponse } from \"../response/collectionResponse\";\n\nexport class CollectionData {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n  }\n}\n","import { Collection } from \"../domain/collection\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\nimport { CollectionGroupDetailsResponse } from \"../response/collectionResponse\";\n\nimport { View } from \"./view\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n\n  constructor(c?: Collection | CollectionGroupDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n    }\n  }\n}\n","import { CollectionData } from \"../data/collectionData\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n      },\n      [\"id\", \"organizationId\", \"externalId\", \"readOnly\", \"hidePasswords\"]\n    );\n  }\n\n  decrypt(): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId\n    );\n  }\n}\n","import { CollectionService as CollectionServiceAbstraction } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ServiceUtils } from \"../misc/serviceUtils\";\nimport { Utils } from \"../misc/utils\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCollections(null, { userId: userId });\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(collection.decrypt().then((c) => decCollections.push(c)));\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    const collections = await this.stateService.getEncryptedCollections();\n    // eslint-disable-next-line\n    if (collections == null || !collections.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Collection(collections[id]);\n  }\n\n  async getAll(): Promise<Collection[]> {\n    const collections = await this.stateService.getEncryptedCollections();\n    const response: Collection[] = [];\n    for (const id in collections) {\n      // eslint-disable-next-line\n      if (collections.hasOwnProperty(id)) {\n        response.push(new Collection(collections[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    let decryptedCollections = await this.stateService.getDecryptedCollections();\n    if (decryptedCollections != null) {\n      return decryptedCollections;\n    }\n\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const collections = await this.getAll();\n    decryptedCollections = await this.decryptMany(collections);\n    await this.stateService.setDecryptedCollections(decryptedCollections);\n    return decryptedCollections;\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObject(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(collection: CollectionData | CollectionData[]): Promise<any> {\n    let collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      collections = {};\n    }\n\n    if (collection instanceof CollectionData) {\n      const c = collection as CollectionData;\n      collections[c.id] = c;\n    } else {\n      (collection as CollectionData[]).forEach((c) => {\n        collections[c.id] = c;\n      });\n    }\n\n    await this.replace(collections);\n  }\n\n  async replace(collections: { [id: string]: CollectionData }): Promise<any> {\n    await this.clearCache();\n    await this.stateService.setEncryptedCollections(collections);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearCache(userId);\n    await this.stateService.setEncryptedCollections(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      delete collections[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete collections[i];\n      });\n    }\n\n    await this.replace(collections);\n  }\n}\n","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","import * as hrtime from \"browser-hrtime\";\n\nimport { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/logLevelType\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null\n  ) {}\n\n  debug(message: string) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message);\n  }\n\n  info(message: string) {\n    this.write(LogLevelType.Info, message);\n  }\n\n  warning(message: string) {\n    this.write(LogLevelType.Warning, message);\n  }\n\n  error(message: string) {\n    this.write(LogLevelType.Error, message);\n  }\n\n  write(level: LogLevelType, message: string) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message);\n        break;\n      default:\n        break;\n    }\n  }\n\n  time(label = \"default\") {\n    if (!this.timersMap.has(label)) {\n      this.timersMap.set(label, hrtime());\n    }\n  }\n\n  timeEnd(label = \"default\"): [number, number] {\n    const elapsed = hrtime(this.timersMap.get(label));\n    this.timersMap.delete(label);\n    this.write(LogLevelType.Info, `${label}: ${elapsed[0] * 1000 + elapsed[1] / 10e6}ms`);\n    return elapsed;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\n\nexport class ContainerService {\n  constructor(private cryptoService: CryptoService) {}\n\n  // deprecated, use attachToGlobal instead\n  attachToWindow(win: any) {\n    this.attachToGlobal(win);\n  }\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  getCryptoService(): CryptoService {\n    return this.cryptoService;\n  }\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport {\n  EnvironmentService as EnvironmentServiceAbstraction,\n  Urls,\n} from \"../abstractions/environment.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\n\nexport class EnvironmentService implements EnvironmentServiceAbstraction {\n  private readonly urlsSubject = new Subject<Urls>();\n  urls: Observable<Urls> = this.urlsSubject;\n\n  private baseUrl: string;\n  private webVaultUrl: string;\n  private apiUrl: string;\n  private identityUrl: string;\n  private iconsUrl: string;\n  private notificationsUrl: string;\n  private eventsUrl: string;\n  private keyConnectorUrl: string;\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccount.subscribe(async () => {\n      await this.setUrlsFromStorage();\n    });\n  }\n\n  hasBaseUrl() {\n    return this.baseUrl != null;\n  }\n\n  getNotificationsUrl() {\n    if (this.notificationsUrl != null) {\n      return this.notificationsUrl;\n    }\n\n    if (this.baseUrl != null) {\n      return this.baseUrl + \"/notifications\";\n    }\n\n    return \"https://notifications.bitwarden.com\";\n  }\n\n  getWebVaultUrl() {\n    if (this.webVaultUrl != null) {\n      return this.webVaultUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl;\n    }\n    return \"https://vault.bitwarden.com\";\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  getIconsUrl() {\n    if (this.iconsUrl != null) {\n      return this.iconsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/icons\";\n    }\n\n    return \"https://icons.bitwarden.net\";\n  }\n\n  getApiUrl() {\n    if (this.apiUrl != null) {\n      return this.apiUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/api\";\n    }\n\n    return \"https://api.bitwarden.com\";\n  }\n\n  getIdentityUrl() {\n    if (this.identityUrl != null) {\n      return this.identityUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/identity\";\n    }\n\n    return \"https://identity.bitwarden.com\";\n  }\n\n  getEventsUrl() {\n    if (this.eventsUrl != null) {\n      return this.eventsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/events\";\n    }\n\n    return \"https://events.bitwarden.com\";\n  }\n\n  getKeyConnectorUrl() {\n    return this.keyConnectorUrl;\n  }\n\n  async setUrlsFromStorage(): Promise<void> {\n    const urls: any = await this.stateService.getEnvironmentUrls();\n    const envUrls = new EnvironmentUrls();\n\n    this.baseUrl = envUrls.base = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = envUrls.api = urls.api;\n    this.identityUrl = envUrls.identity = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = envUrls.events = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n  }\n\n  async setUrls(urls: Urls): Promise<Urls> {\n    urls.base = this.formatUrl(urls.base);\n    urls.webVault = this.formatUrl(urls.webVault);\n    urls.api = this.formatUrl(urls.api);\n    urls.identity = this.formatUrl(urls.identity);\n    urls.icons = this.formatUrl(urls.icons);\n    urls.notifications = this.formatUrl(urls.notifications);\n    urls.events = this.formatUrl(urls.events);\n    urls.keyConnector = this.formatUrl(urls.keyConnector);\n\n    await this.stateService.setEnvironmentUrls({\n      base: urls.base,\n      api: urls.api,\n      identity: urls.identity,\n      webVault: urls.webVault,\n      icons: urls.icons,\n      notifications: urls.notifications,\n      events: urls.events,\n      keyConnector: urls.keyConnector,\n    });\n\n    this.baseUrl = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = urls.api;\n    this.identityUrl = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n\n    this.urlsSubject.next(urls);\n\n    return urls;\n  }\n\n  getUrls() {\n    return {\n      base: this.baseUrl,\n      webVault: this.webVaultUrl,\n      api: this.apiUrl,\n      identity: this.identityUrl,\n      icons: this.iconsUrl,\n      notifications: this.notificationsUrl,\n      events: this.eventsUrl,\n      keyConnector: this.keyConnectorUrl,\n    };\n  }\n\n  private formatUrl(url: string): string {\n    if (url == null || url === \"\") {\n      return null;\n    }\n\n    url = url.replace(/\\/+$/g, \"\");\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n      url = \"https://\" + url;\n    }\n\n    return url.trim();\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { EventService as EventServiceAbstraction } from \"../abstractions/event.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EventType } from \"../enums/eventType\";\nimport { EventData } from \"../models/data/eventData\";\nimport { EventRequest } from \"../models/request/eventRequest\";\n\nexport class EventService implements EventServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private apiService: ApiService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private logService: LogService,\n    private organizationService: OrganizationService\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.uploadEvents();\n      setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds\n    }\n  }\n\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false\n  ): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated();\n    if (!authed) {\n      return;\n    }\n    const organizations = await this.organizationService.getAll();\n    if (organizations == null) {\n      return;\n    }\n    const orgIds = new Set<string>(organizations.filter((o) => o.useEvents).map((o) => o.id));\n    if (orgIds.size === 0) {\n      return;\n    }\n    if (cipherId != null) {\n      const cipher = await this.cipherService.get(cipherId);\n      if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {\n        return;\n      }\n    }\n    let eventCollection = await this.stateService.getEventCollection();\n    if (eventCollection == null) {\n      eventCollection = [];\n    }\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    eventCollection.push(event);\n    await this.stateService.setEventCollection(eventCollection);\n    if (uploadImmediately) {\n      await this.uploadEvents();\n    }\n  }\n\n  async uploadEvents(userId?: string): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n    const eventCollection = await this.stateService.getEventCollection({ userId: userId });\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request);\n      this.clearEvents(userId);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async clearEvents(userId?: string): Promise<any> {\n    await this.stateService.setEventCollection(null, { userId: userId });\n  }\n}\n","export enum KdfType {\n  PBKDF2_SHA256 = 0,\n}\n\nexport const DEFAULT_KDF_TYPE = KdfType.PBKDF2_SHA256;\nexport const DEFAULT_KDF_ITERATIONS = 100000;\nexport const SEND_KDF_ITERATIONS = 100000;\n","import { Card as CardDomain } from \"../domain/card\";\nimport { EncString } from \"../domain/encString\";\nimport { CardView } from \"../view/cardView\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof CardView) {\n      this.cardholderName = o.cardholderName;\n      this.brand = o.brand;\n      this.number = o.number;\n      this.expMonth = o.expMonth;\n      this.expYear = o.expYear;\n      this.code = o.code;\n    } else {\n      this.cardholderName = o.cardholderName?.encryptedString;\n      this.brand = o.brand?.encryptedString;\n      this.number = o.number?.encryptedString;\n      this.expMonth = o.expMonth?.encryptedString;\n      this.expYear = o.expYear?.encryptedString;\n      this.code = o.code?.encryptedString;\n    }\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { EncString } from \"../domain/encString\";\nimport { Field as FieldDomain } from \"../domain/field\";\nimport { FieldView } from \"../view/fieldView\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof FieldView) {\n      this.name = o.name;\n      this.value = o.value;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.value = o.value?.encryptedString;\n    }\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Identity as IdentityDomain } from \"../domain/identity\";\nimport { IdentityView } from \"../view/identityView\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof IdentityView) {\n      this.title = o.title;\n      this.firstName = o.firstName;\n      this.middleName = o.middleName;\n      this.lastName = o.lastName;\n      this.address1 = o.address1;\n      this.address2 = o.address2;\n      this.address3 = o.address3;\n      this.city = o.city;\n      this.state = o.state;\n      this.postalCode = o.postalCode;\n      this.country = o.country;\n      this.company = o.company;\n      this.email = o.email;\n      this.phone = o.phone;\n      this.ssn = o.ssn;\n      this.username = o.username;\n      this.passportNumber = o.passportNumber;\n      this.licenseNumber = o.licenseNumber;\n    } else {\n      this.title = o.title?.encryptedString;\n      this.firstName = o.firstName?.encryptedString;\n      this.middleName = o.middleName?.encryptedString;\n      this.lastName = o.lastName?.encryptedString;\n      this.address1 = o.address1?.encryptedString;\n      this.address2 = o.address2?.encryptedString;\n      this.address3 = o.address3?.encryptedString;\n      this.city = o.city?.encryptedString;\n      this.state = o.state?.encryptedString;\n      this.postalCode = o.postalCode?.encryptedString;\n      this.country = o.country?.encryptedString;\n      this.company = o.company?.encryptedString;\n      this.email = o.email?.encryptedString;\n      this.phone = o.phone?.encryptedString;\n      this.ssn = o.ssn?.encryptedString;\n      this.username = o.username?.encryptedString;\n      this.passportNumber = o.passportNumber?.encryptedString;\n      this.licenseNumber = o.licenseNumber?.encryptedString;\n    }\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { EncString } from \"../domain/encString\";\nimport { LoginUri as LoginUriDomain } from \"../domain/loginUri\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof LoginUriView) {\n      this.uri = o.uri;\n    } else {\n      this.uri = o.uri?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Login as LoginDomain } from \"../domain/login\";\nimport { LoginView } from \"../view/loginView\";\n\nimport { LoginUriExport } from \"./loginUriExport\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      if (o instanceof LoginView) {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      } else {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      }\n    }\n\n    if (o instanceof LoginView) {\n      this.username = o.username;\n      this.password = o.password;\n      this.totp = o.totp;\n    } else {\n      this.username = o.username?.encryptedString;\n      this.password = o.password?.encryptedString;\n      this.totp = o.totp?.encryptedString;\n    }\n  }\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","export enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  // Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote as SecureNoteDomain } from \"../domain/secureNote\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { EncString } from \"../domain/encString\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CardExport } from \"./cardExport\";\nimport { FieldExport } from \"./fieldExport\";\nimport { IdentityExport } from \"./identityExport\";\nimport { LoginExport } from \"./loginExport\";\nimport { SecureNoteExport } from \"./secureNoteExport\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    if (o instanceof CipherView) {\n      this.name = o.name;\n      this.notes = o.notes;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.notes = o.notes?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      if (o instanceof CipherView) {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      } else {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      }\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n  }\n}\n","import { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CipherExport } from \"./cipherExport\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { EncString } from \"../domain/encString\";\nimport { CollectionView } from \"../view/collectionView\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    if (o instanceof CollectionView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport { CollectionExport } from \"./collectionExport\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\nimport { EventView } from \"../view/eventView\";\n\nexport class EventExport {\n  message: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: string;\n  installationId: string;\n\n  constructor(event: EventView) {\n    this.message = event.humanReadableMessage;\n    this.appIcon = event.appIcon;\n    this.appName = event.appName;\n    this.userId = event.userId;\n    this.userName = event.userName;\n    this.userEmail = event.userEmail;\n    this.date = event.date;\n    this.ip = event.ip;\n    this.type = EventType[event.type];\n    this.installationId = event.installationId;\n  }\n}\n","import { Folder } from \"../domain/folder\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\n\nimport { View } from \"./view\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n}\n","import { FolderData } from \"../data/folderData\";\nimport { FolderView } from \"../view/folderView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"]\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null\n    );\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    if (o instanceof FolderView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n  }\n}\n","import { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nimport { FolderExport } from \"./folderExport\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","import * as papa from \"papaparse\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport {\n  ExportFormat,\n  ExportService as ExportServiceAbstraction,\n} from \"../abstractions/export.service\";\nimport { FolderService } from \"../abstractions/folder.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { DEFAULT_KDF_ITERATIONS, KdfType } from \"../enums/kdfType\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Collection } from \"../models/domain/collection\";\nimport { Folder } from \"../models/domain/folder\";\nimport { CipherWithIdExport as CipherExport } from \"../models/export/cipherWithIdsExport\";\nimport { CollectionWithIdExport as CollectionExport } from \"../models/export/collectionWithIdExport\";\nimport { EventExport } from \"../models/export/eventExport\";\nimport { FolderWithIdExport as FolderExport } from \"../models/export/folderWithIdExport\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { EventView } from \"../models/view/eventView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nexport class ExportService implements ExportServiceAbstraction {\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", organizationId?: string): Promise<string> {\n    if (organizationId) {\n      return await this.getOrganizationExport(organizationId, format);\n    }\n\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    } else {\n      return this.getDecryptedExport(format);\n    }\n  }\n\n  async getPasswordProtectedExport(password: string, organizationId?: string): Promise<string> {\n    const clearText = organizationId\n      ? await this.getOrganizationExport(organizationId, \"json\")\n      : await this.getExport(\"json\");\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const kdfIterations = DEFAULT_KDF_ITERATIONS;\n    const key = await this.cryptoService.makePinKey(\n      password,\n      salt,\n      KdfType.PBKDF2_SHA256,\n      kdfIterations\n    );\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfIterations: kdfIterations,\n      kdfType: KdfType.PBKDF2_SHA256,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\"\n  ): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getOrganizationEncryptedExport(organizationId);\n    } else {\n      return this.getOrganizationDecryptedExport(organizationId, format);\n    }\n  }\n\n  async getEventExport(events: EventView[]): Promise<string> {\n    return papa.unparse(events.map((e) => new EventExport(e)));\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllDecrypted().then((folders) => {\n        decFolders = folders;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const foldersMap = new Map<string, FolderView>();\n      decFolders.forEach((f) => {\n        if (f.id != null) {\n          foldersMap.set(f.id, f);\n        }\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n        if (c.organizationId != null) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.folder =\n          c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n        cipher.favorite = c.favorite ? 1 : null;\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        folders: [],\n        items: [],\n      };\n\n      decFolders.forEach((f) => {\n        if (f.id == null) {\n          return;\n        }\n        const folder = new FolderExport();\n        folder.build(f);\n        jsonDoc.folders.push(folder);\n      });\n\n      decCiphers.forEach((c) => {\n        if (c.organizationId != null) {\n          return;\n        }\n        const cipher = new CipherExport();\n        cipher.build(c);\n        cipher.collectionIds = null;\n        jsonDoc.items.push(cipher);\n      });\n\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAll().then((f) => {\n        folders = f;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\"\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((collections) => {\n        const collectionPromises: any = [];\n        if (collections != null && collections.data != null && collections.data.length > 0) {\n          collections.data.forEach((c) => {\n            const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n            collectionPromises.push(\n              collection.decrypt().then((decCol) => {\n                decCollections.push(decCol);\n              })\n            );\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((ciphers) => {\n        const cipherPromises: any = [];\n        if (ciphers != null && ciphers.data != null && ciphers.data.length > 0) {\n          ciphers.data\n            .filter((c) => c.deletedDate === null)\n            .forEach((c) => {\n              const cipher = new Cipher(new CipherData(c));\n              cipherPromises.push(\n                cipher.decrypt().then((decCipher) => {\n                  decCiphers.push(decCipher);\n                })\n              );\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const collectionsMap = new Map<string, CollectionView>();\n      decCollections.forEach((c) => {\n        collectionsMap.set(c.id, c);\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.collections = [];\n        if (c.collectionIds != null) {\n          cipher.collections = c.collectionIds\n            .filter((id) => collectionsMap.has(id))\n            .map((id) => collectionsMap.get(id).name);\n        }\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        collections: [],\n        items: [],\n      };\n\n      decCollections.forEach((c) => {\n        const collection = new CollectionExport();\n        collection.build(c);\n        jsonDoc.collections.push(collection);\n      });\n\n      decCiphers.forEach((c) => {\n        const cipher = new CipherExport();\n        cipher.build(c);\n        jsonDoc.items.push(cipher);\n      });\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        const collectionPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        const cipherPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n\n  private buildCommonCipher(cipher: any, c: CipherView) {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f: any) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import { LogService } from \"../abstractions/log.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n      ? a.month - b.month\n      : a.day !== b.day\n      ? a.day - b.day\n      : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nexport class BitwardenFileUploadService {\n  constructor(private apiService: ApiService) {}\n\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"../abstractions/fileUpload.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { FileUploadType } from \"../enums/fileUploadType\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\n\nimport { AzureFileUploadService } from \"./azureFileUpload.service\";\nimport { BitwardenFileUploadService } from \"./bitwardenFileUpload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(private logService: LogService, private apiService: ApiService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService(apiService);\n  }\n\n  async uploadSendFile(\n    uploadData: SendFileUploadDataResponse,\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) =>\n              this.apiService.postSendFile(\n                uploadData.sendResponse.id,\n                uploadData.sendResponse.file.id,\n                fd\n              )\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewSendFileUploadUrl(\n              uploadData.sendResponse.id,\n              uploadData.sendResponse.file.id\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await this.apiService.deleteSend(uploadData.sendResponse.id);\n      throw e;\n    }\n  }\n\n  async uploadCipherAttachment(\n    admin: boolean,\n    uploadData: AttachmentUploadDataResponse,\n    encryptedFileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    const response = admin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            encryptedFileName.encryptedString,\n            encryptedFileData,\n            (fd) => this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, fd)\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewAttachmentUploadUrl(\n              response.id,\n              uploadData.attachmentId\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type.\");\n      }\n    } catch (e) {\n      if (admin) {\n        await this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        await this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n      throw e;\n    }\n  }\n}\n","import { FolderResponse } from \"../response/folderResponse\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: FolderResponse) {\n    this.name = response.name;\n    this.id = response.id;\n    this.revisionDate = response.revisionDate;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService as FolderServiceAbstraction } from \"../abstractions/folder.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ServiceUtils } from \"../misc/serviceUtils\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { Folder } from \"../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { FolderRequest } from \"../models/request/folderRequest\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport { FolderView } from \"../models/view/folderView\";\n\nconst NestingDelimiter = \"/\";\n\nexport class FolderService implements FolderServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedFolders(null, { userId: userId });\n  }\n\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = await this.stateService.getEncryptedFolders();\n    // eslint-disable-next-line\n    if (folders == null || !folders.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Folder(folders[id]);\n  }\n\n  async getAll(): Promise<Folder[]> {\n    const folders = await this.stateService.getEncryptedFolders();\n    const response: Folder[] = [];\n    for (const id in folders) {\n      // eslint-disable-next-line\n      if (folders.hasOwnProperty(id)) {\n        response.push(new Folder(folders[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<FolderView[]> {\n    const decryptedFolders = await this.stateService.getDecryptedFolders();\n    if (decryptedFolders != null) {\n      return decryptedFolders;\n    }\n\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const decFolders: FolderView[] = [];\n    const promises: Promise<any>[] = [];\n    const folders = await this.getAll();\n    folders.forEach((folder) => {\n      promises.push(folder.decrypt().then((f) => decFolders.push(f)));\n    });\n\n    await Promise.all(promises);\n    decFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decFolders.push(noneFolder);\n\n    await this.stateService.setDecryptedFolders(decFolders);\n    return decFolders;\n  }\n\n  async getAllNested(folders?: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    folders = folders ?? (await this.getAllDecrypted());\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObject(folders, id) as TreeNode<FolderView>;\n  }\n\n  async saveWithServer(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.apiService.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.apiService.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.upsert(data);\n  }\n\n  async upsert(folder: FolderData | FolderData[]): Promise<any> {\n    let folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      folders = {};\n    }\n\n    if (folder instanceof FolderData) {\n      const f = folder as FolderData;\n      folders[f.id] = f;\n    } else {\n      (folder as FolderData[]).forEach((f) => {\n        folders[f.id] = f;\n      });\n    }\n\n    await this.stateService.setDecryptedFolders(null);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async replace(folders: { [id: string]: FolderData }): Promise<any> {\n    await this.stateService.setDecryptedFolders(null);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setDecryptedFolders(null, { userId: userId });\n    await this.stateService.setEncryptedFolders(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (folders[id] == null) {\n        return;\n      }\n      delete folders[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete folders[i];\n      });\n    }\n\n    await this.stateService.setDecryptedFolders(null);\n    await this.stateService.setEncryptedFolders(folders);\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers != null) {\n      const updates: CipherData[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        this.cipherService.upsert(updates);\n      }\n    }\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteFolder(id);\n    await this.delete(id);\n  }\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n","import { KdfType } from \"../../../enums/kdfType\";\nimport { KeysRequest } from \"../keysRequest\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  orgIdentifier: string;\n\n  constructor(\n    key: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    orgIdentifier: string,\n    keys: KeysRequest\n  ) {\n    this.key = key;\n    this.kdf = kdf;\n    this.kdfIterations = kdfIterations;\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { Utils } from \"../misc/utils\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private logoutCallback: (expired: boolean, userId?: string) => void\n  ) {}\n\n  setUsesKeyConnector(usesKeyConnector: boolean) {\n    return this.stateService.setUsesKeyConnector(usesKeyConnector);\n  }\n\n  async getUsesKeyConnector(): Promise<boolean> {\n    return await this.stateService.getUsesKeyConnector();\n  }\n\n  async userNeedsMigration() {\n    const loggedInUsingSso = await this.tokenService.getIsExternal();\n    const requiredByOrganization = (await this.getManagingOrganization()) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector());\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser() {\n    const organization = await this.getManagingOrganization();\n    const key = await this.cryptoService.getKey();\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(key.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  async getAndSetKey(url: string) {\n    try {\n      const userKeyResponse = await this.apiService.getUserKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(userKeyResponse.key);\n      const k = new SymmetricCryptoKey(keyArr);\n      await this.cryptoService.setKey(k);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization() {\n    const orgs = await this.organizationService.getAll();\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(tokenResponse: IdentityTokenResponse, orgId: string) {\n    const { kdf, kdfIterations, keyConnectorUrl } = tokenResponse;\n    const password = await this.cryptoFunctionService.randomBytes(64);\n\n    const k = await this.cryptoService.makeKey(\n      Utils.fromBufferToB64(password),\n      await this.tokenService.getEmail(),\n      kdf,\n      kdfIterations\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(k.encKeyB64);\n    await this.cryptoService.setKey(k);\n\n    const encKey = await this.cryptoService.makeEncKey(k);\n    await this.cryptoService.setEncKey(encKey[1].encryptedString);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair();\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      encKey[1].encryptedString,\n      kdf,\n      kdfIterations,\n      orgId,\n      keys\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean) {\n    await this.stateService.setConvertAccountToKeyConnector(status);\n  }\n\n  async getConvertAccountRequired(): Promise<boolean> {\n    return await this.stateService.getConvertAccountToKeyConnector();\n  }\n\n  async removeConvertAccountRequired() {\n    await this.stateService.setConvertAccountToKeyConnector(null);\n  }\n\n  async clear() {\n    await this.removeConvertAccountRequired();\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      this.logoutCallback(false);\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n}\n","import { NotificationType } from \"../../enums/notificationType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n}\n","export enum Permissions {\n  AccessEventLogs,\n  AccessImportExport,\n  AccessReports,\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  ManageAllCollections,\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  ManageAssignedCollections,\n  ManageGroups,\n  ManageOrganization,\n  ManagePolicies,\n  ManageProvider,\n  ManageUsers,\n  ManageUsersPassword,\n  CreateNewCollections,\n  EditAnyCollection,\n  DeleteAnyCollection,\n  EditAssignedCollections,\n  DeleteAssignedCollections,\n  ManageSso,\n  ManageBilling,\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService } from \"../abstractions/auth.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService } from \"../abstractions/sync.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { NotificationType } from \"../enums/notificationType\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimer: any = null;\n\n  constructor(\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private logService: LogService,\n    private stateService: StateService,\n    private authService: AuthService\n  ) {\n    this.environmentService.urls.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = this.environmentService.getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data))\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          this.logoutCallback(true);\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    if (this.reconnectTimer != null) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { Permissions } from \"../../enums/permissions\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { OrganizationData } from \"../data/organizationData\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useResetPassword = obj.useResetPassword;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.isProviderUser = obj.isProviderUser;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.planProductType = obj.planProductType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n  }\n\n  get canAccess() {\n    if (this.type === OrganizationUserType.Owner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  get isManager() {\n    return (\n      this.type === OrganizationUserType.Manager ||\n      this.type === OrganizationUserType.Owner ||\n      this.type === OrganizationUserType.Admin\n    );\n  }\n\n  get isAdmin() {\n    return this.type === OrganizationUserType.Owner || this.type === OrganizationUserType.Admin;\n  }\n\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return this.isAdmin || this.permissions.accessEventLogs;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.createNewCollections ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canEditAnyCollection() {\n    return (\n      this.isAdmin || (this.permissions.editAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canDeleteAnyCollection() {\n    return (\n      this.isAdmin ||\n      (this.permissions.deleteAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canViewAllCollections() {\n    return this.canCreateNewCollections || this.canEditAnyCollection || this.canDeleteAnyCollection;\n  }\n\n  get canEditAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.editAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canDeleteAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.deleteAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canViewAssignedCollections() {\n    return this.canDeleteAssignedCollections || this.canEditAssignedCollections;\n  }\n\n  get canManageGroups() {\n    return this.isAdmin || this.permissions.manageGroups;\n  }\n\n  get canManageSso() {\n    return this.isAdmin || this.permissions.manageSso;\n  }\n\n  get canManagePolicies() {\n    return this.isAdmin || this.permissions.managePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  hasAnyPermission(permissions: Permissions[]) {\n    const specifiedPermissions =\n      (permissions.includes(Permissions.AccessEventLogs) && this.canAccessEventLogs) ||\n      (permissions.includes(Permissions.AccessImportExport) && this.canAccessImportExport) ||\n      (permissions.includes(Permissions.AccessReports) && this.canAccessReports) ||\n      (permissions.includes(Permissions.CreateNewCollections) && this.canCreateNewCollections) ||\n      (permissions.includes(Permissions.EditAnyCollection) && this.canEditAnyCollection) ||\n      (permissions.includes(Permissions.DeleteAnyCollection) && this.canDeleteAnyCollection) ||\n      (permissions.includes(Permissions.EditAssignedCollections) &&\n        this.canEditAssignedCollections) ||\n      (permissions.includes(Permissions.DeleteAssignedCollections) &&\n        this.canDeleteAssignedCollections) ||\n      (permissions.includes(Permissions.ManageGroups) && this.canManageGroups) ||\n      (permissions.includes(Permissions.ManageOrganization) && this.isOwner) ||\n      (permissions.includes(Permissions.ManagePolicies) && this.canManagePolicies) ||\n      (permissions.includes(Permissions.ManageUsers) && this.canManageUsers) ||\n      (permissions.includes(Permissions.ManageUsersPassword) && this.canManageUsersPassword) ||\n      (permissions.includes(Permissions.ManageSso) && this.canManageSso) ||\n      (permissions.includes(Permissions.ManageBilling) && this.canManageBilling);\n\n    return specifiedPermissions && (this.enabled || this.isOwner);\n  }\n\n  get canManageBilling() {\n    return this.isOwner && (this.isProviderUser || !this.hasProvider);\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n}\n","import { OrganizationService as OrganizationServiceAbstraction } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport class OrganizationService implements OrganizationServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Organization> {\n    const organizations = await this.stateService.getOrganizations();\n    // eslint-disable-next-line\n    if (organizations == null || !organizations.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Organization(organizations[id]);\n  }\n\n  async getByIdentifier(identifier: string): Promise<Organization> {\n    const organizations = await this.getAll();\n    if (organizations == null || organizations.length === 0) {\n      return null;\n    }\n\n    return organizations.find((o) => o.identifier === identifier);\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    const organizations = await this.stateService.getOrganizations({ userId: userId });\n    const response: Organization[] = [];\n    for (const id in organizations) {\n      // eslint-disable-next-line\n      if (organizations.hasOwnProperty(id) && !organizations[id].isProviderUser) {\n        response.push(new Organization(organizations[id]));\n      }\n    }\n    return response;\n  }\n\n  async save(organizations: { [id: string]: OrganizationData }) {\n    return await this.stateService.setOrganizations(organizations);\n  }\n\n  async canManageSponsorships(): Promise<boolean> {\n    const orgs = await this.getAll();\n    return orgs.some(\n      (o) => o.familySponsorshipAvailable || o.familySponsorshipFriendlyName !== null\n    );\n  }\n\n  async hasOrganizations(userId?: string): Promise<boolean> {\n    const organizations = await this.getAll(userId);\n    return organizations.length > 0;\n  }\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EEFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  defaultType = \"\";\n  minLength = 0;\n  useUppercase = false;\n  useLowercase = false;\n  useNumbers = false;\n  numberCount = 0;\n  useSpecial = false;\n  specialCount = 0;\n  minNumberWords = 0;\n  capitalize = false;\n  includeNumber = false;\n\n  inEffect() {\n    return (\n      this.defaultType !== \"\" ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"../abstractions/passwordGeneration.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncString } from \"../models/domain/encString\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { PasswordGeneratorPolicyOptions } from \"../models/domain/passwordGeneratorPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\n\nconst DefaultOptions = {\n  length: 14,\n  ambiguous: false,\n  number: true,\n  minNumber: 1,\n  uppercase: true,\n  minUppercase: 0,\n  lowercase: true,\n  minLowercase: 0,\n  special: false,\n  minSpecial: 1,\n  type: \"password\",\n  numWords: 3,\n  wordSeparator: \"-\",\n  capitalize: false,\n  includeNumber: false,\n};\n\nconst MaxPasswordsInHistory = 100;\n\nexport class PasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private policyService: PolicyService,\n    private stateService: StateService\n  ) {}\n\n  async generatePassword(options: any): Promise<string> {\n    // overload defaults with given options\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.type === \"passphrase\") {\n      return this.generatePassphrase(options);\n    }\n\n    // sanitize\n    this.sanitizePasswordLength(o, true);\n\n    const minLength: number = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;\n    if (o.length < minLength) {\n      o.length = minLength;\n    }\n\n    const positions: string[] = [];\n    if (o.lowercase && o.minLowercase > 0) {\n      for (let i = 0; i < o.minLowercase; i++) {\n        positions.push(\"l\");\n      }\n    }\n    if (o.uppercase && o.minUppercase > 0) {\n      for (let i = 0; i < o.minUppercase; i++) {\n        positions.push(\"u\");\n      }\n    }\n    if (o.number && o.minNumber > 0) {\n      for (let i = 0; i < o.minNumber; i++) {\n        positions.push(\"n\");\n      }\n    }\n    if (o.special && o.minSpecial > 0) {\n      for (let i = 0; i < o.minSpecial; i++) {\n        positions.push(\"s\");\n      }\n    }\n    while (positions.length < o.length) {\n      positions.push(\"a\");\n    }\n\n    // shuffle\n    await this.shuffleArray(positions);\n\n    // build out the char sets\n    let allCharSet = \"\";\n\n    let lowercaseCharSet = \"abcdefghijkmnopqrstuvwxyz\";\n    if (o.ambiguous) {\n      lowercaseCharSet += \"l\";\n    }\n    if (o.lowercase) {\n      allCharSet += lowercaseCharSet;\n    }\n\n    let uppercaseCharSet = \"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n    if (o.ambiguous) {\n      uppercaseCharSet += \"IO\";\n    }\n    if (o.uppercase) {\n      allCharSet += uppercaseCharSet;\n    }\n\n    let numberCharSet = \"23456789\";\n    if (o.ambiguous) {\n      numberCharSet += \"01\";\n    }\n    if (o.number) {\n      allCharSet += numberCharSet;\n    }\n\n    const specialCharSet = \"!@#$%^&*\";\n    if (o.special) {\n      allCharSet += specialCharSet;\n    }\n\n    let password = \"\";\n    for (let i = 0; i < o.length; i++) {\n      let positionChars: string;\n      switch (positions[i]) {\n        case \"l\":\n          positionChars = lowercaseCharSet;\n          break;\n        case \"u\":\n          positionChars = uppercaseCharSet;\n          break;\n        case \"n\":\n          positionChars = numberCharSet;\n          break;\n        case \"s\":\n          positionChars = specialCharSet;\n          break;\n        case \"a\":\n          positionChars = allCharSet;\n          break;\n        default:\n          break;\n      }\n\n      const randomCharIndex = await this.cryptoService.randomNumber(0, positionChars.length - 1);\n      password += positionChars.charAt(randomCharIndex);\n    }\n\n    return password;\n  }\n\n  async generatePassphrase(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.numWords == null || o.numWords <= 2) {\n      o.numWords = DefaultOptions.numWords;\n    }\n    if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {\n      o.wordSeparator = \" \";\n    }\n    if (o.capitalize == null) {\n      o.capitalize = false;\n    }\n    if (o.includeNumber == null) {\n      o.includeNumber = false;\n    }\n\n    const listLength = EEFLongWordList.length - 1;\n    const wordList = new Array(o.numWords);\n    for (let i = 0; i < o.numWords; i++) {\n      const wordIndex = await this.cryptoService.randomNumber(0, listLength);\n      if (o.capitalize) {\n        wordList[i] = this.capitalize(EEFLongWordList[wordIndex]);\n      } else {\n        wordList[i] = EEFLongWordList[wordIndex];\n      }\n    }\n\n    if (o.includeNumber) {\n      await this.appendRandomNumberToRandomWord(wordList);\n    }\n    return wordList.join(o.wordSeparator);\n  }\n\n  async getOptions(): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let options = await this.stateService.getPasswordGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setPasswordGenerationOptions(options);\n    const enforcedOptions = await this.enforcePasswordGeneratorPoliciesOnOptions(options);\n    options = enforcedOptions[0];\n    return [options, enforcedOptions[1]];\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(\n    options: any\n  ): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let enforcedPolicyOptions = await this.getPasswordGeneratorPolicyOptions();\n    if (enforcedPolicyOptions != null) {\n      if (options.length < enforcedPolicyOptions.minLength) {\n        options.length = enforcedPolicyOptions.minLength;\n      }\n\n      if (enforcedPolicyOptions.useUppercase) {\n        options.uppercase = true;\n      }\n\n      if (enforcedPolicyOptions.useLowercase) {\n        options.lowercase = true;\n      }\n\n      if (enforcedPolicyOptions.useNumbers) {\n        options.number = true;\n      }\n\n      if (options.minNumber < enforcedPolicyOptions.numberCount) {\n        options.minNumber = enforcedPolicyOptions.numberCount;\n      }\n\n      if (enforcedPolicyOptions.useSpecial) {\n        options.special = true;\n      }\n\n      if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n        options.minSpecial = enforcedPolicyOptions.specialCount;\n      }\n\n      // Must normalize these fields because the receiving call expects all options to pass the current rules\n      if (options.minSpecial + options.minNumber > options.length) {\n        options.minSpecial = options.length - options.minNumber;\n      }\n\n      if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n        options.numWords = enforcedPolicyOptions.minNumberWords;\n      }\n\n      if (enforcedPolicyOptions.capitalize) {\n        options.capitalize = true;\n      }\n\n      if (enforcedPolicyOptions.includeNumber) {\n        options.includeNumber = true;\n      }\n\n      // Force default type if password/passphrase selected via policy\n      if (\n        enforcedPolicyOptions.defaultType === \"password\" ||\n        enforcedPolicyOptions.defaultType === \"passphrase\"\n      ) {\n        options.type = enforcedPolicyOptions.defaultType;\n      }\n    } else {\n      // UI layer expects an instantiated object to prevent more explicit null checks\n      enforcedPolicyOptions = new PasswordGeneratorPolicyOptions();\n    }\n    return [options, enforcedPolicyOptions];\n  }\n\n  async getPasswordGeneratorPolicyOptions(): Promise<PasswordGeneratorPolicyOptions> {\n    const policies: Policy[] =\n      this.policyService == null\n        ? null\n        : await this.policyService.getAll(PolicyType.PasswordGenerator);\n    let enforcedOptions: PasswordGeneratorPolicyOptions = null;\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new PasswordGeneratorPolicyOptions();\n      }\n\n      // Password wins in multi-org collisions\n      if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== \"password\") {\n        enforcedOptions.defaultType = currentPolicy.data.defaultType;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.useUpper) {\n        enforcedOptions.useUppercase = true;\n      }\n\n      if (currentPolicy.data.useLower) {\n        enforcedOptions.useLowercase = true;\n      }\n\n      if (currentPolicy.data.useNumbers) {\n        enforcedOptions.useNumbers = true;\n      }\n\n      if (\n        currentPolicy.data.minNumbers != null &&\n        currentPolicy.data.minNumbers > enforcedOptions.numberCount\n      ) {\n        enforcedOptions.numberCount = currentPolicy.data.minNumbers;\n      }\n\n      if (currentPolicy.data.useSpecial) {\n        enforcedOptions.useSpecial = true;\n      }\n\n      if (\n        currentPolicy.data.minSpecial != null &&\n        currentPolicy.data.minSpecial > enforcedOptions.specialCount\n      ) {\n        enforcedOptions.specialCount = currentPolicy.data.minSpecial;\n      }\n\n      if (\n        currentPolicy.data.minNumberWords != null &&\n        currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords\n      ) {\n        enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;\n      }\n\n      if (currentPolicy.data.capitalize) {\n        enforcedOptions.capitalize = true;\n      }\n\n      if (currentPolicy.data.includeNumber) {\n        enforcedOptions.includeNumber = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setPasswordGenerationOptions(options);\n  }\n\n  async getHistory(): Promise<GeneratedPasswordHistory[]> {\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return new Array<GeneratedPasswordHistory>();\n    }\n\n    if ((await this.stateService.getDecryptedPasswordGenerationHistory()) == null) {\n      const encrypted = await this.stateService.getEncryptedPasswordGenerationHistory();\n      const decrypted = await this.decryptHistory(encrypted);\n      await this.stateService.setDecryptedPasswordGenerationHistory(decrypted);\n    }\n\n    const passwordGenerationHistory =\n      await this.stateService.getDecryptedPasswordGenerationHistory();\n    return passwordGenerationHistory != null\n      ? passwordGenerationHistory\n      : new Array<GeneratedPasswordHistory>();\n  }\n\n  async addHistory(password: string): Promise<any> {\n    // Cannot add new history if no key is available\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return;\n    }\n\n    const currentHistory = await this.getHistory();\n\n    // Prevent duplicates\n    if (this.matchesPrevious(password, currentHistory)) {\n      return;\n    }\n\n    currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));\n\n    // Remove old items.\n    if (currentHistory.length > MaxPasswordsInHistory) {\n      currentHistory.pop();\n    }\n\n    const newHistory = await this.encryptHistory(currentHistory);\n    return await this.stateService.setEncryptedPasswordGenerationHistory(newHistory);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setEncryptedPasswordGenerationHistory(null, { userId: userId });\n    await this.stateService.setDecryptedPasswordGenerationHistory(null, { userId: userId });\n  }\n\n  passwordStrength(password: string, userInputs: string[] = null): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    let globalUserInputs = [\"bitwarden\", \"bit\", \"warden\"];\n    if (userInputs != null && userInputs.length > 0) {\n      globalUserInputs = globalUserInputs.concat(userInputs);\n    }\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  normalizeOptions(options: any, enforcedPolicyOptions: PasswordGeneratorPolicyOptions) {\n    options.minLowercase = 0;\n    options.minUppercase = 0;\n\n    if (!options.length || options.length < 5) {\n      options.length = 5;\n    } else if (options.length > 128) {\n      options.length = 128;\n    }\n\n    if (options.length < enforcedPolicyOptions.minLength) {\n      options.length = enforcedPolicyOptions.minLength;\n    }\n\n    if (!options.minNumber) {\n      options.minNumber = 0;\n    } else if (options.minNumber > options.length) {\n      options.minNumber = options.length;\n    } else if (options.minNumber > 9) {\n      options.minNumber = 9;\n    }\n\n    if (options.minNumber < enforcedPolicyOptions.numberCount) {\n      options.minNumber = enforcedPolicyOptions.numberCount;\n    }\n\n    if (!options.minSpecial) {\n      options.minSpecial = 0;\n    } else if (options.minSpecial > options.length) {\n      options.minSpecial = options.length;\n    } else if (options.minSpecial > 9) {\n      options.minSpecial = 9;\n    }\n\n    if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n      options.minSpecial = enforcedPolicyOptions.specialCount;\n    }\n\n    if (options.minSpecial + options.minNumber > options.length) {\n      options.minSpecial = options.length - options.minNumber;\n    }\n\n    if (options.numWords == null || options.length < 3) {\n      options.numWords = 3;\n    } else if (options.numWords > 20) {\n      options.numWords = 20;\n    }\n\n    if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n      options.numWords = enforcedPolicyOptions.minNumberWords;\n    }\n\n    if (options.wordSeparator != null && options.wordSeparator.length > 1) {\n      options.wordSeparator = options.wordSeparator[0];\n    }\n\n    this.sanitizePasswordLength(options, false);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private async appendRandomNumberToRandomWord(wordList: string[]) {\n    if (wordList == null || wordList.length <= 0) {\n      return;\n    }\n    const index = await this.cryptoService.randomNumber(0, wordList.length - 1);\n    const num = await this.cryptoService.randomNumber(0, 9);\n    wordList[index] = wordList[index] + num;\n  }\n\n  private async encryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const encrypted = await this.cryptoService.encrypt(item.password);\n      return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private async decryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const decrypted = await this.cryptoService.decryptToUtf8(new EncString(item.password));\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private matchesPrevious(password: string, history: GeneratedPasswordHistory[]): boolean {\n    if (history == null || history.length === 0) {\n      return false;\n    }\n\n    return history[history.length - 1].password === password;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  private async shuffleArray(array: string[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = await this.cryptoService.randomNumber(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  private sanitizePasswordLength(options: any, forGeneration: boolean) {\n    let minUppercaseCalc = 0;\n    let minLowercaseCalc = 0;\n    let minNumberCalc: number = options.minNumber;\n    let minSpecialCalc: number = options.minSpecial;\n\n    if (options.uppercase && options.minUppercase <= 0) {\n      minUppercaseCalc = 1;\n    } else if (!options.uppercase) {\n      minUppercaseCalc = 0;\n    }\n\n    if (options.lowercase && options.minLowercase <= 0) {\n      minLowercaseCalc = 1;\n    } else if (!options.lowercase) {\n      minLowercaseCalc = 0;\n    }\n\n    if (options.number && options.minNumber <= 0) {\n      minNumberCalc = 1;\n    } else if (!options.number) {\n      minNumberCalc = 0;\n    }\n\n    if (options.special && options.minSpecial <= 0) {\n      minSpecialCalc = 1;\n    } else if (!options.special) {\n      minSpecialCalc = 0;\n    }\n\n    // This should never happen but is a final safety net\n    if (!options.length || options.length < 1) {\n      options.length = 10;\n    }\n\n    const minLength: number = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;\n    // Normalize and Generation both require this modification\n    if (options.length < minLength) {\n      options.length = minLength;\n    }\n\n    // Apply other changes if the options object passed in is for generation\n    if (forGeneration) {\n      options.minUppercase = minUppercaseCalc;\n      options.minLowercase = minLowercaseCalc;\n      options.minNumber = minNumberCalc;\n      options.minSpecial = minSpecialCalc;\n    }\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyResponse } from \"../response/policyResponse\";\n\nexport class PolicyData {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: PolicyResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../data/policyData\";\n\nimport Domain from \"./domainBase\";\n\nexport class Policy extends Domain {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { PolicyService as PolicyServiceAbstraction } from \"../abstractions/policy.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationUserStatusType } from \"../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../models/domain/masterPasswordPolicyOptions\";\nimport { Organization } from \"../models/domain/organization\";\nimport { Policy } from \"../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\n\nexport class PolicyService implements PolicyServiceAbstraction {\n  policyCache: Policy[];\n\n  constructor(\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private apiService: ApiService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedPolicies(null);\n  }\n\n  async getAll(type?: PolicyType, userId?: string): Promise<Policy[]> {\n    let response: Policy[] = [];\n    const decryptedPolicies = await this.stateService.getDecryptedPolicies({ userId: userId });\n    if (decryptedPolicies != null) {\n      response = decryptedPolicies;\n    } else {\n      const diskPolicies = await this.stateService.getEncryptedPolicies({ userId: userId });\n      for (const id in diskPolicies) {\n        // eslint-disable-next-line\n        if (diskPolicies.hasOwnProperty(id)) {\n          response.push(new Policy(diskPolicies[id]));\n        }\n      }\n      await this.stateService.setDecryptedPolicies(response, { userId: userId });\n    }\n    if (type != null) {\n      return response.filter((policy) => policy.type === type);\n    } else {\n      return response;\n    }\n  }\n\n  async getPolicyForOrganization(policyType: PolicyType, organizationId: string): Promise<Policy> {\n    const org = await this.organizationService.get(organizationId);\n    if (org?.isProviderUser) {\n      const orgPolicies = await this.apiService.getPolicies(organizationId);\n      const policy = orgPolicies.data.find((p) => p.organizationId === organizationId);\n\n      if (policy == null) {\n        return null;\n      }\n\n      return new Policy(new PolicyData(policy));\n    }\n\n    const policies = await this.getAll(policyType);\n    return policies.find((p) => p.organizationId === organizationId);\n  }\n\n  async replace(policies: { [id: string]: PolicyData }): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null, { userId: userId });\n    await this.stateService.setEncryptedPolicies(null, { userId: userId });\n  }\n\n  async getMasterPasswordPoliciesForInvitedUsers(\n    orgId: string\n  ): Promise<MasterPasswordPolicyOptions> {\n    const userId = await this.stateService.getUserId();\n    const response = await this.apiService.getPoliciesByInvitedUser(orgId, userId);\n    const policies = await this.mapPoliciesFromToken(response);\n    return this.getMasterPasswordPolicyOptions(policies);\n  }\n\n  async getMasterPasswordPolicyOptions(policies?: Policy[]): Promise<MasterPasswordPolicyOptions> {\n    let enforcedOptions: MasterPasswordPolicyOptions = null;\n\n    if (policies == null) {\n      policies = await this.getAll(PolicyType.MasterPassword);\n    } else {\n      policies = policies.filter((p) => p.type === PolicyType.MasterPassword);\n    }\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new MasterPasswordPolicyOptions();\n      }\n\n      if (\n        currentPolicy.data.minComplexity != null &&\n        currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n      ) {\n        enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.requireUpper) {\n        enforcedOptions.requireUpper = true;\n      }\n\n      if (currentPolicy.data.requireLower) {\n        enforcedOptions.requireLower = true;\n      }\n\n      if (currentPolicy.data.requireNumbers) {\n        enforcedOptions.requireNumbers = true;\n      }\n\n      if (currentPolicy.data.requireSpecial) {\n        enforcedOptions.requireSpecial = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  mapPoliciesFromToken(policiesResponse: ListResponse<PolicyResponse>): Policy[] {\n    if (policiesResponse == null || policiesResponse.data == null) {\n      return null;\n    }\n\n    const policiesData = policiesResponse.data.map((p) => new PolicyData(p));\n    return policiesData.map((p) => new Policy(p));\n  }\n\n  async policyAppliesToUser(\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) {\n    const policies = await this.getAll(policyType, userId);\n    const organizations = await this.organizationService.getAll(userId);\n    let filteredPolicies;\n\n    if (policyFilter != null) {\n      filteredPolicies = policies.filter((p) => p.enabled && policyFilter(p));\n    } else {\n      filteredPolicies = policies.filter((p) => p.enabled);\n    }\n\n    const policySet = new Set(filteredPolicies.map((p) => p.organizationId));\n\n    return organizations.some(\n      (o) =>\n        o.enabled &&\n        o.status >= OrganizationUserStatusType.Accepted &&\n        o.usePolicies &&\n        !this.isExcemptFromPolicies(o, policyType) &&\n        policySet.has(o.id)\n    );\n  }\n\n  private isExcemptFromPolicies(organization: Organization, policyType: PolicyType) {\n    if (policyType === PolicyType.MaximumVaultTimeout) {\n      return organization.type === OrganizationUserType.Owner;\n    }\n\n    return organization.isExemptFromPolicies;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProviderData } from \"../data/providerData\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { Provider } from \"../models/domain/provider\";\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Provider> {\n    const providers = await this.stateService.getProviders();\n    // eslint-disable-next-line\n    if (providers == null || !providers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Provider(providers[id]);\n  }\n\n  async getAll(): Promise<Provider[]> {\n    const providers = await this.stateService.getProviders();\n    const response: Provider[] = [];\n    for (const id in providers) {\n      // eslint-disable-next-line\n      if (providers.hasOwnProperty(id)) {\n        response.push(new Provider(providers[id]));\n      }\n    }\n    return response;\n  }\n\n  async save(providers: { [id: string]: ProviderData }) {\n    await this.stateService.setProviders(providers);\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import * as lunr from \"lunr\";\n\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SearchService implements SearchServiceAbstraction {\n  indexedEntityId?: string = null;\n  private indexing = false;\n  private index: lunr.Index = null;\n  private searchableMinLength = 2;\n\n  constructor(\n    private cipherService: CipherService,\n    private logService: LogService,\n    private i18nService: I18nService\n  ) {\n    if ([\"zh-CN\", \"zh-TW\"].indexOf(i18nService.locale) !== -1) {\n      this.searchableMinLength = 1;\n    }\n  }\n\n  clearIndex(): void {\n    this.indexedEntityId = null;\n    this.index = null;\n  }\n\n  isSearchable(query: string): boolean {\n    const notSearchable =\n      query == null ||\n      (this.index == null && query.length < this.searchableMinLength) ||\n      (this.index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  async indexCiphers(indexedEntityId?: string, ciphers?: CipherView[]): Promise<void> {\n    if (this.indexing) {\n      return;\n    }\n\n    this.logService.time(\"search indexing\");\n    this.indexing = true;\n    this.indexedEntityId = indexedEntityId;\n    this.index = null;\n    const builder = new lunr.Builder();\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", { boost: 10 });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || (await this.cipherService.getAllDecrypted());\n    ciphers.forEach((c) => builder.add(c));\n    this.index = builder.build();\n\n    this.indexing = false;\n\n    this.logService.timeEnd(\"search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[] = null\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = query.trim().toLowerCase();\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = await this.cipherService.getAllDecrypted();\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!this.isSearchable(query)) {\n      return ciphers;\n    }\n\n    if (this.indexing) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (this.indexing) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = query.trim().toLowerCase();\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (c.login && c.login.uri != null && c.login.uri.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = query.trim().toLocaleLowerCase();\n\n    return sends.filter((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        return true;\n      }\n      if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n    });\n  }\n\n  getIndexForSearch(): lunr.Index {\n    return this.index;\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchType.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n}\n","import { SendFileApi } from \"../api/sendFileApi\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/sendTextApi\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendResponse } from \"../response/sendResponse\";\n\nimport { SendFileData } from \"./sendFileData\";\nimport { SendTextData } from \"./sendTextData\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { SendFile } from \"../domain/sendFile\";\n\nimport { View } from \"./view\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { SendText } from \"../domain/sendText\";\n\nimport { View } from \"./view\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { Send } from \"../domain/send\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { SendFileView } from \"./sendFileView\";\nimport { SendTextView } from \"./sendTextView\";\nimport { View } from \"./view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: ArrayBuffer;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n}\n","import { SendFileData } from \"../data/sendFileData\";\nimport { SendFileView } from \"../view/sendFileView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key\n    );\n    return view;\n  }\n}\n","import { SendTextData } from \"../data/sendTextData\";\nimport { SendTextView } from \"../view/sendTextView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      []\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key\n    );\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { SendData } from \"../data/sendData\";\nimport { SendView } from \"../view/sendView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SendFile } from \"./sendFile\";\nimport { SendText } from \"./sendText\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"]\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    let cryptoService: CryptoService;\n    const containerService = (Utils.global as any).bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { SendService as SendServiceAbstraction } from \"../abstractions/send.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SEND_KDF_ITERATIONS } from \"../enums/kdfType\";\nimport { SendType } from \"../enums/sendType\";\nimport { Utils } from \"../misc/utils\";\nimport { SendData } from \"../models/data/sendData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/sendFile\";\nimport { SendText } from \"../models/domain/sendText\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SendService implements SendServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedSends(null);\n  }\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      model.key = await this.cryptoFunctionService.randomBytes(16);\n      model.cryptoKey = await this.cryptoService.makeSendKey(model.key);\n    }\n    if (password != null) {\n      const passwordHash = await this.cryptoFunctionService.pbkdf2(\n        password,\n        model.key,\n        \"sha256\",\n        SEND_KDF_ITERATIONS\n      );\n      send.password = Utils.fromBufferToB64(passwordHash);\n    }\n    send.key = await this.cryptoService.encrypt(model.key, key);\n    send.name = await this.cryptoService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.cryptoService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.cryptoService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  async get(id: string): Promise<Send> {\n    const sends = await this.stateService.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const sends = await this.stateService.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<SendView[]> {\n    let decSends = await this.stateService.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateService.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async saveWithServer(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.apiService.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.apiService.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n\n          await this.fileUploadService.uploadSendFile(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1]\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.apiService.putSend(sendData[0].id, request);\n    }\n\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.apiService.postSendFileLegacy(fd);\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    let sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      sends = {};\n    }\n\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async replace(sends: { [id: string]: SendData }): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(sends);\n  }\n\n  async clear(): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(null);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteSend(id);\n    await this.delete(id);\n  }\n\n  async removePasswordWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<[EncString, EncArrayBuffer]> {\n    const encFileName = await this.cryptoService.encrypt(fileName, key);\n    const encFileData = await this.cryptoService.encryptToBytes(data, key);\n    return [encFileName, encFileData];\n  }\n}\n","import { SettingsService as SettingsServiceAbstraction } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\n\nconst Keys = {\n  settingsPrefix: \"settings_\",\n  equivalentDomains: \"equivalentDomains\",\n};\n\nexport class SettingsService implements SettingsServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setSettings(null);\n  }\n\n  getEquivalentDomains(): Promise<any> {\n    return this.getSettingsKey(Keys.equivalentDomains);\n  }\n\n  async setEquivalentDomains(equivalentDomains: string[][]): Promise<void> {\n    await this.setSettingsKey(Keys.equivalentDomains, equivalentDomains);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setSettings(null, { userId: userId });\n  }\n\n  // Helpers\n\n  private async getSettings(): Promise<any> {\n    const settings = await this.stateService.getSettings();\n    if (settings == null) {\n      // eslint-disable-next-line\n      const userId = await this.stateService.getUserId();\n    }\n    return settings;\n  }\n\n  private async getSettingsKey(key: string): Promise<any> {\n    const settings = await this.getSettings();\n    if (settings != null && settings[key]) {\n      return settings[key];\n    }\n    return null;\n  }\n\n  private async setSettingsKey(key: string, value: any): Promise<void> {\n    let settings = await this.getSettings();\n    if (!settings) {\n      settings = {};\n    }\n\n    settings[key] = value;\n    await this.stateService.setSettings(settings);\n  }\n}\n","import { StateService } from \"../abstractions/state.service\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\nimport { Utils } from \"../misc/utils\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class TokenService implements TokenServiceAbstraction {\n  static decodeToken(token: string): Promise<any> {\n    if (token == null) {\n      throw new Error(\"Token not provided.\");\n    }\n\n    const parts = token.split(\".\");\n    if (parts.length !== 3) {\n      throw new Error(\"JWT must have 3 parts\");\n    }\n\n    const decoded = Utils.fromUrlB64ToUtf8(parts[1]);\n    if (decoded == null) {\n      throw new Error(\"Cannot decode the token\");\n    }\n\n    const decodedToken = JSON.parse(decoded);\n    return decodedToken;\n  }\n\n  constructor(private stateService: StateService) {}\n\n  async setTokens(\n    accessToken: string,\n    refreshToken: string,\n    clientIdClientSecret: [string, string]\n  ): Promise<any> {\n    await this.setToken(accessToken);\n    await this.setRefreshToken(refreshToken);\n    if (clientIdClientSecret != null) {\n      await this.setClientId(clientIdClientSecret[0]);\n      await this.setClientSecret(clientIdClientSecret[1]);\n    }\n  }\n\n  async setClientId(clientId: string): Promise<any> {\n    return await this.stateService.setApiKeyClientId(clientId);\n  }\n\n  async getClientId(): Promise<string> {\n    return await this.stateService.getApiKeyClientId();\n  }\n\n  async setClientSecret(clientSecret: string): Promise<any> {\n    return await this.stateService.setApiKeyClientSecret(clientSecret);\n  }\n\n  async getClientSecret(): Promise<string> {\n    return await this.stateService.getApiKeyClientSecret();\n  }\n\n  async setToken(token: string): Promise<void> {\n    await this.stateService.setAccessToken(token);\n  }\n\n  async getToken(): Promise<string> {\n    return await this.stateService.getAccessToken();\n  }\n\n  async setRefreshToken(refreshToken: string): Promise<any> {\n    return await this.stateService.setRefreshToken(refreshToken);\n  }\n\n  async getRefreshToken(): Promise<string> {\n    return await this.stateService.getRefreshToken();\n  }\n\n  async setTwoFactorToken(tokenResponse: IdentityTokenResponse): Promise<any> {\n    return await this.stateService.setTwoFactorToken(tokenResponse.twoFactorToken);\n  }\n\n  async getTwoFactorToken(): Promise<string> {\n    return await this.stateService.getTwoFactorToken();\n  }\n\n  async clearTwoFactorToken(): Promise<any> {\n    return await this.stateService.setTwoFactorToken(null);\n  }\n\n  async clearToken(userId?: string): Promise<any> {\n    await this.stateService.setAccessToken(null, { userId: userId });\n    await this.stateService.setRefreshToken(null, { userId: userId });\n    await this.stateService.setApiKeyClientId(null, { userId: userId });\n    await this.stateService.setApiKeyClientSecret(null, { userId: userId });\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeToken(token?: string): Promise<any> {\n    const storedToken = await this.stateService.getDecodedToken();\n    if (token === null && storedToken != null) {\n      return storedToken;\n    }\n\n    token = token ?? (await this.stateService.getAccessToken());\n\n    if (token == null) {\n      throw new Error(\"Token not found.\");\n    }\n\n    return TokenService.decodeToken(token);\n  }\n\n  async getTokenExpirationDate(): Promise<Date> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.exp === \"undefined\") {\n      return null;\n    }\n\n    const d = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    d.setUTCSeconds(decoded.exp);\n    return d;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const d = await this.getTokenExpirationDate();\n    if (d == null) {\n      return 0;\n    }\n\n    const msRemaining = d.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.sub === \"undefined\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as string;\n  }\n\n  async getEmail(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email === \"undefined\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email as string;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email_verified === \"undefined\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified as boolean;\n  }\n\n  async getName(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.name === \"undefined\") {\n      return null;\n    }\n\n    return decoded.name as string;\n  }\n\n  async getPremium(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.premium === \"undefined\") {\n      return false;\n    }\n\n    return decoded.premium as boolean;\n  }\n\n  async getIssuer(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.iss === \"undefined\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss as string;\n  }\n\n  async getIsExternal(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n}\n","import { StorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StateVersion } from \"../enums/stateVersion\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountSettings } from \"../models/domain/account\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\n\nimport { TokenService } from \"./token.service\";\n\n// Originally (before January 2022) storage was handled as a flat key/value pair store.\n// With the move to a typed object for state storage these keys should no longer be in use anywhere outside of this migration.\nconst v1Keys: { [key: string]: string } = {\n  accessToken: \"accessToken\",\n  alwaysShowDock: \"alwaysShowDock\",\n  autoConfirmFingerprints: \"autoConfirmFingerprints\",\n  autoFillOnPageLoadDefault: \"autoFillOnPageLoadDefault\",\n  biometricAwaitingAcceptance: \"biometricAwaitingAcceptance\",\n  biometricFingerprintValidated: \"biometricFingerprintValidated\",\n  biometricText: \"biometricText\",\n  biometricUnlock: \"biometric\",\n  clearClipboard: \"clearClipboardKey\",\n  clientId: \"apikey_clientId\",\n  clientSecret: \"apikey_clientSecret\",\n  collapsedGroupings: \"collapsedGroupings\",\n  convertAccountToKeyConnector: \"convertAccountToKeyConnector\",\n  defaultUriMatch: \"defaultUriMatch\",\n  disableAddLoginNotification: \"disableAddLoginNotification\",\n  disableAutoBiometricsPrompt: \"noAutoPromptBiometrics\",\n  disableAutoTotpCopy: \"disableAutoTotpCopy\",\n  disableBadgeCounter: \"disableBadgeCounter\",\n  disableChangedPasswordNotification: \"disableChangedPasswordNotification\",\n  disableContextMenuItem: \"disableContextMenuItem\",\n  disableFavicon: \"disableFavicon\",\n  disableGa: \"disableGa\",\n  dontShowCardsCurrentTab: \"dontShowCardsCurrentTab\",\n  dontShowIdentitiesCurrentTab: \"dontShowIdentitiesCurrentTab\",\n  emailVerified: \"emailVerified\",\n  enableAlwaysOnTop: \"enableAlwaysOnTopKey\",\n  enableAutoFillOnPageLoad: \"enableAutoFillOnPageLoad\",\n  enableBiometric: \"enabledBiometric\",\n  enableBrowserIntegration: \"enableBrowserIntegration\",\n  enableBrowserIntegrationFingerprint: \"enableBrowserIntegrationFingerprint\",\n  enableCloseToTray: \"enableCloseToTray\",\n  enableFullWidth: \"enableFullWidth\",\n  enableGravatars: \"enableGravatars\",\n  enableMinimizeToTray: \"enableMinimizeToTray\",\n  enableStartToTray: \"enableStartToTrayKey\",\n  enableTray: \"enableTray\",\n  encKey: \"encKey\", // Generated Symmetric Key\n  encOrgKeys: \"encOrgKeys\",\n  encPrivate: \"encPrivateKey\",\n  encProviderKeys: \"encProviderKeys\",\n  entityId: \"entityId\",\n  entityType: \"entityType\",\n  environmentUrls: \"environmentUrls\",\n  equivalentDomains: \"equivalentDomains\",\n  eventCollection: \"eventCollection\",\n  forcePasswordReset: \"forcePasswordReset\",\n  history: \"generatedPasswordHistory\",\n  installedVersion: \"installedVersion\",\n  kdf: \"kdf\",\n  kdfIterations: \"kdfIterations\",\n  key: \"key\", // Master Key\n  keyHash: \"keyHash\",\n  lastActive: \"lastActive\",\n  localData: \"sitesLocalData\",\n  locale: \"locale\",\n  mainWindowSize: \"mainWindowSize\",\n  minimizeOnCopyToClipboard: \"minimizeOnCopyToClipboardKey\",\n  neverDomains: \"neverDomains\",\n  noAutoPromptBiometricsText: \"noAutoPromptBiometricsText\",\n  openAtLogin: \"openAtLogin\",\n  passwordGenerationOptions: \"passwordGenerationOptions\",\n  pinProtected: \"pinProtectedKey\",\n  protectedPin: \"protectedPin\",\n  refreshToken: \"refreshToken\",\n  ssoCodeVerifier: \"ssoCodeVerifier\",\n  ssoIdentifier: \"ssoOrgIdentifier\",\n  ssoState: \"ssoState\",\n  stamp: \"securityStamp\",\n  theme: \"theme\",\n  userEmail: \"userEmail\",\n  userId: \"userId\",\n  usesConnector: \"usesKeyConnector\",\n  vaultTimeoutAction: \"vaultTimeoutAction\",\n  vaultTimeout: \"lockOption\",\n  rememberedEmail: \"rememberedEmail\",\n};\n\nconst v1KeyPrefixes: { [key: string]: string } = {\n  ciphers: \"ciphers_\",\n  collections: \"collections_\",\n  folders: \"folders_\",\n  lastSync: \"lastSync_\",\n  policies: \"policies_\",\n  twoFactorToken: \"twoFactorToken_\",\n  organizations: \"organizations_\",\n  providers: \"providers_\",\n  sends: \"sends_\",\n  settings: \"settings_\",\n};\n\nconst keys = {\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateMigrationService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  constructor(\n    protected storageService: StorageService,\n    protected secureStorageService: StorageService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>\n  ) {}\n\n  async needsMigration(): Promise<boolean> {\n    const currentStateVersion = await this.getCurrentStateVersion();\n    return currentStateVersion == null || currentStateVersion < StateVersion.Latest;\n  }\n\n  async migrate(): Promise<void> {\n    let currentStateVersion = await this.getCurrentStateVersion();\n    while (currentStateVersion < StateVersion.Latest) {\n      switch (currentStateVersion) {\n        case StateVersion.One:\n          await this.migrateStateFrom1To2();\n          break;\n        case StateVersion.Two:\n          await this.migrateStateFrom2To3();\n          break;\n        case StateVersion.Three:\n          await this.migrateStateFrom3To4();\n          break;\n      }\n\n      currentStateVersion += 1;\n    }\n  }\n\n  protected async migrateStateFrom1To2(): Promise<void> {\n    const clearV1Keys = async (clearingUserId?: string) => {\n      for (const key in v1Keys) {\n        if (key == null) {\n          continue;\n        }\n        await this.set(v1Keys[key], null);\n      }\n      if (clearingUserId != null) {\n        for (const keyPrefix in v1KeyPrefixes) {\n          if (keyPrefix == null) {\n            continue;\n          }\n          await this.set(v1KeyPrefixes[keyPrefix] + userId, null);\n        }\n      }\n    };\n\n    // Some processes, like biometrics, may have already defined a value before migrations are run.\n    // We don't want to null out those values if they don't exist in the old storage scheme (like for new installs)\n    // So, the OOO for migration is that we:\n    // 1. Check for an existing storage value from the old storage structure OR\n    // 2. Check for a value already set by processes that run before migration OR\n    // 3. Assign the default value\n    const globals =\n      (await this.get<GlobalState>(keys.global)) ?? this.stateFactory.createGlobal(null);\n    globals.stateVersion = StateVersion.Two;\n    globals.environmentUrls =\n      (await this.get<EnvironmentUrls>(v1Keys.environmentUrls)) ?? globals.environmentUrls;\n    globals.locale = (await this.get<string>(v1Keys.locale)) ?? globals.locale;\n    globals.noAutoPromptBiometrics =\n      (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n      globals.noAutoPromptBiometrics;\n    globals.noAutoPromptBiometricsText =\n      (await this.get<string>(v1Keys.noAutoPromptBiometricsText)) ??\n      globals.noAutoPromptBiometricsText;\n    globals.ssoCodeVerifier =\n      (await this.get<string>(v1Keys.ssoCodeVerifier)) ?? globals.ssoCodeVerifier;\n    globals.ssoOrganizationIdentifier =\n      (await this.get<string>(v1Keys.ssoIdentifier)) ?? globals.ssoOrganizationIdentifier;\n    globals.ssoState = (await this.get<any>(v1Keys.ssoState)) ?? globals.ssoState;\n    globals.rememberedEmail =\n      (await this.get<string>(v1Keys.rememberedEmail)) ?? globals.rememberedEmail;\n    globals.theme = (await this.get<ThemeType>(v1Keys.theme)) ?? globals.theme;\n    globals.vaultTimeout = (await this.get<number>(v1Keys.vaultTimeout)) ?? globals.vaultTimeout;\n    globals.vaultTimeoutAction =\n      (await this.get<string>(v1Keys.vaultTimeoutAction)) ?? globals.vaultTimeoutAction;\n    globals.window = (await this.get<any>(v1Keys.mainWindowSize)) ?? globals.window;\n    globals.enableTray = (await this.get<boolean>(v1Keys.enableTray)) ?? globals.enableTray;\n    globals.enableMinimizeToTray =\n      (await this.get<boolean>(v1Keys.enableMinimizeToTray)) ?? globals.enableMinimizeToTray;\n    globals.enableCloseToTray =\n      (await this.get<boolean>(v1Keys.enableCloseToTray)) ?? globals.enableCloseToTray;\n    globals.enableStartToTray =\n      (await this.get<boolean>(v1Keys.enableStartToTray)) ?? globals.enableStartToTray;\n    globals.openAtLogin = (await this.get<boolean>(v1Keys.openAtLogin)) ?? globals.openAtLogin;\n    globals.alwaysShowDock =\n      (await this.get<boolean>(v1Keys.alwaysShowDock)) ?? globals.alwaysShowDock;\n    globals.enableBrowserIntegration =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegration)) ??\n      globals.enableBrowserIntegration;\n    globals.enableBrowserIntegrationFingerprint =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegrationFingerprint)) ??\n      globals.enableBrowserIntegrationFingerprint;\n\n    const userId =\n      (await this.get<string>(v1Keys.userId)) ?? (await this.get<string>(v1Keys.entityId));\n\n    const defaultAccount = this.stateFactory.createAccount(null);\n    const accountSettings: AccountSettings = {\n      autoConfirmFingerPrints:\n        (await this.get<boolean>(v1Keys.autoConfirmFingerprints)) ??\n        defaultAccount.settings.autoConfirmFingerPrints,\n      autoFillOnPageLoadDefault:\n        (await this.get<boolean>(v1Keys.autoFillOnPageLoadDefault)) ??\n        defaultAccount.settings.autoFillOnPageLoadDefault,\n      biometricLocked: null,\n      biometricUnlock:\n        (await this.get<boolean>(v1Keys.biometricUnlock)) ??\n        defaultAccount.settings.biometricUnlock,\n      clearClipboard:\n        (await this.get<number>(v1Keys.clearClipboard)) ?? defaultAccount.settings.clearClipboard,\n      defaultUriMatch:\n        (await this.get<any>(v1Keys.defaultUriMatch)) ?? defaultAccount.settings.defaultUriMatch,\n      disableAddLoginNotification:\n        (await this.get<boolean>(v1Keys.disableAddLoginNotification)) ??\n        defaultAccount.settings.disableAddLoginNotification,\n      disableAutoBiometricsPrompt:\n        (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n        defaultAccount.settings.disableAutoBiometricsPrompt,\n      disableAutoTotpCopy:\n        (await this.get<boolean>(v1Keys.disableAutoTotpCopy)) ??\n        defaultAccount.settings.disableAutoTotpCopy,\n      disableBadgeCounter:\n        (await this.get<boolean>(v1Keys.disableBadgeCounter)) ??\n        defaultAccount.settings.disableBadgeCounter,\n      disableChangedPasswordNotification:\n        (await this.get<boolean>(v1Keys.disableChangedPasswordNotification)) ??\n        defaultAccount.settings.disableChangedPasswordNotification,\n      disableContextMenuItem:\n        (await this.get<boolean>(v1Keys.disableContextMenuItem)) ??\n        defaultAccount.settings.disableContextMenuItem,\n      disableGa: (await this.get<boolean>(v1Keys.disableGa)) ?? defaultAccount.settings.disableGa,\n      dontShowCardsCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowCardsCurrentTab)) ??\n        defaultAccount.settings.dontShowCardsCurrentTab,\n      dontShowIdentitiesCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowIdentitiesCurrentTab)) ??\n        defaultAccount.settings.dontShowIdentitiesCurrentTab,\n      enableAlwaysOnTop:\n        (await this.get<boolean>(v1Keys.enableAlwaysOnTop)) ??\n        defaultAccount.settings.enableAlwaysOnTop,\n      enableAutoFillOnPageLoad:\n        (await this.get<boolean>(v1Keys.enableAutoFillOnPageLoad)) ??\n        defaultAccount.settings.enableAutoFillOnPageLoad,\n      enableBiometric:\n        (await this.get<boolean>(v1Keys.enableBiometric)) ??\n        defaultAccount.settings.enableBiometric,\n      enableFullWidth:\n        (await this.get<boolean>(v1Keys.enableFullWidth)) ??\n        defaultAccount.settings.enableFullWidth,\n      enableGravitars:\n        (await this.get<boolean>(v1Keys.enableGravatars)) ??\n        defaultAccount.settings.enableGravitars,\n      environmentUrls: globals.environmentUrls ?? defaultAccount.settings.environmentUrls,\n      equivalentDomains:\n        (await this.get<any>(v1Keys.equivalentDomains)) ??\n        defaultAccount.settings.equivalentDomains,\n      minimizeOnCopyToClipboard:\n        (await this.get<boolean>(v1Keys.minimizeOnCopyToClipboard)) ??\n        defaultAccount.settings.minimizeOnCopyToClipboard,\n      neverDomains:\n        (await this.get<any>(v1Keys.neverDomains)) ?? defaultAccount.settings.neverDomains,\n      passwordGenerationOptions:\n        (await this.get<any>(v1Keys.passwordGenerationOptions)) ??\n        defaultAccount.settings.passwordGenerationOptions,\n      pinProtected: {\n        decrypted: null,\n        encrypted: await this.get<string>(v1Keys.pinProtected),\n      },\n      protectedPin: await this.get<string>(v1Keys.protectedPin),\n      settings: userId == null ? null : await this.get<any>(v1KeyPrefixes.settings + userId),\n      vaultTimeout:\n        (await this.get<number>(v1Keys.vaultTimeout)) ?? defaultAccount.settings.vaultTimeout,\n      vaultTimeoutAction:\n        (await this.get<string>(v1Keys.vaultTimeoutAction)) ??\n        defaultAccount.settings.vaultTimeoutAction,\n    };\n\n    // (userId == null) = no logged in user (so no known userId) and we need to temporarily store account specific settings in state to migrate on first auth\n    // (userId != null) = we have a currently authed user (so known userId) with encrypted data and other key settings we can move, no need to temporarily store account settings\n    if (userId == null) {\n      await this.set(keys.tempAccountSettings, accountSettings);\n      await this.set(keys.global, globals);\n      await this.set(keys.authenticatedAccounts, []);\n      await this.set(keys.activeUserId, null);\n      await clearV1Keys();\n      return;\n    }\n\n    globals.twoFactorToken = await this.get<string>(v1KeyPrefixes.twoFactorToken + userId);\n    await this.set(keys.global, globals);\n    await this.set(userId, {\n      data: {\n        addEditCipherInfo: null,\n        ciphers: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CipherData }>(v1KeyPrefixes.ciphers + userId),\n        },\n        collapsedGroupings: null,\n        collections: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CollectionData }>(\n            v1KeyPrefixes.collections + userId\n          ),\n        },\n        eventCollection: await this.get<EventData[]>(v1Keys.eventCollection),\n        folders: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: FolderData }>(v1KeyPrefixes.folders + userId),\n        },\n        localData: null,\n        organizations: await this.get<{ [id: string]: OrganizationData }>(\n          v1KeyPrefixes.organizations + userId\n        ),\n        passwordGenerationHistory: {\n          decrypted: null,\n          encrypted: await this.get<GeneratedPasswordHistory[]>(v1Keys.history),\n        },\n        policies: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: PolicyData }>(v1KeyPrefixes.policies + userId),\n        },\n        providers: await this.get<{ [id: string]: ProviderData }>(v1KeyPrefixes.providers + userId),\n        sends: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: SendData }>(v1KeyPrefixes.sends + userId),\n        },\n      },\n      keys: {\n        apiKeyClientSecret: await this.get<string>(v1Keys.clientSecret),\n        cryptoMasterKey: null,\n        cryptoMasterKeyAuto: null,\n        cryptoMasterKeyB64: null,\n        cryptoMasterKeyBiometric: null,\n        cryptoSymmetricKey: {\n          encrypted: await this.get<string>(v1Keys.encKey),\n          decrypted: null,\n        },\n        legacyEtmKey: null,\n        organizationKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encOrgKeys),\n        },\n        privateKey: {\n          decrypted: null,\n          encrypted: await this.get<string>(v1Keys.encPrivate),\n        },\n        providerKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encProviderKeys),\n        },\n        publicKey: null,\n      },\n      profile: {\n        apiKeyClientId: await this.get<string>(v1Keys.clientId),\n        authenticationStatus: null,\n        convertAccountToKeyConnector: await this.get<boolean>(v1Keys.convertAccountToKeyConnector),\n        email: await this.get<string>(v1Keys.userEmail),\n        emailVerified: await this.get<boolean>(v1Keys.emailVerified),\n        entityId: null,\n        entityType: null,\n        everBeenUnlocked: null,\n        forcePasswordReset: null,\n        hasPremiumPersonally: null,\n        kdfIterations: await this.get<number>(v1Keys.kdfIterations),\n        kdfType: await this.get<KdfType>(v1Keys.kdf),\n        keyHash: await this.get<string>(v1Keys.keyHash),\n        lastSync: null,\n        userId: userId,\n        usesKeyConnector: null,\n      },\n      settings: accountSettings,\n      tokens: {\n        accessToken: await this.get<string>(v1Keys.accessToken),\n        decodedToken: null,\n        refreshToken: await this.get<string>(v1Keys.refreshToken),\n        securityStamp: null,\n      },\n    });\n\n    await this.set(keys.authenticatedAccounts, [userId]);\n    await this.set(keys.activeUserId, userId);\n\n    const accountActivity: { [userId: string]: number } = {\n      [userId]: await this.get<number>(v1Keys.lastActive),\n    };\n    accountActivity[userId] = await this.get<number>(v1Keys.lastActive);\n    await this.set(keys.accountActivity, accountActivity);\n\n    await clearV1Keys(userId);\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"biometric\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.biometricKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"biometric\" }),\n        { keySuffix: \"biometric\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"biometric\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"auto\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.autoKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"auto\" }),\n        { keySuffix: \"auto\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"auto\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key)) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.masterKey}`,\n        await this.secureStorageService.get(v1Keys.key)\n      );\n      await this.secureStorageService.remove(v1Keys.key);\n    }\n  }\n\n  protected async migrateStateFrom2To3(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (\n          account?.profile?.hasPremiumPersonally === null &&\n          account.tokens?.accessToken != null\n        ) {\n          const decodedToken = await TokenService.decodeToken(account.tokens.accessToken);\n          account.profile.hasPremiumPersonally = decodedToken.premium;\n          await this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Three;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateStateFrom3To4(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (account?.profile?.everBeenUnlocked != null) {\n          delete account.profile.everBeenUnlocked;\n          return this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Four;\n    await this.set(keys.global, globals);\n  }\n\n  protected get options(): StorageOptions {\n    return { htmlStorageLocation: HtmlStorageLocation.Local };\n  }\n\n  protected get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key, this.options);\n  }\n\n  protected set(key: string, value: any): Promise<any> {\n    if (value == null) {\n      return this.storageService.remove(key, this.options);\n    }\n    return this.storageService.save(key, value, this.options);\n  }\n\n  protected async getGlobals(): Promise<TGlobalState> {\n    return await this.get<TGlobalState>(keys.global);\n  }\n\n  protected async getCurrentStateVersion(): Promise<StateVersion> {\n    return (await this.getGlobals())?.stateVersion ?? StateVersion.One;\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { ProfileOrganizationResponse } from \"../response/profileOrganizationResponse\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: ProfileOrganizationResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useResetPassword = response.useResetPassword;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.planProductType = response.planProductType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProfileProviderResponse } from \"../response/profileProviderResponse\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { ProviderService } from \"../abstractions/provider.service\";\nimport { SendService } from \"../abstractions/send.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService as SyncServiceAbstraction } from \"../abstractions/sync.service\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\n\nexport class SyncService implements SyncServiceAbstraction {\n  syncInProgress = false;\n\n  constructor(\n    private apiService: ApiService,\n    private settingsService: SettingsService,\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private cryptoService: CryptoService,\n    private collectionService: CollectionService,\n    private messagingService: MessagingService,\n    private policyService: PolicyService,\n    private sendService: SendService,\n    private logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private providerService: ProviderService,\n    private logoutCallback: (expired: boolean) => Promise<void>\n  ) {}\n\n  async getLastSync(): Promise<Date> {\n    if ((await this.stateService.getUserId()) == null) {\n      return null;\n    }\n\n    const lastSync = await this.stateService.getLastSync();\n    if (lastSync) {\n      return new Date(lastSync);\n    }\n\n    return null;\n  }\n\n  async setLastSync(date: Date, userId?: string): Promise<any> {\n    await this.stateService.setLastSync(date.toJSON(), { userId: userId });\n  }\n\n  @sequentialize(() => \"fullSync\")\n  async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    this.syncStarted();\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    if (!isAuthenticated) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders);\n      await this.syncCollections(response.collections);\n      await this.syncCiphers(response.ciphers);\n      await this.syncSends(response.sends);\n      await this.syncSettings(response.domains);\n      await this.syncPolicies(response.policies);\n\n      await this.setLastSync(now);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.apiService.getFolder(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messagingService.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getCipher(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messagingService.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localSend = await this.sendService.get(notification.id);\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.apiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messagingService.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  private syncStarted() {\n    this.syncInProgress = true;\n    this.messagingService.send(\"syncStarted\");\n  }\n\n  private syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messagingService.send(\"syncCompleted\", { successfully: successfully });\n    return successfully;\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.stateService.getSecurityStamp();\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(true);\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setEncKey(response.key);\n    await this.cryptoService.setEncPrivateKey(response.privateKey);\n    await this.cryptoService.setProviderKeys(response.providers);\n    await this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);\n    await this.stateService.setSecurityStamp(response.securityStamp);\n    await this.stateService.setEmailVerified(response.emailVerified);\n    await this.stateService.setForcePasswordReset(response.forcePasswordReset);\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);\n\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o);\n    });\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o);\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.save(organizations);\n    await this.providerService.save(providers);\n\n    if (await this.keyConnectorService.userNeedsMigration()) {\n      await this.keyConnectorService.setConvertAccountRequired(true);\n      this.messagingService.send(\"convertAccountToKeyConnector\");\n    } else {\n      this.keyConnectorService.removeConvertAccountRequired();\n    }\n  }\n\n  private async syncFolders(response: FolderResponse[]) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[]) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections);\n  }\n\n  private async syncCiphers(response: CipherResponse[]) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers);\n  }\n\n  private async syncSends(response: SendResponse[]) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends);\n  }\n\n  private async syncSettings(response: DomainsResponse) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.settingsService.setEquivalentDomains(eqDomains);\n  }\n\n  private async syncPolicies(response: PolicyResponse[]) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies);\n  }\n}\n","import { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { Utils } from \"../misc/utils\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeout: any = null;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private stateService: StateService\n  ) {}\n\n  async startProcessReload(): Promise<void> {\n    if (\n      (await this.stateService.getDecryptedPinProtected()) != null ||\n      (await this.stateService.getBiometricLocked()) ||\n      this.reloadInterval != null\n    ) {\n      return;\n    }\n    this.cancelProcessReload();\n    this.reloadInterval = setInterval(async () => {\n      let doRefresh = false;\n      const lastActive = await this.stateService.getLastActive();\n      if (lastActive != null) {\n        const diffSeconds = new Date().getTime() - lastActive;\n        // Don't refresh if they are still active in the window\n        doRefresh = diffSeconds >= 5000;\n      }\n      const biometricLockedFingerprintValidated =\n        (await this.stateService.getBiometricFingerprintValidated()) &&\n        (await this.stateService.getBiometricLocked());\n      if (doRefresh && !biometricLockedFingerprintValidated) {\n        clearInterval(this.reloadInterval);\n        this.reloadInterval = null;\n        this.messagingService.send(\"reloadProcess\");\n        if (this.reloadCallback != null) {\n          await this.reloadCallback();\n        }\n      }\n    }, 10000);\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    if (this.clearClipboardTimeout != null) {\n      clearTimeout(this.clearClipboardTimeout);\n      this.clearClipboardTimeout = null;\n    }\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n    await this.stateService.getClearClipboard().then((clearSeconds) => {\n      if (clearSeconds == null) {\n        return;\n      }\n      if (timeoutMs == null) {\n        timeoutMs = clearSeconds * 1000;\n      }\n      this.clearClipboardTimeoutFunction = async () => {\n        const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n        if (clipboardValue === clipboardValueNow) {\n          this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n        }\n      };\n      this.clearClipboardTimeout = setTimeout(async () => {\n        await this.clearPendingClipboard();\n      }, timeoutMs);\n    });\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","import { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\nimport { Utils } from \"../misc/utils\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  async isAutoCopyEnabled(): Promise<boolean> {\n    return !(await this.stateService.getDisableAutoTotpCopy());\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\"\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes.buffer, keyBytes.buffer, alg);\n    return new Uint8Array(signature);\n  }\n}\n","import { I18nService } from \"../abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport {\n  TwoFactorProviderDetails,\n  TwoFactorService as TwoFactorServiceAbstraction,\n} from \"../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../enums/twoFactorProviderType\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\n\nexport const TwoFactorProviders: Partial<Record<TwoFactorProviderType, TwoFactorProviderDetails>> =\n  {\n    [TwoFactorProviderType.Authenticator]: {\n      type: TwoFactorProviderType.Authenticator,\n      name: null as string,\n      description: null as string,\n      priority: 1,\n      sort: 1,\n      premium: false,\n    },\n    [TwoFactorProviderType.Yubikey]: {\n      type: TwoFactorProviderType.Yubikey,\n      name: null as string,\n      description: null as string,\n      priority: 3,\n      sort: 2,\n      premium: true,\n    },\n    [TwoFactorProviderType.Duo]: {\n      type: TwoFactorProviderType.Duo,\n      name: \"Duo\",\n      description: null as string,\n      priority: 2,\n      sort: 3,\n      premium: true,\n    },\n    [TwoFactorProviderType.OrganizationDuo]: {\n      type: TwoFactorProviderType.OrganizationDuo,\n      name: \"Duo (Organization)\",\n      description: null as string,\n      priority: 10,\n      sort: 4,\n      premium: false,\n    },\n    [TwoFactorProviderType.Email]: {\n      type: TwoFactorProviderType.Email,\n      name: null as string,\n      description: null as string,\n      priority: 0,\n      sort: 6,\n      premium: false,\n    },\n    [TwoFactorProviderType.WebAuthn]: {\n      type: TwoFactorProviderType.WebAuthn,\n      name: null as string,\n      description: null as string,\n      priority: 4,\n      sort: 5,\n      premium: true,\n    },\n  };\n\nexport class TwoFactorService implements TwoFactorServiceAbstraction {\n  private twoFactorProvidersData: Map<TwoFactorProviderType, { [key: string]: string }>;\n  private selectedTwoFactorProviderType: TwoFactorProviderType = null;\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  init() {\n    TwoFactorProviders[TwoFactorProviderType.Email].name = this.i18nService.t(\"emailTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Email].description = this.i18nService.t(\"emailDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].name =\n      this.i18nService.t(\"authenticatorAppTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].description =\n      this.i18nService.t(\"authenticatorAppDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Duo].description = this.i18nService.t(\"duoDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].name =\n      \"Duo (\" + this.i18nService.t(\"organization\") + \")\";\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].description =\n      this.i18nService.t(\"duoOrganizationDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].name = this.i18nService.t(\"webAuthnTitle\");\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].description =\n      this.i18nService.t(\"webAuthnDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].name = this.i18nService.t(\"yubiKeyTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].description =\n      this.i18nService.t(\"yubiKeyDesc\");\n  }\n\n  getSupportedProviders(win: Window): TwoFactorProviderDetails[] {\n    const providers: any[] = [];\n    if (this.twoFactorProvidersData == null) {\n      return providers;\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.OrganizationDuo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.OrganizationDuo]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Authenticator)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Authenticator]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Yubikey)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Yubikey]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.Duo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Duo]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.WebAuthn) &&\n      this.platformUtilsService.supportsWebAuthn(win)\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.WebAuthn]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Email)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Email]);\n    }\n\n    return providers;\n  }\n\n  getDefaultProvider(webAuthnSupported: boolean): TwoFactorProviderType {\n    if (this.twoFactorProvidersData == null) {\n      return null;\n    }\n\n    if (\n      this.selectedTwoFactorProviderType != null &&\n      this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)\n    ) {\n      return this.selectedTwoFactorProviderType;\n    }\n\n    let providerType: TwoFactorProviderType = null;\n    let providerPriority = -1;\n    this.twoFactorProvidersData.forEach((_value, type) => {\n      const provider = (TwoFactorProviders as any)[type];\n      if (provider != null && provider.priority > providerPriority) {\n        if (type === TwoFactorProviderType.WebAuthn && !webAuthnSupported) {\n          return;\n        }\n\n        providerType = type;\n        providerPriority = provider.priority;\n      }\n    });\n\n    return providerType;\n  }\n\n  setSelectedProvider(type: TwoFactorProviderType) {\n    this.selectedTwoFactorProviderType = type;\n  }\n\n  clearSelectedProvider() {\n    this.selectedTwoFactorProviderType = null;\n  }\n\n  setProviders(response: IdentityTwoFactorResponse) {\n    this.twoFactorProvidersData = response.twoFactorProviders2;\n  }\n\n  clearProviders() {\n    this.twoFactorProvidersData = null;\n  }\n\n  getProviders() {\n    return this.twoFactorProvidersData;\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../abstractions/userVerification.service\";\nimport { VerificationType } from \"../enums/verificationType\";\nimport { VerifyOTPRequest } from \"../models/request/account/verifyOTPRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { Verification } from \"../types/verification\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private apiService: ApiService\n  ) {}\n\n  /**\n   * Create a new request model to be used for server-side verification\n   * @param verification User-supplied verification data (Master Password or OTP)\n   * @param requestClass The request model to create\n   * @param alreadyHashed Whether the master password is already hashed\n   */\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: Verification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean\n  ) {\n    this.validateInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashPassword(verification.secret, null);\n    }\n\n    return request;\n  }\n\n  /**\n   * Used to verify the Master Password client-side, or send the OTP to the server for verification (with no other data)\n   * Generally used for client-side verification only.\n   * @param verification User-supplied verification data (Master Password or OTP)\n   */\n  async verifyUser(verification: Verification): Promise<boolean> {\n    this.validateInput(verification);\n\n    if (verification.type === VerificationType.OTP) {\n      const request = new VerifyOTPRequest(verification.secret);\n      try {\n        await this.apiService.postAccountVerifyOTP(request);\n      } catch (e) {\n        throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n      }\n    } else {\n      const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n        verification.secret,\n        null\n      );\n      if (!passwordValid) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n    }\n    return true;\n  }\n\n  async requestOTP() {\n    await this.apiService.postAccountRequestOTP();\n  }\n\n  private validateInput(verification: Verification) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      if (verification.type === VerificationType.OTP) {\n        throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n      } else {\n        throw new Error(this.i18nService.t(\"masterPassRequired\"));\n      }\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { UsernameGenerationService as BaseUsernameGenerationService } from \"../abstractions/usernameGeneration.service\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\n\nconst DefaultOptions = {\n  type: \"word\",\n  wordCapitalize: true,\n  wordIncludeNumber: true,\n  subaddressType: \"random\",\n  catchallType: \"random\",\n  forwardedService: \"simplelogin\",\n  forwardedAnonAddyDomain: \"anonaddy.me\",\n};\n\nexport class UsernameGenerationService implements BaseUsernameGenerationService {\n  constructor(\n    private cryptoService: CryptoService,\n    private stateService: StateService,\n    private apiService: ApiService\n  ) {}\n\n  generateUsername(options: any): Promise<string> {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  async generateWord(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.wordCapitalize == null) {\n      o.wordCapitalize = true;\n    }\n    if (o.wordIncludeNumber == null) {\n      o.wordIncludeNumber = true;\n    }\n\n    const wordIndex = await this.cryptoService.randomNumber(0, EEFLongWordList.length - 1);\n    let word = EEFLongWordList[wordIndex];\n    if (o.wordCapitalize) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n    if (o.wordIncludeNumber) {\n      const num = await this.cryptoService.randomNumber(1, 9999);\n      word = word + this.zeroPad(num.toString(), 4);\n    }\n    return word;\n  }\n\n  async generateSubaddress(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    const subaddressEmail = o.subaddressEmail;\n    if (subaddressEmail == null || subaddressEmail.length < 3) {\n      return o.subaddressEmail;\n    }\n    const atIndex = subaddressEmail.indexOf(\"@\");\n    if (atIndex < 1 || atIndex >= subaddressEmail.length - 1) {\n      return subaddressEmail;\n    }\n    if (o.subaddressType == null) {\n      o.subaddressType = \"random\";\n    }\n\n    const emailBeginning = subaddressEmail.substr(0, atIndex);\n    const emailEnding = subaddressEmail.substr(atIndex + 1, subaddressEmail.length);\n\n    let subaddressString = \"\";\n    if (o.subaddressType === \"random\") {\n      subaddressString = await this.randomString(8);\n    } else if (o.subaddressType === \"website-name\") {\n      subaddressString = o.website;\n    }\n    return emailBeginning + \"+\" + subaddressString + \"@\" + emailEnding;\n  }\n\n  async generateCatchall(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.catchallDomain == null || o.catchallDomain === \"\") {\n      return null;\n    }\n    if (o.catchallType == null) {\n      o.catchallType = \"random\";\n    }\n\n    let startString = \"\";\n    if (o.catchallType === \"random\") {\n      startString = await this.randomString(8);\n    } else if (o.catchallType === \"website-name\") {\n      startString = o.website;\n    }\n    return startString + \"@\" + o.catchallDomain;\n  }\n\n  async generateForwarded(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.forwardedService == null) {\n      return null;\n    }\n\n    if (o.forwardedService === \"simplelogin\") {\n      if (o.forwardedSimpleLoginApiKey == null || o.forwardedSimpleLoginApiKey === \"\") {\n        return null;\n      }\n      return this.generateSimpleLoginAlias(o.forwardedSimpleLoginApiKey, o.website);\n    } else if (o.forwardedService === \"anonaddy\") {\n      if (\n        o.forwardedAnonAddyApiToken == null ||\n        o.forwardedAnonAddyApiToken === \"\" ||\n        o.forwardedAnonAddyDomain == null ||\n        o.forwardedAnonAddyDomain == \"\"\n      ) {\n        return null;\n      }\n      return this.generateAnonAddyAlias(\n        o.forwardedAnonAddyApiToken,\n        o.forwardedAnonAddyDomain,\n        o.website\n      );\n    } else if (o.forwardedService === \"firefoxrelay\") {\n      if (o.forwardedFirefoxApiToken == null || o.forwardedFirefoxApiToken === \"\") {\n        return null;\n      }\n      return this.generateFirefoxRelayAlias(o.forwardedFirefoxApiToken, o.website);\n    }\n\n    return null;\n  }\n\n  async getOptions(): Promise<any> {\n    let options = await this.stateService.getUsernameGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setUsernameGenerationOptions(options);\n    return options;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setUsernameGenerationOptions(options);\n  }\n\n  private async randomString(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.cryptoService.randomNumber(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  // ref: https://stackoverflow.com/a/10073788\n  private zeroPad(number: string, width: number) {\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join(\"0\") + number;\n  }\n\n  private async generateSimpleLoginAlias(apiKey: string, website: string): Promise<string> {\n    if (apiKey == null || apiKey === \"\") {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authentication: apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    let url = \"https://app.simplelogin.io/api/alias/random/new\";\n    if (website != null) {\n      url += \"?hostname=\" + website;\n    }\n    requestInit.body = JSON.stringify({\n      note: (website != null ? \"Website: \" + website + \". \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json.alias;\n    }\n    if (response.status === 401) {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    try {\n      const json = await response.json();\n      if (json?.error != null) {\n        throw \"SimpleLogin error:\" + json.error;\n      }\n    } catch {\n      // Do nothing...\n    }\n    throw \"Unknown SimpleLogin error occurred.\";\n  }\n\n  private async generateAnonAddyAlias(\n    apiToken: string,\n    domain: string,\n    websiteNote: string\n  ): Promise<string> {\n    if (apiToken == null || apiToken === \"\") {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + apiToken,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://app.anonaddy.com/api/v1/aliases\";\n    requestInit.body = JSON.stringify({\n      domain: domain,\n      description:\n        (websiteNote != null ? \"Website: \" + websiteNote + \". \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.data?.email;\n    }\n    if (response.status === 401) {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    throw \"Unknown AnonAddy error occurred.\";\n  }\n\n  private async generateFirefoxRelayAlias(apiToken: string, website: string): Promise<string> {\n    if (apiToken == null || apiToken === \"\") {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Token \" + apiToken,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://relay.firefox.com/api/v1/relayaddresses/\";\n    requestInit.body = JSON.stringify({\n      enabled: true,\n      generated_for: website,\n      description: (website != null ? website + \" - \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.full_address;\n    }\n    if (response.status === 401) {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    throw \"Unknown Firefox Relay error occurred.\";\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as forge from \"node-forge\";\n\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { Utils } from \"../misc/utils\";\nimport { DecryptParameters } from \"../models/domain/decryptParameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n\n  constructor(win: Window) {\n    this.crypto = typeof win.crypto !== \"undefined\" ? win.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof win.crypto.subtle !== \"undefined\" ? win.crypto.subtle : null;\n  }\n\n  async pbkdf2(\n    password: string | ArrayBuffer,\n    salt: string | ArrayBuffer,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number\n  ): Promise<ArrayBuffer> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"]\n    );\n    return await this.subtle.deriveBits(pbkdf2Params, impKey, wcLen);\n  }\n\n  async hkdf(\n    ikm: ArrayBuffer,\n    salt: string | ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    return await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t.buffer, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize).buffer;\n  }\n\n  async hash(\n    value: string | ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"\n  ): Promise<ArrayBuffer> {\n    if (algorithm === \"md5\") {\n      const md = algorithm === \"md5\" ? forge.md.md5.create() : forge.md.sha1.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data).buffer;\n    }\n\n    const valueBuf = this.toBuf(value);\n    return await this.subtle.digest({ name: this.toWebCryptoAlgorithm(algorithm) }, valueBuf);\n  }\n\n  async hmac(\n    value: ArrayBuffer,\n    key: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    return await this.subtle.sign(signingAlgorithm, impKey, value);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: ArrayBuffer, b: ArrayBuffer): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>): Promise<string> {\n    const dataBuffer = forge.util.createBuffer(parameters.data);\n    const decipher = forge.cipher.createDecipher(\"AES-CBC\", parameters.encKey);\n    decipher.start({ iv: parameters.iv });\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    return await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  async rsaEncrypt(\n    data: ArrayBuffer,\n    publicKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    return await this.subtle.encrypt(rsaParams, impKey, data);\n  }\n\n  async rsaDecrypt(\n    data: ArrayBuffer,\n    privateKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    return await this.subtle.decrypt(rsaParams, impKey, data);\n  }\n\n  async rsaExtractPublicKey(privateKey: ArrayBuffer): Promise<ArrayBuffer> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.exportKey(\"spki\", impPublicKey);\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[ArrayBuffer, ArrayBuffer]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = (await this.subtle.generateKey(rsaParams, true, [\n      \"encrypt\",\n      \"decrypt\",\n    ])) as CryptoKeyPair;\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [publicKey, privateKey];\n  }\n\n  randomBytes(length: number): Promise<ArrayBuffer> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr.buffer);\n  }\n\n  private toBuf(value: string | ArrayBuffer): ArrayBuffer {\n    let buf: ArrayBuffer;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value).buffer;\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | ArrayBuffer): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n}\n","import { BrowserApi } from \"./browserApi\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","import { Utils } from \"jslib-common/misc/utils\";\n\nimport { SafariApp } from \"./safariApp\";\n\nexport class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs: any[]) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null\n  ): Promise<any[]> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage(\n    tab: chrome.tabs.Tab,\n    obj: any,\n    options: chrome.tabs.MessageSendOptions = null\n  ): Promise<any> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<void>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, () => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve();\n      });\n    });\n  }\n\n  static async getPrivateModeWindows(): Promise<browser.windows.Window[]> {\n    return (await browser.windows.getAll()).filter((win) => win.incognito);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  static getBackgroundPage(): any {\n    return chrome.extension.getBackgroundPage();\n  }\n\n  static getApplicationVersion(): string {\n    return chrome.runtime.getManifest().version;\n  }\n\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(chrome.extension.getViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, extensionPage = false, active = true) {\n    chrome.tabs.create({ url: url, active: active });\n  }\n\n  static messageListener(\n    name: string,\n    callback: (message: any, sender: chrome.runtime.MessageSender, response: any) => void\n  ) {\n    chrome.runtime.onMessage.addListener(\n      (msg: any, sender: chrome.runtime.MessageSender, response: any) => {\n        callback(msg, sender, response);\n      }\n    );\n  }\n\n  static async closeLoginTab() {\n    const tabs = await BrowserApi.tabsQuery({\n      active: true,\n      title: \"Bitwarden\",\n      windowType: \"normal\",\n      currentWindow: true,\n    });\n\n    if (tabs.length === 0) {\n      return;\n    }\n\n    const tabToClose = tabs[tabs.length - 1].id;\n    chrome.tabs.remove(tabToClose);\n  }\n\n  static async focusSpecifiedTab(tabId: number) {\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static downloadFile(win: Window, blobData: any, blobOptions: any, fileName: string) {\n    if (BrowserApi.isSafariApi) {\n      const type = blobOptions != null ? blobOptions.type : null;\n      let data: string = null;\n      if (type === \"text/plain\" && typeof blobData === \"string\") {\n        data = blobData;\n      } else {\n        data = Utils.fromBufferToB64(blobData);\n      }\n      SafariApp.sendMessageToApp(\n        \"downloadFile\",\n        JSON.stringify({\n          blobData: data,\n          blobOptions: blobOptions,\n          fileName: fileName,\n        }),\n        true\n      );\n    } else {\n      const blob = new Blob([blobData], blobOptions);\n      if (navigator.msSaveOrOpenBlob) {\n        navigator.msSaveBlob(blob, fileName);\n      } else {\n        const a = win.document.createElement(\"a\");\n        a.href = URL.createObjectURL(blob);\n        a.download = fileName;\n        win.document.body.appendChild(a);\n        a.click();\n        win.document.body.removeChild(a);\n      }\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage(win: Window) {\n    return chrome.i18n.getUILanguage();\n  }\n\n  static reloadExtension(win: Window) {\n    if (win != null) {\n      return win.location.reload(true);\n    } else {\n      return chrome.runtime.reload();\n    }\n  }\n\n  static reloadOpenWindows() {\n    const views = chrome.extension.getViews() as Window[];\n    views\n      .filter((w) => w.location.href != null)\n      .forEach((w) => {\n        w.location.reload();\n      });\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve, reject) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n}\n","export class BrowserComponentState {\n  scrollY: number;\n  searchText: string;\n}\n","import { CipherType } from \"jslib-common/enums/cipherType\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { CollectionView } from \"jslib-common/models/view/collectionView\";\nimport { FolderView } from \"jslib-common/models/view/folderView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserGroupingsComponentState extends BrowserComponentState {\n  favoriteCiphers: CipherView[];\n  noFolderCiphers: CipherView[];\n  ciphers: CipherView[];\n  collectionCounts: Map<string, number>;\n  folderCounts: Map<string, number>;\n  typeCounts: Map<CipherType, number>;\n  folders: FolderView[];\n  collections: CollectionView[];\n  deletedCount: number;\n}\n","import { SendType } from \"jslib-common/enums/sendType\";\nimport { SendView } from \"jslib-common/models/view/sendView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserSendComponentState extends BrowserComponentState {\n  sends: SendView[];\n  typeCounts: Map<SendType, number>;\n}\n","import {\n  Account as BaseAccount,\n  AccountSettings as BaseAccountSettings,\n} from \"jslib-common/models/domain/account\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"./browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"./browserSendComponentState\";\n\nexport class AccountSettings extends BaseAccountSettings {\n  vaultTimeout = -1; // On Restart\n}\n\nexport class Account extends BaseAccount {\n  settings?: AccountSettings = new AccountSettings();\n  groupings?: BrowserGroupingsComponentState;\n  send?: BrowserSendComponentState;\n  ciphers?: BrowserComponentState;\n  sendType?: BrowserComponentState;\n\n  constructor(init: Partial<Account>) {\n    super(init);\n    Object.assign(this.settings, {\n      ...new AccountSettings(),\n      ...this.settings,\n    });\n    this.groupings = init?.groupings ?? new BrowserGroupingsComponentState();\n    this.send = init?.send ?? new BrowserSendComponentState();\n    this.ciphers = init?.ciphers ?? new BrowserComponentState();\n    this.sendType = init?.sendType ?? new BrowserComponentState();\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { BrowserApi } from \"../../browser/browserApi\";\n\n@Injectable()\nexport class PopupUtilsService {\n  constructor(private privateMode: boolean = false) {}\n\n  inSidebar(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=sidebar\") > -1;\n  }\n\n  inTab(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=tab\") > -1;\n  }\n\n  inPopout(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=popout\") > -1;\n  }\n\n  inPopup(win: Window): boolean {\n    return (\n      win.location.search === \"\" ||\n      win.location.search.indexOf(\"uilocation=\") === -1 ||\n      win.location.search.indexOf(\"uilocation=popup\") > -1\n    );\n  }\n\n  inPrivateMode(): boolean {\n    return this.privateMode;\n  }\n\n  getContentScrollY(win: Window, scrollingContainer = \"content\"): number {\n    const content = win.document.getElementsByTagName(scrollingContainer)[0];\n    return content.scrollTop;\n  }\n\n  setContentScrollY(win: Window, scrollY: number, scrollingContainer = \"content\"): void {\n    if (scrollY != null) {\n      const content = win.document.getElementsByTagName(scrollingContainer)[0];\n      content.scrollTop = scrollY;\n    }\n  }\n\n  popOut(win: Window, href: string = null): void {\n    if (href === null) {\n      href = win.location.href;\n    }\n\n    if (typeof chrome !== \"undefined\" && chrome.windows && chrome.windows.create) {\n      if (href.indexOf(\"?uilocation=\") > -1) {\n        href = href\n          .replace(\"uilocation=popup\", \"uilocation=popout\")\n          .replace(\"uilocation=tab\", \"uilocation=popout\")\n          .replace(\"uilocation=sidebar\", \"uilocation=popout\");\n      } else {\n        const hrefParts = href.split(\"#\");\n        href =\n          hrefParts[0] + \"?uilocation=popout\" + (hrefParts.length > 0 ? \"#\" + hrefParts[1] : \"\");\n      }\n\n      const bodyRect = document.querySelector(\"body\").getBoundingClientRect();\n      chrome.windows.create({\n        url: href,\n        type: \"popup\",\n        width: Math.round(bodyRect.width ? bodyRect.width + 60 : 375),\n        height: Math.round(bodyRect.height || 600),\n      });\n\n      if (this.inPopup(win)) {\n        BrowserApi.closePopup(win);\n      }\n    } else if (typeof chrome !== \"undefined\" && chrome.tabs && chrome.tabs.create) {\n      href = href\n        .replace(\"uilocation=popup\", \"uilocation=tab\")\n        .replace(\"uilocation=popout\", \"uilocation=tab\")\n        .replace(\"uilocation=sidebar\", \"uilocation=tab\");\n      chrome.tabs.create({\n        url: href,\n      });\n    }\n  }\n}\n","export default class AutofillScript {\n  script: string[][] = [];\n  documentUUID: any = {};\n  properties: any = {};\n  options: any = {};\n  metadata: any = {};\n  autosubmit: any = null;\n\n  constructor(documentUUID: string) {\n    this.documentUUID = documentUUID;\n  }\n}\n","export class AutoFillConstants {\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"email adresse\",\n    \"e-mail adresse\",\n    \"benutzerid\",\n    \"benutzer id\",\n  ];\n\n  static readonly PasswordFieldIgnoreList: string[] = [\n    \"onetimepassword\",\n    \"captcha\",\n    \"findanything\",\n    \"forgot\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\"honorific-prefix\", \"prefix\", \"title\"];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n","import { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { EventService } from \"jslib-common/abstractions/event.service\";\nimport { LogService } from \"jslib-common/abstractions/log.service\";\nimport { TotpService } from \"jslib-common/abstractions/totp.service\";\nimport { CipherRepromptType } from \"jslib-common/enums/cipherRepromptType\";\nimport { CipherType } from \"jslib-common/enums/cipherType\";\nimport { EventType } from \"jslib-common/enums/eventType\";\nimport { FieldType } from \"jslib-common/enums/fieldType\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { FieldView } from \"jslib-common/models/view/fieldView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport AutofillField from \"../models/autofillField\";\nimport AutofillPageDetails from \"../models/autofillPageDetails\";\nimport AutofillScript from \"../models/autofillScript\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport { AutofillService as AutofillServiceInterface } from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofillConstants\";\n\nexport default class AutofillService implements AutofillServiceInterface {\n  constructor(\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private totpService: TotpService,\n    private eventService: EventService,\n    private logService: LogService\n  ) {}\n\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): any[] {\n    const formData: any[] = [];\n\n    const passwordFields = this.loadPasswordFields(pageDetails, true, true, false, false);\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  async doAutoFill(options: any) {\n    let totpPromise: Promise<string> = null;\n    const tab = await this.getActiveTab();\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to auto-fill.\");\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    let didAutofill = false;\n    options.pageDetails.forEach((pd: any) => {\n      // make sure we're still on correct tab\n      if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n        return;\n      }\n\n      const fillScript = this.generateFillScript(pd.details, {\n        skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n        onlyEmptyFields: options.onlyEmptyFields || false,\n        onlyVisibleFields: options.onlyVisibleFields || false,\n        fillNewPassword: options.fillNewPassword || false,\n        cipher: options.cipher,\n      });\n\n      if (!fillScript || !fillScript.script || !fillScript.script.length) {\n        return;\n      }\n\n      // Add a small delay between operations\n      fillScript.properties.delay_between_operations = 20;\n\n      didAutofill = true;\n      if (!options.skipLastUsed) {\n        this.cipherService.updateLastUsedDate(options.cipher.id);\n      }\n\n      BrowserApi.tabSendMessage(\n        tab,\n        {\n          command: \"fillForm\",\n          fillScript: fillScript,\n          url: tab.url,\n        },\n        { frameId: pd.frameId }\n      );\n\n      if (\n        options.cipher.type !== CipherType.Login ||\n        totpPromise ||\n        !options.cipher.login.totp ||\n        (!canAccessPremium && !options.cipher.organizationUseTotp)\n      ) {\n        return;\n      }\n\n      totpPromise = this.totpService.isAutoCopyEnabled().then((enabled) => {\n        if (enabled) {\n          return this.totpService.getCode(options.cipher.login.totp);\n        }\n        return null;\n      });\n    });\n\n    if (didAutofill) {\n      this.eventService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totpPromise != null) {\n        return await totpPromise;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not auto-fill.\");\n    }\n  }\n\n  async doAutoFillActiveTab(pageDetails: any, fromCommand: boolean) {\n    const tab = await this.getActiveTab();\n    if (!tab || !tab.url) {\n      return;\n    }\n\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n\n      if (cipher == null) {\n        return null;\n      }\n    }\n\n    if (cipher.reprompt !== CipherRepromptType.None) {\n      return;\n    }\n\n    const totpCode = await this.doAutoFill({\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n    });\n\n    // Update last used index as autofill has succeed\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  // Helpers\n\n  private async getActiveTab(): Promise<any> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  private generateFillScript(pageDetails: AutofillPageDetails, options: any): AutofillScript {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript(pageDetails.documentUUID);\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f: any) => {\n        if (this.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field: any) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId);\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          this.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = this.generateLoginFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Card:\n        fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Identity:\n        fillScript = this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  private generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    const login = options.cipher.login;\n\n    if (!login.password || login.password === \"\") {\n      // No password for this login. Maybe they just wanted to auto-fill some custom fields?\n      fillScript = this.setFillScriptForFocus(filledFields, fillScript);\n      return fillScript;\n    }\n\n    let passwordFields = this.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = this.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const passwordFieldsForForm: AutofillField[] = [];\n      passwordFields.forEach((passField) => {\n        if (formKey === passField.form) {\n          passwordFieldsForForm.push(passField);\n        }\n      });\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n    }\n\n    if (!passwordFields.length && !options.skipUsernameOnlyFill) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f: any) => {\n        if (\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          this.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n      });\n    }\n\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      this.fillByOpid(fillScript, u, login.username);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      this.fillByOpid(fillScript, p, login.password);\n    });\n\n    fillScript = this.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  private generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f: any) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    if (fillFields.expMonth && this.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      this.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    if (fillFields.expYear && this.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = \"20\" + expYear;\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      this.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    if (fillFields.exp && this.hasValue(card.expMonth) && this.hasValue(card.expYear)) {\n      const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n      let fullYear: string = card.expYear;\n      let partYear: string = null;\n      if (fullYear.length === 2) {\n        partYear = fullYear;\n        fullYear = \"20\" + fullYear;\n      } else if (fullYear.length === 4) {\n        partYear = fullYear.substr(2, 2);\n      }\n\n      let exp: string = null;\n      for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n        if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"/\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"/\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"-\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"-\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + fullYear;\n        }\n\n        if (exp != null) {\n          break;\n        }\n      }\n\n      if (exp == null) {\n        exp = fullYear + \"-\" + fullMonth;\n      }\n\n      this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private fieldAttrsContain(field: any, containsVal: string) {\n    if (!field) {\n      return false;\n    }\n\n    let doesContain = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attr) => {\n      // eslint-disable-next-line\n      if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {\n        return;\n      }\n\n      let val = field[attr];\n      val = val.replace(/ /g, \"\").toLowerCase();\n      doesContain = val.indexOf(containsVal) > -1;\n    });\n\n    return doesContain;\n  }\n\n  private generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f: any) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          this.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          this.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (this.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (this.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (this.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && this.hasValue(identity.address1)) {\n      let address = \"\";\n      if (this.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (this.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (this.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  private isFieldMatch(value: string, options: string[], containsOptions?: string[]): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields\n    );\n  }\n\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField }\n  ) {\n    let doFill = false;\n    if (this.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (this.hasValue(option[j]) && option[j].toLowerCase() === dataValue.toLowerCase()) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      this.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  private loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean\n  ) {\n    const arr: AutofillField[] = [];\n    pageDetails.fields.forEach((f) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      const isPassword = f.type === \"password\";\n      const valueIsLikePassword = (value: string) => {\n        if (value == null) {\n          return false;\n        }\n        // Removes all whitespace, _ and - characters\n        // eslint-disable-next-line\n        const cleanedValue = value.toLowerCase().replace(/[\\s_\\-]/g, \"\");\n\n        if (cleanedValue.indexOf(\"password\") < 0) {\n          return false;\n        }\n\n        if (AutoFillConstants.PasswordFieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1)) {\n          return false;\n        }\n\n        return true;\n      };\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n        if (valueIsLikePassword(f.htmlID)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.htmlName)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.placeholder)) {\n          return true;\n        }\n        return false;\n      };\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n    return arr;\n  }\n\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean\n  ) {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (this.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\"\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!this.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  private fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (this.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (this.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-tag\"]) && this.fuzzyMatch(names, field[\"label-tag\"])) {\n      return true;\n    }\n    if (this.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-left\"]) && this.fuzzyMatch(names, field[\"label-left\"])) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-top\"]) && this.fuzzyMatch(names, field[\"label-top\"])) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-aria\"]) && this.fuzzyMatch(names, field[\"label-aria\"])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private hasValue(str: string): boolean {\n    return str && str !== \"\";\n  }\n\n  private setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  private fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  private forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n}\n","export class EncArrayBuffer {\n  constructor(public buffer: ArrayBuffer) {}\n}\n","import { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptedObject {\n  iv: ArrayBuffer;\n  data: ArrayBuffer;\n  mac: ArrayBuffer;\n  key: SymmetricCryptoKey;\n}\n","import * as bigInt from \"big-integer\";\n\nimport { CryptoService as CryptoServiceAbstraction } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EncryptionType } from \"../enums/encryptionType\";\nimport { HashPurpose } from \"../enums/hashPurpose\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EncryptedObject } from \"../models/domain/encryptedObject\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { ProfileOrganizationResponse } from \"../models/response/profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"../models/response/profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"../models/response/profileProviderResponse\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService\n  ) {}\n\n  async setKey(key: SymmetricCryptoKey, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(key, { userId: userId });\n    await this.storeKey(key, userId);\n  }\n\n  async setKeyHash(keyHash: string): Promise<void> {\n    await this.stateService.setKeyHash(keyHash);\n  }\n\n  async setEncKey(encKey: string): Promise<void> {\n    if (encKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedCryptoSymmetricKey(null);\n    await this.stateService.setEncryptedCryptoSymmetricKey(encKey);\n  }\n\n  async setEncPrivateKey(encPrivateKey: string): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedPrivateKey(null);\n    await this.stateService.setEncryptedPrivateKey(encPrivateKey);\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[],\n    providerOrgs: ProfileProviderOrganizationResponse[]\n  ): Promise<void> {\n    const orgKeys: any = {};\n    orgs.forEach((org) => {\n      orgKeys[org.id] = org.key;\n    });\n\n    for (const providerOrg of providerOrgs) {\n      // Convert provider encrypted keys to user encrypted.\n      const providerKey = await this.getProviderKey(providerOrg.providerId);\n      const decValue = await this.decryptToBytes(new EncString(providerOrg.key), providerKey);\n      orgKeys[providerOrg.id] = (await this.rsaEncrypt(decValue)).encryptedString;\n    }\n\n    await this.stateService.setDecryptedOrganizationKeys(null);\n    return await this.stateService.setEncryptedOrganizationKeys(orgKeys);\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[]): Promise<void> {\n    const providerKeys: any = {};\n    providers.forEach((provider) => {\n      providerKeys[provider.id] = provider.key;\n    });\n\n    await this.stateService.setDecryptedProviderKeys(null);\n    return await this.stateService.setEncryptedProviderKeys(providerKeys);\n  }\n\n  async getKey(keySuffix?: KeySuffixOptions, userId?: string): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getCryptoMasterKey({ userId: userId });\n\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    keySuffix ||= KeySuffixOptions.Auto;\n    const symmetricKey = await this.getKeyFromStorage(keySuffix, userId);\n\n    if (symmetricKey != null) {\n      // TODO: Refactor here so get key doesn't also set key\n      this.setKey(symmetricKey, userId);\n    }\n\n    return symmetricKey;\n  }\n\n  async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: string\n  ): Promise<SymmetricCryptoKey> {\n    const key = await this.retrieveKeyFromStorage(keySuffix, userId);\n    if (key != null) {\n      const symmetricKey = new SymmetricCryptoKey(Utils.fromB64ToArray(key).buffer);\n\n      if (!(await this.validateKey(symmetricKey))) {\n        this.logService.warning(\"Wrong key, throwing away stored key\");\n        await this.clearSecretKeyStore(userId);\n        return null;\n      }\n\n      return symmetricKey;\n    }\n    return null;\n  }\n\n  async getKeyHash(): Promise<string> {\n    return await this.stateService.getKeyHash();\n  }\n\n  async compareAndUpdateKeyHash(masterPassword: string, key: SymmetricCryptoKey): Promise<boolean> {\n    const storedKeyHash = await this.getKeyHash();\n    if (masterPassword != null && storedKeyHash != null) {\n      const localKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.LocalAuthorization\n      );\n      if (localKeyHash != null && storedKeyHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.ServerAuthorization\n      );\n      if (serverKeyHash != null && storedKeyHash === serverKeyHash) {\n        await this.setKeyHash(localKeyHash);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @sequentialize(() => \"getEncKey\")\n  getEncKey(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    return this.getEncKeyHelper(key);\n  }\n\n  async getPublicKey(): Promise<ArrayBuffer> {\n    const inMemoryPublicKey = await this.stateService.getPublicKey();\n    if (inMemoryPublicKey != null) {\n      return inMemoryPublicKey;\n    }\n\n    const privateKey = await this.getPrivateKey();\n    if (privateKey == null) {\n      return null;\n    }\n\n    const publicKey = await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    await this.stateService.setPublicKey(publicKey);\n    return publicKey;\n  }\n\n  async getPrivateKey(): Promise<ArrayBuffer> {\n    const decryptedPrivateKey = await this.stateService.getDecryptedPrivateKey();\n    if (decryptedPrivateKey != null) {\n      return decryptedPrivateKey;\n    }\n\n    const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n    if (encPrivateKey == null) {\n      return null;\n    }\n\n    const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), null);\n    await this.stateService.setDecryptedPrivateKey(privateKey);\n    return privateKey;\n  }\n\n  async getFingerprint(userId: string, publicKey?: ArrayBuffer): Promise<string[]> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      userId,\n      32,\n      \"sha256\"\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  @sequentialize(() => \"getOrgKeys\")\n  async getOrgKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const orgKeys: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedOrganizationKeys = await this.stateService.getDecryptedOrganizationKeys();\n    if (decryptedOrganizationKeys != null && decryptedOrganizationKeys.size > 0) {\n      return decryptedOrganizationKeys;\n    }\n\n    const encOrgKeys = await this.stateService.getEncryptedOrganizationKeys();\n    if (encOrgKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encOrgKeys) {\n      // eslint-disable-next-line\n      if (!encOrgKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encOrgKeys[orgId]);\n      orgKeys.set(orgId, new SymmetricCryptoKey(decValue));\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedOrganizationKeys(orgKeys);\n    }\n\n    return orgKeys;\n  }\n\n  async getOrgKey(orgId: string): Promise<SymmetricCryptoKey> {\n    if (orgId == null) {\n      return null;\n    }\n\n    const orgKeys = await this.getOrgKeys();\n    if (orgKeys == null || !orgKeys.has(orgId)) {\n      return null;\n    }\n\n    return orgKeys.get(orgId);\n  }\n\n  @sequentialize(() => \"getProviderKeys\")\n  async getProviderKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const providerKeys: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedProviderKeys = await this.stateService.getDecryptedProviderKeys();\n    if (decryptedProviderKeys != null && decryptedProviderKeys.size > 0) {\n      return decryptedProviderKeys;\n    }\n\n    const encProviderKeys = await this.stateService.getEncryptedProviderKeys();\n    if (encProviderKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encProviderKeys) {\n      // eslint-disable-next-line\n      if (!encProviderKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encProviderKeys[orgId]);\n      providerKeys.set(orgId, new SymmetricCryptoKey(decValue));\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedProviderKeys(providerKeys);\n    }\n\n    return providerKeys;\n  }\n\n  async getProviderKey(providerId: string): Promise<SymmetricCryptoKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    const providerKeys = await this.getProviderKeys();\n    if (providerKeys == null || !providerKeys.has(providerId)) {\n      return null;\n    }\n\n    return providerKeys.get(providerId);\n  }\n\n  async hasKey(): Promise<boolean> {\n    return (\n      (await this.hasKeyInMemory()) ||\n      (await this.hasKeyStored(KeySuffixOptions.Auto)) ||\n      (await this.hasKeyStored(KeySuffixOptions.Biometric))\n    );\n  }\n\n  async hasKeyInMemory(userId?: string): Promise<boolean> {\n    return (await this.stateService.getCryptoMasterKey({ userId: userId })) != null;\n  }\n\n  async hasKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean> {\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto:\n        return (await this.stateService.getCryptoMasterKeyAuto({ userId: userId })) != null;\n      case KeySuffixOptions.Biometric:\n        return (await this.stateService.hasCryptoMasterKeyBiometric({ userId: userId })) === true;\n      default:\n        return false;\n    }\n  }\n\n  async hasEncKey(): Promise<boolean> {\n    return (await this.stateService.getEncryptedCryptoSymmetricKey()) != null;\n  }\n\n  async clearKey(clearSecretStorage = true, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(null, { userId: userId });\n    await this.stateService.setLegacyEtmKey(null, { userId: userId });\n    if (clearSecretStorage) {\n      await this.clearSecretKeyStore(userId);\n    }\n  }\n\n  async clearStoredKey(keySuffix: KeySuffixOptions) {\n    keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.setCryptoMasterKeyAuto(null)\n      : await this.stateService.setCryptoMasterKeyBiometric(null);\n  }\n\n  async clearKeyHash(userId?: string): Promise<any> {\n    return await this.stateService.setKeyHash(null, { userId: userId });\n  }\n\n  async clearEncKey(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCryptoSymmetricKey(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedCryptoSymmetricKey(null, { userId: userId });\n    }\n  }\n\n  async clearKeyPair(memoryOnly?: boolean, userId?: string): Promise<any> {\n    const keysToClear: Promise<void>[] = [\n      this.stateService.setDecryptedPrivateKey(null, { userId: userId }),\n      this.stateService.setPublicKey(null, { userId: userId }),\n    ];\n    if (!memoryOnly) {\n      keysToClear.push(this.stateService.setEncryptedPrivateKey(null, { userId: userId }));\n    }\n    return Promise.all(keysToClear);\n  }\n\n  async clearOrgKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedOrganizationKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedOrganizationKeys(null, { userId: userId });\n    }\n  }\n\n  async clearProviderKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedProviderKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedProviderKeys(null, { userId: userId });\n    }\n  }\n\n  async clearPinProtectedKey(userId?: string): Promise<any> {\n    return await this.stateService.setEncryptedPinProtected(null, { userId: userId });\n  }\n\n  async clearKeys(userId?: string): Promise<any> {\n    await this.clearKey(true, userId);\n    await this.clearKeyHash(userId);\n    await this.clearOrgKeys(false, userId);\n    await this.clearProviderKeys(false, userId);\n    await this.clearEncKey(false, userId);\n    await this.clearKeyPair(false, userId);\n    await this.clearPinProtectedKey(userId);\n  }\n\n  async toggleKey(): Promise<any> {\n    const key = await this.getKey();\n\n    await this.setKey(key);\n  }\n\n  async makeKey(\n    password: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    let key: ArrayBuffer = null;\n    if (kdf == null || kdf === KdfType.PBKDF2_SHA256) {\n      if (kdfIterations == null) {\n        kdfIterations = 5000;\n      } else if (kdfIterations < 5000) {\n        throw new Error(\"PBKDF2 iteration minimum is 5000.\");\n      }\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfIterations);\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n\n  async makeKeyFromPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    protectedKeyCs: EncString = null\n  ): Promise<SymmetricCryptoKey> {\n    if (protectedKeyCs == null) {\n      const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n      if (pinProtectedKey == null) {\n        throw new Error(\"No PIN protected key found.\");\n      }\n      protectedKeyCs = new EncString(pinProtectedKey);\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfIterations);\n    const decKey = await this.decryptToBytes(protectedKeyCs, pinKey);\n    return new SymmetricCryptoKey(decKey);\n  }\n\n  async makeShareKey(): Promise<[EncString, SymmetricCryptoKey]> {\n    const shareKey = await this.cryptoFunctionService.randomBytes(64);\n    const publicKey = await this.getPublicKey();\n    const encShareKey = await this.rsaEncrypt(shareKey, publicKey);\n    return [encShareKey, new SymmetricCryptoKey(shareKey)];\n  }\n\n  async makeKeyPair(key?: SymmetricCryptoKey): Promise<[string, EncString]> {\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  async makePinKey(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    const pinKey = await this.makeKey(pin, salt, kdf, kdfIterations);\n    return await this.stretchKey(pinKey);\n  }\n\n  async makeSendKey(keyMaterial: ArrayBuffer): Promise<SymmetricCryptoKey> {\n    const sendKey = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(sendKey);\n  }\n\n  async hashPassword(\n    password: string,\n    key: SymmetricCryptoKey,\n    hashPurpose?: HashPurpose\n  ): Promise<string> {\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  async makeEncKey(key: SymmetricCryptoKey): Promise<[SymmetricCryptoKey, EncString]> {\n    const theKey = await this.getKeyForEncryption(key);\n    const encKey = await this.cryptoFunctionService.randomBytes(64);\n    return this.buildEncKey(theKey, encKey);\n  }\n\n  async remakeEncKey(\n    key: SymmetricCryptoKey,\n    encKey?: SymmetricCryptoKey\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (encKey == null) {\n      encKey = await this.getEncKey();\n    }\n    return this.buildEncKey(key, encKey.key);\n  }\n\n  async encrypt(plainValue: string | ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncString> {\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: ArrayBuffer;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue).buffer;\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes.buffer);\n  }\n\n  async rsaEncrypt(data: ArrayBuffer, publicKey?: ArrayBuffer): Promise<EncString> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey == null) {\n      throw new Error(\"Public key unavailable.\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKeyValue?: ArrayBuffer): Promise<ArrayBuffer> {\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]).buffer;\n    const privateKey = privateKeyValue ?? (await this.getPrivateKey());\n    if (privateKey == null) {\n      throw new Error(\"No private key.\");\n    }\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    const iv = Utils.fromB64ToArray(encString.iv).buffer;\n    const data = Utils.fromB64ToArray(encString.data).buffer;\n    const mac = encString.mac ? Utils.fromB64ToArray(encString.mac).buffer : null;\n    const decipher = await this.aesDecryptToBytes(encString.encryptionType, data, iv, mac, key);\n    if (decipher == null) {\n      return null;\n    }\n\n    return decipher;\n  }\n\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    return await this.aesDecryptToUtf8(\n      encString.encryptionType,\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key\n    );\n  }\n\n  async decryptFromBytes(encBuf: ArrayBuffer, key: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    if (encBuf == null) {\n      throw new Error(\"no encBuf.\");\n    }\n\n    const encBytes = new Uint8Array(encBuf);\n    const encType = encBytes[0];\n    let ctBytes: Uint8Array = null;\n    let ivBytes: Uint8Array = null;\n    let macBytes: Uint8Array = null;\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encBytes.length <= 49) {\n          // 1 + 16 + 32 + ctLength\n          return null;\n        }\n\n        ivBytes = encBytes.slice(1, 17);\n        macBytes = encBytes.slice(17, 49);\n        ctBytes = encBytes.slice(49);\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encBytes.length <= 17) {\n          // 1 + 16 + ctLength\n          return null;\n        }\n\n        ivBytes = encBytes.slice(1, 17);\n        ctBytes = encBytes.slice(17);\n        break;\n      default:\n        return null;\n    }\n\n    return await this.aesDecryptToBytes(\n      encType,\n      ctBytes.buffer,\n      ivBytes.buffer,\n      macBytes != null ? macBytes.buffer : null,\n      key\n    );\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  async validateKey(key: SymmetricCryptoKey) {\n    try {\n      const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n      const encKey = await this.getEncKeyHelper(key);\n      if (encPrivateKey == null || encKey == null) {\n        return false;\n      }\n\n      const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), encKey);\n      await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Helpers\n  protected async storeKey(key: SymmetricCryptoKey, userId?: string) {\n    if (await this.shouldStoreKey(KeySuffixOptions.Auto, userId)) {\n      await this.stateService.setCryptoMasterKeyAuto(key.keyB64, { userId: userId });\n    } else if (await this.shouldStoreKey(KeySuffixOptions.Biometric, userId)) {\n      await this.stateService.setCryptoMasterKeyBiometric(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n      await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: string) {\n    let shouldStoreKey = false;\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n      shouldStoreKey = vaultTimeout == null;\n    } else if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricUnlock = await this.stateService.getBiometricUnlock({ userId: userId });\n      shouldStoreKey = biometricUnlock && this.platformUtilService.supportsSecureStorage();\n    }\n    return shouldStoreKey;\n  }\n\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions, userId?: string) {\n    return keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.getCryptoMasterKeyAuto({ userId: userId })\n      : await this.stateService.getCryptoMasterKeyBiometric({ userId: userId });\n  }\n\n  private async aesEncrypt(data: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = await this.getKeyForEncryption(key);\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private async aesDecryptToUtf8(\n    encType: EncryptionType,\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): Promise<string> {\n    const keyForEnc = await this.getKeyForEncryption(key);\n    const theKey = await this.resolveLegacyKey(encType, keyForEnc);\n\n    if (theKey.macKey != null && mac == null) {\n      this.logService.error(\"mac required.\");\n      return null;\n    }\n\n    if (theKey.encType !== encType) {\n      this.logService.error(\"encType unavailable.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(data, iv, mac, theKey);\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\"\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logService.error(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return this.cryptoFunctionService.aesDecryptFast(fastParams);\n  }\n\n  private async aesDecryptToBytes(\n    encType: EncryptionType,\n    data: ArrayBuffer,\n    iv: ArrayBuffer,\n    mac: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<ArrayBuffer> {\n    const keyForEnc = await this.getKeyForEncryption(key);\n    const theKey = await this.resolveLegacyKey(encType, keyForEnc);\n\n    if (theKey.macKey != null && mac == null) {\n      return null;\n    }\n\n    if (theKey.encType !== encType) {\n      return null;\n    }\n\n    if (theKey.macKey != null && mac != null) {\n      const macData = new Uint8Array(iv.byteLength + data.byteLength);\n      macData.set(new Uint8Array(iv), 0);\n      macData.set(new Uint8Array(data), iv.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(\n        macData.buffer,\n        theKey.macKey,\n        \"sha256\"\n      );\n      if (computedMac === null) {\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(mac, computedMac);\n      if (!macsMatch) {\n        this.logService.error(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecrypt(data, iv, theKey.encKey);\n  }\n\n  private async getKeyForEncryption(key?: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    if (key != null) {\n      return key;\n    }\n\n    const encKey = await this.getEncKey();\n    if (encKey != null) {\n      return encKey;\n    }\n\n    return await this.getKey();\n  }\n\n  private async resolveLegacyKey(\n    encType: EncryptionType,\n    key: SymmetricCryptoKey\n  ): Promise<SymmetricCryptoKey> {\n    if (\n      encType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      // Old encrypt-then-mac scheme, make a new key\n      let legacyKey = await this.stateService.getLegacyEtmKey();\n      if (legacyKey == null) {\n        legacyKey = new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n        await this.stateService.setLegacyEtmKey(legacyKey);\n      }\n      return legacyKey;\n    }\n\n    return key;\n  }\n\n  private async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n    return new SymmetricCryptoKey(newKey.buffer);\n  }\n\n  private async hashPhrase(hash: ArrayBuffer, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EEFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EEFLongWordList.length);\n      hashNumber = hashNumber.divide(EEFLongWordList.length);\n      phrase.push(EEFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildEncKey(\n    key: SymmetricCryptoKey,\n    encKey: ArrayBuffer\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    let encKeyEnc: EncString = null;\n    if (key.key.byteLength === 32) {\n      const newKey = await this.stretchKey(key);\n      encKeyEnc = await this.encrypt(encKey, newKey);\n    } else if (key.key.byteLength === 64) {\n      encKeyEnc = await this.encrypt(encKey, key);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(encKey), encKeyEnc];\n  }\n\n  private async clearSecretKeyStore(userId?: string): Promise<void> {\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n  }\n\n  private async getEncKeyHelper(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getDecryptedCryptoSymmetricKey();\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    const encKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n    if (encKey == null) {\n      return null;\n    }\n\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (key == null) {\n      return null;\n    }\n\n    let decEncKey: ArrayBuffer;\n    const encKeyCipher = new EncString(encKey);\n    if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_B64) {\n      decEncKey = await this.decryptToBytes(encKeyCipher, key);\n    } else if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.stretchKey(key);\n      decEncKey = await this.decryptToBytes(encKeyCipher, newKey);\n    } else {\n      throw new Error(\"Unsupported encKey type.\");\n    }\n    if (decEncKey == null) {\n      return null;\n    }\n    const symmetricCryptoKey = new SymmetricCryptoKey(decEncKey);\n    await this.stateService.setDecryptedCryptoSymmetricKey(symmetricCryptoKey);\n    return symmetricCryptoKey;\n  }\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  Mobile = \"mobile\",\n  Cli = \"cli\",\n  DirectoryConnector = \"connector\",\n}\n","import { KeySuffixOptions } from \"jslib-common/enums/keySuffixOptions\";\nimport { CryptoService } from \"jslib-common/services/crypto.service\";\n\nexport class BrowserCryptoService extends CryptoService {\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions) {\n    if (keySuffix === \"biometric\") {\n      await this.platformUtilService.authenticateBiometric();\n      return (await this.getKey())?.keyB64;\n    }\n\n    return await super.retrieveKeyFromStorage(keySuffix);\n  }\n}\n","import { MessagingService } from \"jslib-common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    chrome.runtime.sendMessage(message);\n  }\n}\n","import { MessagingService } from \"jslib-common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingPrivateModeBackgroundService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    (window as any).bitwardenPopupMainMessageListener(message);\n  }\n}\n","import { MessagingService } from \"jslib-common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { ClientType } from \"jslib-common/enums/clientType\";\nimport { DeviceType } from \"jslib-common/enums/deviceType\";\nimport { ThemeType } from \"jslib-common/enums/themeType\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst DialogPromiseExpiration = 600000; // 10 minutes\n\nexport default class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private showDialogResolves = new Map<number, { resolve: (value: boolean) => void; date: Date }>();\n  private passwordDialogResolves = new Map<\n    number,\n    { tryResolve: (canceled: boolean, password: string) => Promise<boolean>; date: Date }\n  >();\n  private deviceCache: DeviceType = null;\n  private prefersColorSchemeDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n  constructor(\n    private messagingService: MessagingService,\n    private stateService: StateService,\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private biometricCallback: () => Promise<boolean>\n  ) {}\n\n  getDevice(): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    ) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (\n      (!!(window as any).opr && !!opr.addons) ||\n      !!(window as any).opera ||\n      navigator.userAgent.indexOf(\" OPR/\") >= 0\n    ) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (navigator.userAgent.indexOf(\" Edg/\") !== -1) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (navigator.userAgent.indexOf(\" Vivaldi/\") !== -1) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if ((window as any).chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (navigator.userAgent.indexOf(\" Safari/\") !== -1) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  async isViewOpen(): Promise<boolean> {\n    if (await BrowserApi.isPopupOpen()) {\n      return true;\n    }\n\n    if (this.isSafari()) {\n      return false;\n    }\n\n    const sidebarView = this.sidebarViewName();\n    const sidebarOpen =\n      sidebarView != null && chrome.extension.getViews({ type: sidebarView }).length > 0;\n    if (sidebarOpen) {\n      return true;\n    }\n\n    const tabOpen = chrome.extension.getViews({ type: \"tab\" }).length > 0;\n    return tabOpen;\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  saveFile(win: Window, blobData: any, blobOptions: any, fileName: string): void {\n    BrowserApi.downloadFile(win, blobData, blobOptions, fileName);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    return Promise.resolve(BrowserApi.getApplicationVersion());\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n\n  showDialog(\n    body: string,\n    title?: string,\n    confirmText?: string,\n    cancelText?: string,\n    type?: string,\n    bodyIsHtml = false\n  ) {\n    const dialogId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.messagingService.send(\"showDialog\", {\n      text: bodyIsHtml ? null : body,\n      html: bodyIsHtml ? body : null,\n      title: title,\n      confirmText: confirmText,\n      cancelText: cancelText,\n      type: type,\n      dialogId: dialogId,\n    });\n    return new Promise<boolean>((resolve) => {\n      this.showDialogResolves.set(dialogId, { resolve: resolve, date: new Date() });\n    });\n  }\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  copyToClipboard(text: string, options?: any): void {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n    const clearing = options ? !!options.clearing : false;\n    const clearMs: number = options && options.clearMs ? options.clearMs : null;\n\n    if (this.isSafari()) {\n      SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.writeText\n    ) {\n      (win as any).navigator.clipboard.writeText(text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if ((win as any).clipboardData && (win as any).clipboardData.setData) {\n      // IE specific code path to prevent textarea being shown while dialog is visible.\n      (win as any).clipboardData.setData(\"Text\", text);\n      if (!clearing && this.clipboardWriteCallback != null) {\n        this.clipboardWriteCallback(text, clearMs);\n      }\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"copy\")) {\n      if (this.isChrome() && text === \"\") {\n        text = \"\\u0000\";\n      }\n\n      const textarea = doc.createElement(\"textarea\");\n      textarea.textContent = text == null || text === \"\" ? \" \" : text;\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.select();\n\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"copy\") && !clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Copy to clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n  }\n\n  async readFromClipboard(options?: any): Promise<string> {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.readText\n    ) {\n      return await (win as any).navigator.clipboard.readText();\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"paste\")) {\n      const textarea = doc.createElement(\"textarea\");\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.focus();\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"paste\")) {\n          return textarea.value;\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Read from clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n    return null;\n  }\n\n  resolveDialogPromise(dialogId: number, confirmed: boolean) {\n    if (this.showDialogResolves.has(dialogId)) {\n      const resolveObj = this.showDialogResolves.get(dialogId);\n      resolveObj.resolve(confirmed);\n      this.showDialogResolves.delete(dialogId);\n    }\n\n    // Clean up old promises\n    this.showDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.showDialogResolves.delete(key);\n      }\n    });\n  }\n\n  async resolvePasswordDialogPromise(\n    dialogId: number,\n    canceled: boolean,\n    password: string\n  ): Promise<boolean> {\n    let result = false;\n    if (this.passwordDialogResolves.has(dialogId)) {\n      const resolveObj = this.passwordDialogResolves.get(dialogId);\n      if (await resolveObj.tryResolve(canceled, password)) {\n        this.passwordDialogResolves.delete(dialogId);\n        result = true;\n      }\n    }\n\n    // Clean up old promises\n    this.passwordDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.passwordDialogResolves.delete(key);\n      }\n    });\n\n    return result;\n  }\n\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"android\") {\n      return false;\n    }\n\n    if (this.isFirefox()) {\n      return parseInt((await browser.runtime.getBrowserInfo()).version.split(\".\")[0], 10) >= 87;\n    }\n\n    return true;\n  }\n\n  authenticateBiometric() {\n    return this.biometricCallback();\n  }\n\n  sidebarViewName(): string {\n    if ((window as any).chrome.sidebarAction && this.isFirefox()) {\n      return \"sidebar\";\n    } else if (this.isOpera() && typeof opr !== \"undefined\" && opr.sidebarAction) {\n      return \"sidebar_panel\";\n    }\n\n    return null;\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n\n  getDefaultSystemTheme(): Promise<ThemeType.Light | ThemeType.Dark> {\n    return Promise.resolve(this.prefersColorSchemeDark.matches ? ThemeType.Dark : ThemeType.Light);\n  }\n\n  onDefaultSystemThemeChange(callback: (theme: ThemeType.Light | ThemeType.Dark) => unknown) {\n    this.prefersColorSchemeDark.addEventListener(\"change\", ({ matches }) => {\n      callback(matches ? ThemeType.Dark : ThemeType.Light);\n    });\n  }\n\n  async getEffectiveTheme() {\n    const theme = (await this.stateService.getTheme()) as ThemeType;\n    if (theme == null || theme === ThemeType.System) {\n      return this.getDefaultSystemTheme();\n    } else {\n      return theme;\n    }\n  }\n}\n","import { StorageService } from \"jslib-common/abstractions/storage.service\";\n\nexport default class BrowserStorageService implements StorageService {\n  private chromeStorageApi: any;\n\n  constructor() {\n    this.chromeStorageApi = chrome.storage.local;\n  }\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve) => {\n      this.chromeStorageApi.get(key, (obj: any) => {\n        if (obj != null && obj[key] != null) {\n          resolve(obj[key] as T);\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<any> {\n    if (obj == null) {\n      // Fix safari not liking null in set\n      return new Promise<void>((resolve) => {\n        this.chromeStorageApi.remove(key, () => {\n          resolve();\n        });\n      });\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<any> {\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.remove(key, () => {\n        resolve();\n      });\n    });\n  }\n}\n","import { I18nService as BaseI18nService } from \"jslib-common/services/i18n.service\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string) {\n    super(systemLanguage, null, async (formattedLocale: string) => {\n      // Deprecated\n      const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n      return await file.json();\n    });\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"nb\",\n      \"nl\",\n      \"nn\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\n\nexport class I18nService implements I18nServiceAbstraction {\n  locale: string;\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.locale = this.translationLocale = locale != null ? locale : this.systemLanguage;\n\n    try {\n      this.collator = new Intl.Collator(this.locale, { numeric: true, sensitivity: \"base\" });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.supportedTranslationLocales[0];\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.supportedTranslationLocales[0]) {\n        await this.loadMessages(this.supportedTranslationLocales[0], this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1);\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2);\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3);\n      }\n    }\n\n    return result;\n  }\n\n  private async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent\n          );\n        }\n      }\n    }\n  }\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","import { Account } from \"./account\";\nimport { GlobalState } from \"./globalState\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n  activeUserId: string;\n  authenticatedAccounts: string[] = [];\n  accountActivity: { [userId: string]: number } = {};\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService as StateServiceAbstraction } from \"../abstractions/state.service\";\nimport { StateMigrationService } from \"../abstractions/stateMigration.service\";\nimport { StorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StorageLocation } from \"../enums/storageLocation\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountData } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { Policy } from \"../models/domain/policy\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { SendView } from \"../models/view/sendView\";\n\nconst keys = {\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> implements StateServiceAbstraction<TAccount>\n{\n  accounts = new BehaviorSubject<{ [userId: string]: TAccount }>({});\n  activeAccount = new BehaviorSubject<string>(null);\n\n  protected state: State<TGlobalState, TAccount> = new State<TGlobalState, TAccount>(\n    this.createGlobals()\n  );\n\n  private hasBeenInited = false;\n\n  private accountDiskCache: Map<string, TAccount>;\n\n  constructor(\n    protected storageService: StorageService,\n    protected secureStorageService: StorageService,\n    protected logService: LogService,\n    protected stateMigrationService: StateMigrationService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected useAccountCache: boolean = true\n  ) {\n    this.accountDiskCache = new Map<string, TAccount>();\n  }\n\n  async init(): Promise<void> {\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    if (await this.stateMigrationService.needsMigration()) {\n      await this.stateMigrationService.migrate();\n    }\n\n    await this.initAccountState();\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    this.state.authenticatedAccounts =\n      (await this.storageService.get<string[]>(keys.authenticatedAccounts)) ?? [];\n    for (const i in this.state.authenticatedAccounts) {\n      if (i != null) {\n        await this.syncAccountFromDisk(this.state.authenticatedAccounts[i]);\n      }\n    }\n    const storedActiveUser = await this.storageService.get<string>(keys.activeUserId);\n    if (storedActiveUser != null) {\n      this.state.activeUserId = storedActiveUser;\n    }\n    await this.pushAccounts();\n    this.activeAccount.next(this.state.activeUserId);\n  }\n\n  async syncAccountFromDisk(userId: string) {\n    if (userId == null) {\n      return;\n    }\n    this.state.accounts[userId] = this.createAccount();\n    const diskAccount = await this.getAccountFromDisk({ userId: userId });\n    this.state.accounts[userId].profile = diskAccount.profile;\n  }\n\n  async addAccount(account: TAccount) {\n    account = await this.setAccountEnvironmentUrls(account);\n    this.state.authenticatedAccounts.push(account.profile.userId);\n    await this.storageService.save(keys.authenticatedAccounts, this.state.authenticatedAccounts);\n    this.state.accounts[account.profile.userId] = account;\n    await this.scaffoldNewAccountStorage(account);\n    await this.setLastActive(new Date().getTime(), { userId: account.profile.userId });\n    await this.setActiveUser(account.profile.userId);\n    this.activeAccount.next(account.profile.userId);\n  }\n\n  async setActiveUser(userId: string): Promise<void> {\n    this.clearDecryptedDataForActiveUser();\n    this.state.activeUserId = userId;\n    await this.storageService.save(keys.activeUserId, userId);\n    this.activeAccount.next(this.state.activeUserId);\n    await this.pushAccounts();\n  }\n\n  async clean(options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, this.defaultInMemoryOptions);\n    await this.deAuthenticateAccount(options.userId);\n    if (options.userId === this.state.activeUserId) {\n      await this.dynamicallySetActiveUser();\n    }\n\n    await this.removeAccountFromDisk(options?.userId);\n    this.removeAccountFromMemory(options?.userId);\n    await this.pushAccounts();\n  }\n\n  async getAccessToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.accessToken;\n  }\n\n  async setAccessToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.accessToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAddEditCipherInfo(options?: StorageOptions): Promise<any> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.addEditCipherInfo;\n  }\n\n  async setAddEditCipherInfo(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.addEditCipherInfo = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getAlwaysShowDock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.alwaysShowDock ?? false\n    );\n  }\n\n  async setAlwaysShowDock(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.alwaysShowDock = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getApiKeyClientId(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.profile?.apiKeyClientId;\n  }\n\n  async setApiKeyClientId(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.profile.apiKeyClientId = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getApiKeyClientSecret(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.keys?.apiKeyClientSecret;\n  }\n\n  async setApiKeyClientSecret(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.keys.apiKeyClientSecret = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAutoConfirmFingerPrints(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoConfirmFingerPrints ?? false\n    );\n  }\n\n  async setAutoConfirmFingerprints(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoConfirmFingerPrints = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getAutoFillOnPageLoadDefault(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoFillOnPageLoadDefault ?? true\n    );\n  }\n\n  async setAutoFillOnPageLoadDefault(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoFillOnPageLoadDefault = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricAwaitingAcceptance(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricAwaitingAcceptance ?? false\n    );\n  }\n\n  async setBiometricAwaitingAcceptance(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricAwaitingAcceptance = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricFingerprintValidated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricFingerprintValidated ?? false\n    );\n  }\n\n  async setBiometricFingerprintValidated(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricFingerprintValidated = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricLocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))?.settings\n        ?.biometricLocked ?? false\n    );\n  }\n\n  async setBiometricLocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.settings.biometricLocked = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getBiometricText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.biometricText;\n  }\n\n  async setBiometricText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricUnlock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.biometricUnlock ?? false\n    );\n  }\n\n  async setBiometricUnlock(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.biometricUnlock = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCanAccessPremium(options?: StorageOptions): Promise<boolean> {\n    if (!(await this.getIsAuthenticated(options))) {\n      return false;\n    }\n\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    if (account.profile.hasPremiumPersonally) {\n      return true;\n    }\n\n    const organizations = await this.getOrganizations(options);\n    if (organizations == null) {\n      return false;\n    }\n\n    for (const id of Object.keys(organizations)) {\n      const o = organizations[id];\n      if (o.enabled && o.usersGetPremium && !o.isProviderUser) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getClearClipboard(options?: StorageOptions): Promise<number> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.clearClipboard ?? null\n    );\n  }\n\n  async setClearClipboard(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.clearClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getCollapsedGroupings(options?: StorageOptions): Promise<string[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.collapsedGroupings;\n  }\n\n  async setCollapsedGroupings(value: string[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.collapsedGroupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getConvertAccountToKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.convertAccountToKeyConnector;\n  }\n\n  async setConvertAccountToKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.convertAccountToKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCryptoMasterKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.cryptoMasterKey;\n  }\n\n  async setCryptoMasterKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.cryptoMasterKey = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getCryptoMasterKeyAuto(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get(`${options.userId}${partialKeys.autoKey}`, options);\n  }\n\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  async getCryptoMasterKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async hasCryptoMasterKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyBiometric(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.biometricKey, value, options);\n  }\n\n  async getDecodedToken(options?: StorageOptions): Promise<any> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.tokens?.decodedToken;\n  }\n\n  async setDecodedToken(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.tokens.decodedToken = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedCiphers(options?: StorageOptions): Promise<CipherView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.ciphers?.decrypted;\n  }\n\n  async setDecryptedCiphers(value: CipherView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.ciphers.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedCollections(options?: StorageOptions): Promise<CollectionView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.collections?.decrypted;\n  }\n\n  async setDecryptedCollections(value: CollectionView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.collections.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedCryptoSymmetricKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.cryptoSymmetricKey?.decrypted;\n  }\n\n  async setDecryptedCryptoSymmetricKey(\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.cryptoSymmetricKey.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedFolders(options?: StorageOptions): Promise<FolderView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.folders?.decrypted;\n  }\n\n  async setDecryptedFolders(value: FolderView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.folders.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.organizationKeys?.decrypted;\n  }\n\n  async setDecryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.organizationKeys.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.passwordGenerationHistory?.decrypted;\n  }\n\n  async setDecryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.passwordGenerationHistory.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPinProtected(options?: StorageOptions): Promise<EncString> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.settings?.pinProtected?.decrypted;\n  }\n\n  async setDecryptedPinProtected(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.settings.pinProtected.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPolicies(options?: StorageOptions): Promise<Policy[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.policies?.decrypted;\n  }\n\n  async setDecryptedPolicies(value: Policy[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.policies.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedPrivateKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.privateKey?.decrypted;\n  }\n\n  async setDecryptedPrivateKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.privateKey.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedProviderKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.providerKeys?.decrypted;\n  }\n\n  async setDecryptedProviderKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.providerKeys.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDecryptedSends(options?: StorageOptions): Promise<SendView[]> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.data?.sends?.decrypted;\n  }\n\n  async setDecryptedSends(value: SendView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.data.sends.decrypted = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getDefaultUriMatch(options?: StorageOptions): Promise<UriMatchType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.defaultUriMatch;\n  }\n\n  async setDefaultUriMatch(value: UriMatchType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.defaultUriMatch = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAddLoginNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAddLoginNotification ?? false\n    );\n  }\n\n  async setDisableAddLoginNotification(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAddLoginNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoBiometricsPrompt(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoBiometricsPrompt ?? false\n    );\n  }\n\n  async setDisableAutoBiometricsPrompt(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoBiometricsPrompt = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoTotpCopy(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoTotpCopy ?? false\n    );\n  }\n\n  async setDisableAutoTotpCopy(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoTotpCopy = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableBadgeCounter(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableBadgeCounter ?? false\n    );\n  }\n\n  async setDisableBadgeCounter(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableBadgeCounter = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableChangedPasswordNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableChangedPasswordNotification ?? false\n    );\n  }\n\n  async setDisableChangedPasswordNotification(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableChangedPasswordNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableContextMenuItem(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableContextMenuItem ?? false\n    );\n  }\n\n  async setDisableContextMenuItem(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableContextMenuItem = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableFavicon(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getGlobals(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.disableFavicon ?? false\n    );\n  }\n\n  async setDisableFavicon(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.disableFavicon = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getDisableGa(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableGa ?? false\n    );\n  }\n\n  async setDisableGa(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableGa = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowCardsCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowCardsCurrentTab ?? false\n    );\n  }\n\n  async setDontShowCardsCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowCardsCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowIdentitiesCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowIdentitiesCurrentTab ?? false\n    );\n  }\n\n  async setDontShowIdentitiesCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowIdentitiesCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEmail(options?: StorageOptions): Promise<string> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.profile?.email;\n  }\n\n  async setEmail(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.profile.email = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getEmailVerified(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile.emailVerified ?? false\n    );\n  }\n\n  async setEmailVerified(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.emailVerified = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAlwaysOnTop(options?: StorageOptions): Promise<boolean> {\n    const accountPreference = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.enableAlwaysOnTop;\n    const globalPreference = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.enableAlwaysOnTop;\n    return accountPreference ?? globalPreference ?? false;\n  }\n\n  async setEnableAlwaysOnTop(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAlwaysOnTop = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableAlwaysOnTop = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAutoFillOnPageLoad(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.enableAutoFillOnPageLoad ?? false\n    );\n  }\n\n  async setEnableAutoFillOnPageLoad(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAutoFillOnPageLoad = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBiometric(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBiometrics ?? false\n    );\n  }\n\n  async setEnableBiometric(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableBrowserIntegration(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegrationFingerprint(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegrationFingerprint ?? false\n    );\n  }\n\n  async setEnableBrowserIntegrationFingerprint(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegrationFingerprint = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableCloseToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableCloseToTray ?? false\n    );\n  }\n\n  async setEnableCloseToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableCloseToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableFullWidth(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableFullWidth ?? false\n    );\n  }\n\n  async setEnableFullWidth(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableFullWidth = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableGravitars(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableGravitars ?? false\n    );\n  }\n\n  async setEnableGravitars(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableGravitars = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableMinimizeToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableMinimizeToTray ?? false\n    );\n  }\n\n  async setEnableMinimizeToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableMinimizeToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableStartToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableStartToTray ?? false\n    );\n  }\n\n  async setEnableStartToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableStartToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableTray ?? false\n    );\n  }\n\n  async setEnableTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedCiphers(options?: StorageOptions): Promise<{ [id: string]: CipherData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.ciphers?.encrypted;\n  }\n\n  async setEncryptedCiphers(\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.ciphers.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedCollections(\n    options?: StorageOptions\n  ): Promise<{ [id: string]: CollectionData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.collections?.encrypted;\n  }\n\n  async setEncryptedCollections(\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.collections.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  async setEncryptedCryptoSymmetricKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.cryptoSymmetricKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedFolders(options?: StorageOptions): Promise<{ [id: string]: FolderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.folders?.encrypted;\n  }\n\n  async setEncryptedFolders(\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.folders.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedOrganizationKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.organizationKeys.encrypted;\n  }\n\n  async setEncryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.organizationKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.passwordGenerationHistory?.encrypted;\n  }\n\n  async setEncryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.passwordGenerationHistory.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPinProtected(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.pinProtected?.encrypted;\n  }\n\n  async setEncryptedPinProtected(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.pinProtected.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPolicies(options?: StorageOptions): Promise<{ [id: string]: PolicyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.policies?.encrypted;\n  }\n\n  async setEncryptedPolicies(\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.policies.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPrivateKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.privateKey?.encrypted;\n  }\n\n  async setEncryptedPrivateKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.privateKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedProviderKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.providerKeys?.encrypted;\n  }\n\n  async setEncryptedProviderKeys(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.providerKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedSends(options?: StorageOptions): Promise<{ [id: string]: SendData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.sends.encrypted;\n  }\n\n  async setEncryptedSends(\n    value: { [id: string]: SendData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.sends.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEntityId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityId;\n  }\n\n  async setEntityId(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityId = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEntityType(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityType;\n  }\n\n  async setEntityType(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    if (this.state.activeUserId == null) {\n      return await this.getGlobalEnvironmentUrls(options);\n    }\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getAccount(options))?.settings?.environmentUrls ?? new EnvironmentUrls();\n  }\n\n  async setEnvironmentUrls(value: EnvironmentUrls, options?: StorageOptions): Promise<void> {\n    // Global values are set on each change and the current global settings are passed to any newly authed accounts.\n    // This is to allow setting environement values before an account is active, while still allowing individual accounts to have their own environments.\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.environmentUrls = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEquivalentDomains(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.equivalentDomains;\n  }\n\n  async setEquivalentDomains(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.equivalentDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEventCollection(options?: StorageOptions): Promise<EventData[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.eventCollection;\n  }\n\n  async setEventCollection(value: EventData[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.eventCollection = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEverBeenUnlocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))?.profile\n        ?.everBeenUnlocked ?? false\n    );\n  }\n\n  async setEverBeenUnlocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.profile.everBeenUnlocked = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getForcePasswordReset(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))?.profile\n        ?.forcePasswordReset ?? false\n    );\n  }\n\n  async setForcePasswordReset(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.profile.forcePasswordReset = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getInstalledVersion(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.installedVersion;\n  }\n\n  async setInstalledVersion(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.installedVersion = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (await this.getAccessToken(options)) != null && (await this.getUserId(options)) != null;\n  }\n\n  async getKdfIterations(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfIterations;\n  }\n\n  async setKdfIterations(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfIterations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKdfType(options?: StorageOptions): Promise<KdfType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfType;\n  }\n\n  async setKdfType(value: KdfType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKeyHash(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.keyHash;\n  }\n\n  async setKeyHash(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.keyHash = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLastActive(options?: StorageOptions): Promise<number> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n\n    const accountActivity = await this.storageService.get<{ [userId: string]: number }>(\n      keys.accountActivity,\n      options\n    );\n\n    if (accountActivity == null || Object.keys(accountActivity).length < 1) {\n      return null;\n    }\n\n    return accountActivity[options.userId];\n  }\n\n  async setLastActive(value: number, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    if (options.userId == null) {\n      return;\n    }\n    const accountActivity =\n      (await this.storageService.get<{ [userId: string]: number }>(\n        keys.accountActivity,\n        options\n      )) ?? {};\n    accountActivity[options.userId] = value;\n    await this.storageService.save(keys.accountActivity, accountActivity, options);\n  }\n\n  async getLastSync(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.profile?.lastSync;\n  }\n\n  async setLastSync(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.profile.lastSync = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getLegacyEtmKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.legacyEtmKey;\n  }\n\n  async setLegacyEtmKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.legacyEtmKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLocalData(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.data?.localData;\n  }\n  async setLocalData(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.data.localData = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getLocale(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.locale;\n  }\n\n  async setLocale(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.locale = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getMainWindowSize(options?: StorageOptions): Promise<number> {\n    return (await this.getGlobals(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.mainWindowSize;\n  }\n\n  async setMainWindowSize(value: number, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    globals.mainWindowSize = value;\n    await this.saveGlobals(globals, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getMinimizeOnCopyToClipboard(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.minimizeOnCopyToClipboard ?? false\n    );\n  }\n\n  async setMinimizeOnCopyToClipboard(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.minimizeOnCopyToClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNeverDomains(options?: StorageOptions): Promise<{ [id: string]: any }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.neverDomains;\n  }\n\n  async setNeverDomains(value: { [id: string]: any }, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.neverDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometrics(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.noAutoPromptBiometrics ?? false\n    );\n  }\n\n  async setNoAutoPromptBiometrics(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometricsText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.noAutoPromptBiometricsText;\n  }\n\n  async setNoAutoPromptBiometricsText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometricsText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOpenAtLogin(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.openAtLogin ?? false\n    );\n  }\n\n  async setOpenAtLogin(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.openAtLogin = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOrganizationInvitation(options?: StorageOptions): Promise<any> {\n    return (await this.getGlobals(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.organizationInvitation;\n  }\n\n  async setOrganizationInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    globals.organizationInvitation = value;\n    await this.saveGlobals(globals, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getOrganizations(options?: StorageOptions): Promise<{ [id: string]: OrganizationData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.organizations;\n  }\n\n  async setOrganizations(\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.organizations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPasswordGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.passwordGenerationOptions;\n  }\n\n  async setPasswordGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.passwordGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getUsernameGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.usernameGenerationOptions;\n  }\n\n  async setUsernameGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.usernameGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getGeneratorOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.generatorOptions;\n  }\n\n  async setGeneratorOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.generatorOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getProtectedPin(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.protectedPin;\n  }\n\n  async setProtectedPin(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.protectedPin = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getProviders(options?: StorageOptions): Promise<{ [id: string]: ProviderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.providers;\n  }\n\n  async setProviders(\n    value: { [id: string]: ProviderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.providers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPublicKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.keys?.publicKey;\n  }\n\n  async setPublicKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.keys.publicKey = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getRefreshToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.refreshToken;\n  }\n\n  async setRefreshToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.refreshToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getRememberedEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.rememberedEmail;\n  }\n\n  async setRememberedEmail(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.rememberedEmail = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSecurityStamp(options?: StorageOptions): Promise<string> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.tokens?.securityStamp;\n  }\n\n  async setSecurityStamp(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.tokens.securityStamp = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getSettings(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.settings?.settings;\n  }\n\n  async setSettings(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.settings.settings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getSsoCodeVerifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoCodeVerifier;\n  }\n\n  async setSsoCodeVerifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoCodeVerifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getSsoOrgIdentifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.ssoOrganizationIdentifier;\n  }\n\n  async setSsoOrganizationIdentifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.ssoOrganizationIdentifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSsoState(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoState;\n  }\n\n  async setSsoState(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoState = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getTheme(options?: StorageOptions): Promise<ThemeType> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.theme;\n  }\n\n  async setTheme(value: ThemeType, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.theme = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getTwoFactorToken(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.twoFactorToken;\n  }\n\n  async setTwoFactorToken(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.twoFactorToken = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  async getUsesKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.usesKeyConnector;\n  }\n\n  async setUsesKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.usesKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getVaultTimeout(options?: StorageOptions): Promise<number> {\n    const accountVaultTimeout = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeout;\n    return accountVaultTimeout;\n  }\n\n  async setVaultTimeout(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getVaultTimeoutAction(options?: StorageOptions): Promise<string> {\n    const accountVaultTimeoutAction = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeoutAction;\n    const globalVaultTimeoutAction = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.vaultTimeoutAction;\n    return accountVaultTimeoutAction ?? globalVaultTimeoutAction;\n  }\n\n  async setVaultTimeoutAction(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeoutAction = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getStateVersion(): Promise<number> {\n    return (await this.getGlobals(await this.defaultOnDiskLocalOptions())).stateVersion ?? 1;\n  }\n\n  async setStateVersion(value: number): Promise<void> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    globals.stateVersion = value;\n    await this.saveGlobals(globals, await this.defaultOnDiskOptions());\n  }\n\n  async getWindow(): Promise<WindowState> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    return globals?.window != null && Object.keys(globals.window).length > 0\n      ? globals.window\n      : new WindowState();\n  }\n\n  async setWindow(value: WindowState, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.window = value;\n    return await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    return globals ?? this.createGlobals();\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected getGlobalsFromMemory(): TGlobalState {\n    return this.state.globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected saveGlobalsToMemory(globals: TGlobalState): void {\n    this.state.globals = globals;\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected getAccountFromMemory(options: StorageOptions): TAccount {\n    if (this.state.accounts == null) {\n      return null;\n    }\n    return this.state.accounts[this.getUserIdFromMemory(options)];\n  }\n\n  protected getUserIdFromMemory(options: StorageOptions): string {\n    return options?.userId != null\n      ? this.state.accounts[options.userId]?.profile?.userId\n      : this.state.activeUserId;\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    if (options?.userId == null && this.state.activeUserId == null) {\n      return null;\n    }\n\n    if (this.useAccountCache) {\n      const cachedAccount = this.accountDiskCache.get(options.userId);\n      if (cachedAccount != null) {\n        return cachedAccount;\n      }\n    }\n\n    const account = options?.useSecureStorage\n      ? (await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local })\n        ))\n      : await this.storageService.get<TAccount>(options.userId, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.set(options.userId, account);\n    }\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    }\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.delete(options.userId);\n    }\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if (this.getAccountFromMemory({ userId: account.profile.userId }) !== null) {\n      this.state.accounts[account.profile.userId] = account;\n    }\n    await this.pushAccounts();\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n    // EnvironmentUrls are set before authenticating and should override whatever is stored from any previous session\n    const environmentUrls = account.settings.environmentUrls;\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    } else if (await this.storageService.has(keys.tempAccountSettings)) {\n      account.settings = await this.storageService.get<any>(keys.tempAccountSettings);\n      await this.storageService.remove(keys.tempAccountSettings);\n    }\n    account.settings.environmentUrls = environmentUrls;\n    if (account.settings.vaultTimeoutAction === \"logOut\" && account.settings.vaultTimeout != null) {\n      account.tokens.accessToken = null;\n      account.tokens.refreshToken = null;\n      account.profile.apiKeyClientId = null;\n      account.keys.apiKeyClientSecret = null;\n    }\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n  }\n  //\n\n  protected async pushAccounts(): Promise<void> {\n    await this.pruneInMemoryAccounts();\n    if (this.state?.accounts == null || Object.keys(this.state.accounts).length < 1) {\n      this.accounts.next(null);\n      return;\n    }\n\n    this.accounts.next(this.state.accounts);\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected get defaultInMemoryOptions(): StorageOptions {\n    return { storageLocation: StorageLocation.Memory, userId: this.state.activeUserId };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId: this.state.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId: this.state.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId: this.state.activeUserId ?? (await this.getUserId()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: this.state.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await this.storageService.get<string>(keys.activeUserId);\n  }\n\n  protected async removeAccountFromLocalStorage(\n    userId: string = this.state.activeUserId\n  ): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(\n    userId: string = this.state.activeUserId\n  ): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(\n    userId: string = this.state.activeUserId\n  ): Promise<void> {\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected removeAccountFromMemory(userId: string = this.state.activeUserId): void {\n    delete this.state.accounts[userId];\n    if (this.useAccountCache) {\n      this.accountDiskCache.delete(userId);\n    }\n  }\n\n  protected async pruneInMemoryAccounts() {\n    // We preserve settings for logged out accounts, but we don't want to consider them when thinking about active account state\n    for (const userId in this.state.accounts) {\n      if (!(await this.getIsAuthenticated({ userId: userId }))) {\n        this.removeAccountFromMemory(userId);\n      }\n    }\n  }\n\n  // settings persist even on reset, and are not effected by this method\n  protected resetAccount(account: TAccount) {\n    const persistentAccountInformation = { settings: account.settings };\n    return Object.assign(this.createAccount(), persistentAccountInformation);\n  }\n\n  protected async setAccountEnvironmentUrls(account: TAccount): Promise<TAccount> {\n    account.settings.environmentUrls = await this.getGlobalEnvironmentUrls();\n    return account;\n  }\n\n  protected async getGlobalEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getGlobals(options)).environmentUrls ?? new EnvironmentUrls();\n  }\n\n  protected clearDecryptedDataForActiveUser() {\n    const userId = this.state.activeUserId;\n    if (userId == null || this.state?.accounts[userId]?.data == null) {\n      return;\n    }\n    this.state.accounts[userId].data = new AccountData();\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string) {\n    await this.setAccessToken(null, { userId: userId });\n    await this.setLastActive(null, { userId: userId });\n    this.state.authenticatedAccounts = this.state.authenticatedAccounts.filter(\n      (activeUserId) => activeUserId !== userId\n    );\n    await this.storageService.save(keys.authenticatedAccounts, this.state.authenticatedAccounts);\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  protected async dynamicallySetActiveUser() {\n    if (this.state.accounts == null || Object.keys(this.state.accounts).length < 1) {\n      await this.setActiveUser(null);\n      return;\n    }\n    for (const userId in this.state.accounts) {\n      if (userId == null) {\n        continue;\n      }\n      if (await this.getIsAuthenticated({ userId: userId })) {\n        await this.setActiveUser(userId);\n        break;\n      }\n      await this.setActiveUser(null);\n    }\n  }\n\n  private async getTimeoutBasedStorageOptions(options?: StorageOptions): Promise<StorageOptions> {\n    const timeoutAction = await this.getVaultTimeoutAction({ userId: options?.userId });\n    const timeout = await this.getVaultTimeout({ userId: options?.userId });\n    const defaultOptions =\n      timeoutAction === \"logOut\" && timeout != null\n        ? this.defaultInMemoryOptions\n        : await this.defaultOnDiskOptions();\n    return this.reconcileOptions(options, defaultOptions);\n  }\n\n  private async saveSecureStorageKey(key: string, value: string, options?: StorageOptions) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n}\n","import { GlobalState } from \"jslib-common/models/domain/globalState\";\nimport { StorageOptions } from \"jslib-common/models/domain/storageOptions\";\nimport { StateService as BaseStateService } from \"jslib-common/services/state.service\";\n\nimport { Account } from \"../models/account\";\nimport { BrowserComponentState } from \"../models/browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"../models/browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"../models/browserSendComponentState\";\n\nimport { StateService as StateServiceAbstraction } from \"./abstractions/state.service\";\n\nexport class StateService\n  extends BaseStateService<GlobalState, Account>\n  implements StateServiceAbstraction\n{\n  async addAccount(account: Account) {\n    // Apply browser overrides to default account values\n    account = new Account(account);\n    await super.addAccount(account);\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    // Firefox Private Mode can clash with non-Private Mode because they both read from the same onDiskOptions\n    // Check that there is an account in memory before considering the user authenticated\n    return (\n      (await super.getIsAuthenticated(options)) &&\n      (await this.getAccount(this.defaultInMemoryOptions)) != null\n    );\n  }\n\n  async getBrowserGroupingComponentState(\n    options?: StorageOptions\n  ): Promise<BrowserGroupingsComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.groupings;\n  }\n\n  async setBrowserGroupingComponentState(\n    value: BrowserGroupingsComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.groupings = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getBrowserCipherComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.ciphers;\n  }\n\n  async setBrowserCipherComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.ciphers = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n\n  async getBrowserSendComponentState(options?: StorageOptions): Promise<BrowserSendComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.send;\n  }\n\n  async setBrowserSendComponentState(\n    value: BrowserSendComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.send = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n  async getBrowserSendTypeComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (await this.getAccount(this.reconcileOptions(options, this.defaultInMemoryOptions)))\n      ?.sendType;\n  }\n\n  async setBrowserSendTypeComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, this.defaultInMemoryOptions)\n    );\n    account.sendType = value;\n    await this.saveAccount(account, this.reconcileOptions(options, this.defaultInMemoryOptions));\n  }\n}\n","import { CipherType } from \"jslib-common/enums/cipherType\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n}\n","import { TreeNode } from \"jslib-common/models/domain/treeNode\";\nimport { CollectionView } from \"jslib-common/models/view/collectionView\";\nimport { FolderView } from \"jslib-common/models/view/folderView\";\n\nexport class DynamicTreeNode<T extends CollectionView | FolderView> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { KdfType } from \"../enums/kdfType\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { Policy } from \"../models/domain/policy\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport abstract class StateService<T extends Account = Account> {\n  accounts: BehaviorSubject<{ [userId: string]: T }>;\n  activeAccount: BehaviorSubject<string>;\n\n  addAccount: (account: T) => Promise<void>;\n  setActiveUser: (userId: string) => Promise<void>;\n  clean: (options?: StorageOptions) => Promise<void>;\n  init: () => Promise<void>;\n\n  getAccessToken: (options?: StorageOptions) => Promise<string>;\n  setAccessToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getAddEditCipherInfo: (options?: StorageOptions) => Promise<any>;\n  setAddEditCipherInfo: (value: any, options?: StorageOptions) => Promise<void>;\n  getAlwaysShowDock: (options?: StorageOptions) => Promise<boolean>;\n  setAlwaysShowDock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientId: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientId: (value: string, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientSecret: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientSecret: (value: string, options?: StorageOptions) => Promise<void>;\n  getAutoConfirmFingerPrints: (options?: StorageOptions) => Promise<boolean>;\n  setAutoConfirmFingerprints: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getAutoFillOnPageLoadDefault: (options?: StorageOptions) => Promise<boolean>;\n  setAutoFillOnPageLoadDefault: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricAwaitingAcceptance: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricAwaitingAcceptance: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricFingerprintValidated: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricFingerprintValidated: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricLocked: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricLocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricText: (options?: StorageOptions) => Promise<string>;\n  setBiometricText: (value: string, options?: StorageOptions) => Promise<void>;\n  getBiometricUnlock: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricUnlock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCanAccessPremium: (options?: StorageOptions) => Promise<boolean>;\n  getClearClipboard: (options?: StorageOptions) => Promise<number>;\n  setClearClipboard: (value: number, options?: StorageOptions) => Promise<void>;\n  getCollapsedGroupings: (options?: StorageOptions) => Promise<string[]>;\n  setCollapsedGroupings: (value: string[], options?: StorageOptions) => Promise<void>;\n  getConvertAccountToKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setConvertAccountToKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setCryptoMasterKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyAuto: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyAuto: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyB64: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyB64: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  hasCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setCryptoMasterKeyBiometric: (value: string, options?: StorageOptions) => Promise<void>;\n  getDecodedToken: (options?: StorageOptions) => Promise<any>;\n  setDecodedToken: (value: any, options?: StorageOptions) => Promise<void>;\n  getDecryptedCiphers: (options?: StorageOptions) => Promise<CipherView[]>;\n  setDecryptedCiphers: (value: CipherView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCollections: (options?: StorageOptions) => Promise<CollectionView[]>;\n  setDecryptedCollections: (value: CollectionView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setDecryptedCryptoSymmetricKey: (\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedFolders: (options?: StorageOptions) => Promise<FolderView[]>;\n  setDecryptedFolders: (value: FolderView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setDecryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPinProtected: (options?: StorageOptions) => Promise<EncString>;\n  setDecryptedPinProtected: (value: EncString, options?: StorageOptions) => Promise<void>;\n  getDecryptedPolicies: (options?: StorageOptions) => Promise<Policy[]>;\n  setDecryptedPolicies: (value: Policy[], options?: StorageOptions) => Promise<void>;\n  getDecryptedPrivateKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setDecryptedPrivateKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getDecryptedProviderKeys: (options?: StorageOptions) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedProviderKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedSends: (options?: StorageOptions) => Promise<SendView[]>;\n  setDecryptedSends: (value: SendView[], options?: StorageOptions) => Promise<void>;\n  getDefaultUriMatch: (options?: StorageOptions) => Promise<UriMatchType>;\n  setDefaultUriMatch: (value: UriMatchType, options?: StorageOptions) => Promise<void>;\n  getDisableAddLoginNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAddLoginNotification: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoBiometricsPrompt: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoBiometricsPrompt: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoTotpCopy: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoTotpCopy: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableBadgeCounter: (options?: StorageOptions) => Promise<boolean>;\n  setDisableBadgeCounter: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableChangedPasswordNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableChangedPasswordNotification: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDisableContextMenuItem: (options?: StorageOptions) => Promise<boolean>;\n  setDisableContextMenuItem: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableFavicon: (options?: StorageOptions) => Promise<boolean>;\n  setDisableFavicon: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableGa: (options?: StorageOptions) => Promise<boolean>;\n  setDisableGa: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowCardsCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowCardsCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowIdentitiesCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowIdentitiesCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEmail: (options?: StorageOptions) => Promise<string>;\n  setEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmailVerified: (options?: StorageOptions) => Promise<boolean>;\n  setEmailVerified: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAlwaysOnTop: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAlwaysOnTop: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAutoFillOnPageLoad: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAutoFillOnPageLoad: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBiometric: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegration: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegrationFingerprint: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegrationFingerprint: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableCloseToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableCloseToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableFullWidth: (options?: StorageOptions) => Promise<boolean>;\n  setEnableFullWidth: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableGravitars: (options?: StorageOptions) => Promise<boolean>;\n  setEnableGravitars: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableMinimizeToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableMinimizeToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableStartToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableStartToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEncryptedCiphers: (options?: StorageOptions) => Promise<{ [id: string]: CipherData }>;\n  setEncryptedCiphers: (\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCollections: (options?: StorageOptions) => Promise<{ [id: string]: CollectionData }>;\n  setEncryptedCollections: (\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedCryptoSymmetricKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedFolders: (options?: StorageOptions) => Promise<{ [id: string]: FolderData }>;\n  setEncryptedFolders: (\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedOrganizationKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setEncryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPinProtected: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPinProtected: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedPolicies: (options?: StorageOptions) => Promise<{ [id: string]: PolicyData }>;\n  setEncryptedPolicies: (\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPrivateKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPrivateKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedProviderKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedProviderKeys: (value: any, options?: StorageOptions) => Promise<void>;\n  getEncryptedSends: (options?: StorageOptions) => Promise<{ [id: string]: SendData }>;\n  setEncryptedSends: (value: { [id: string]: SendData }, options?: StorageOptions) => Promise<void>;\n  getEntityId: (options?: StorageOptions) => Promise<string>;\n  setEntityId: (value: string, options?: StorageOptions) => Promise<void>;\n  getEntityType: (options?: StorageOptions) => Promise<any>;\n  setEntityType: (value: string, options?: StorageOptions) => Promise<void>;\n  getEnvironmentUrls: (options?: StorageOptions) => Promise<EnvironmentUrls>;\n  setEnvironmentUrls: (value: EnvironmentUrls, options?: StorageOptions) => Promise<void>;\n  getEquivalentDomains: (options?: StorageOptions) => Promise<any>;\n  setEquivalentDomains: (value: string, options?: StorageOptions) => Promise<void>;\n  getEventCollection: (options?: StorageOptions) => Promise<EventData[]>;\n  setEventCollection: (value: EventData[], options?: StorageOptions) => Promise<void>;\n  getEverBeenUnlocked: (options?: StorageOptions) => Promise<boolean>;\n  setEverBeenUnlocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getForcePasswordReset: (options?: StorageOptions) => Promise<boolean>;\n  setForcePasswordReset: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getInstalledVersion: (options?: StorageOptions) => Promise<string>;\n  setInstalledVersion: (value: string, options?: StorageOptions) => Promise<void>;\n  getIsAuthenticated: (options?: StorageOptions) => Promise<boolean>;\n  getKdfIterations: (options?: StorageOptions) => Promise<number>;\n  setKdfIterations: (value: number, options?: StorageOptions) => Promise<void>;\n  getKdfType: (options?: StorageOptions) => Promise<KdfType>;\n  setKdfType: (value: KdfType, options?: StorageOptions) => Promise<void>;\n  getKeyHash: (options?: StorageOptions) => Promise<string>;\n  setKeyHash: (value: string, options?: StorageOptions) => Promise<void>;\n  getLastActive: (options?: StorageOptions) => Promise<number>;\n  setLastActive: (value: number, options?: StorageOptions) => Promise<void>;\n  getLastSync: (options?: StorageOptions) => Promise<string>;\n  setLastSync: (value: string, options?: StorageOptions) => Promise<void>;\n  getLegacyEtmKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setLegacyEtmKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getLocalData: (options?: StorageOptions) => Promise<any>;\n  setLocalData: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocale: (options?: StorageOptions) => Promise<string>;\n  setLocale: (value: string, options?: StorageOptions) => Promise<void>;\n  getMainWindowSize: (options?: StorageOptions) => Promise<number>;\n  setMainWindowSize: (value: number, options?: StorageOptions) => Promise<void>;\n  getMinimizeOnCopyToClipboard: (options?: StorageOptions) => Promise<boolean>;\n  setMinimizeOnCopyToClipboard: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNeverDomains: (options?: StorageOptions) => Promise<{ [id: string]: any }>;\n  setNeverDomains: (value: { [id: string]: any }, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometrics: (options?: StorageOptions) => Promise<boolean>;\n  setNoAutoPromptBiometrics: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometricsText: (options?: StorageOptions) => Promise<string>;\n  setNoAutoPromptBiometricsText: (value: string, options?: StorageOptions) => Promise<void>;\n  getOpenAtLogin: (options?: StorageOptions) => Promise<boolean>;\n  setOpenAtLogin: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getOrganizationInvitation: (options?: StorageOptions) => Promise<any>;\n  setOrganizationInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  getOrganizations: (options?: StorageOptions) => Promise<{ [id: string]: OrganizationData }>;\n  setOrganizations: (\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getPasswordGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setPasswordGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getUsernameGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setUsernameGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getGeneratorOptions: (options?: StorageOptions) => Promise<any>;\n  setGeneratorOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getProtectedPin: (options?: StorageOptions) => Promise<string>;\n  setProtectedPin: (value: string, options?: StorageOptions) => Promise<void>;\n  getProviders: (options?: StorageOptions) => Promise<{ [id: string]: ProviderData }>;\n  setProviders: (value: { [id: string]: ProviderData }, options?: StorageOptions) => Promise<void>;\n  getPublicKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setPublicKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getRefreshToken: (options?: StorageOptions) => Promise<string>;\n  setRefreshToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getRememberedEmail: (options?: StorageOptions) => Promise<string>;\n  setRememberedEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getSecurityStamp: (options?: StorageOptions) => Promise<string>;\n  setSecurityStamp: (value: string, options?: StorageOptions) => Promise<void>;\n  getSettings: (options?: StorageOptions) => Promise<any>;\n  setSettings: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoCodeVerifier: (options?: StorageOptions) => Promise<string>;\n  setSsoCodeVerifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoOrgIdentifier: (options?: StorageOptions) => Promise<string>;\n  setSsoOrganizationIdentifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoState: (options?: StorageOptions) => Promise<string>;\n  setSsoState: (value: string, options?: StorageOptions) => Promise<void>;\n  getTheme: (options?: StorageOptions) => Promise<ThemeType>;\n  setTheme: (value: ThemeType, options?: StorageOptions) => Promise<void>;\n  getTwoFactorToken: (options?: StorageOptions) => Promise<string>;\n  setTwoFactorToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserId: (options?: StorageOptions) => Promise<string>;\n  getUsesKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setUsesKeyConnector: (vaule: boolean, options?: StorageOptions) => Promise<void>;\n  getVaultTimeout: (options?: StorageOptions) => Promise<number>;\n  setVaultTimeout: (value: number, options?: StorageOptions) => Promise<void>;\n  getVaultTimeoutAction: (options?: StorageOptions) => Promise<string>;\n  setVaultTimeoutAction: (value: string, options?: StorageOptions) => Promise<void>;\n  getStateVersion: () => Promise<number>;\n  setStateVersion: (value: number) => Promise<void>;\n  getWindow: () => Promise<WindowState>;\n  setWindow: (value: WindowState) => Promise<void>;\n}\n","import { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport abstract class OrganizationService {\n  get: (id: string) => Promise<Organization>;\n  getByIdentifier: (identifier: string) => Promise<Organization>;\n  getAll: (userId?: string) => Promise<Organization[]>;\n  save: (orgs: { [id: string]: OrganizationData }) => Promise<any>;\n  canManageSponsorships: () => Promise<boolean>;\n  hasOrganizations: (userId?: string) => Promise<boolean>;\n}\n","import { FolderData } from \"../models/data/folderData\";\nimport { Folder } from \"../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { FolderView } from \"../models/view/folderView\";\n\nexport abstract class FolderService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  getAll: () => Promise<Folder[]>;\n  getAllDecrypted: () => Promise<FolderView[]>;\n  getAllNested: (folders?: FolderView[]) => Promise<TreeNode<FolderView>[]>;\n  getNested: (id: string) => Promise<TreeNode<FolderView>>;\n  saveWithServer: (folder: Folder) => Promise<any>;\n  upsert: (folder: FolderData | FolderData[]) => Promise<any>;\n  replace: (folders: { [id: string]: FolderData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string) => Promise<any>;\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\n\nexport abstract class CipherService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher?: Cipher\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchType\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  saveWithServer: (cipher: Cipher) => Promise<any>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<any>;\n  upsert: (cipher: CipherData | CipherData[]) => Promise<any>;\n  replace: (ciphers: { [id: string]: CipherData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string) => Promise<any>;\n  deleteManyWithServer: (ids: string[]) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: any, b: any) => number;\n  sortCiphersByLastUsedThenName: (a: any, b: any) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[]) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) => Promise<any>;\n  restoreWithServer: (id: string) => Promise<any>;\n  restoreManyWithServer: (ids: string[]) => Promise<any>;\n}\n","import { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nexport abstract class CollectionService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { PolicyType } from \"../enums/policyType\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../models/domain/masterPasswordPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\n\nexport abstract class PolicyService {\n  clearCache: () => void;\n  getAll: (type?: PolicyType, userId?: string) => Promise<Policy[]>;\n  getPolicyForOrganization: (policyType: PolicyType, organizationId: string) => Promise<Policy>;\n  replace: (policies: { [id: string]: PolicyData }) => Promise<any>;\n  clear: (userId?: string) => Promise<any>;\n  getMasterPasswordPoliciesForInvitedUsers: (orgId: string) => Promise<MasterPasswordPolicyOptions>;\n  getMasterPasswordPolicyOptions: (policies?: Policy[]) => Promise<MasterPasswordPolicyOptions>;\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions\n  ) => boolean;\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string\n  ) => [ResetPasswordPolicyOptions, boolean];\n  mapPoliciesFromToken: (policiesResponse: ListResponse<PolicyResponse>) => Policy[];\n  policyAppliesToUser: (\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) => Promise<boolean>;\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { CollectionService } from \"jslib-common/abstractions/collection.service\";\nimport { FolderService } from \"jslib-common/abstractions/folder.service\";\nimport { OrganizationService } from \"jslib-common/abstractions/organization.service\";\nimport { PolicyService } from \"jslib-common/abstractions/policy.service\";\nimport { StateService } from \"jslib-common/abstractions/state.service\";\nimport { PolicyType } from \"jslib-common/enums/policyType\";\nimport { Organization } from \"jslib-common/models/domain/organization\";\nimport { CollectionView } from \"jslib-common/models/view/collectionView\";\nimport { FolderView } from \"jslib-common/models/view/folderView\";\n\nimport { DynamicTreeNode } from \"./models/dynamic-tree-node.model\";\n\n@Injectable()\nexport class VaultFilterService {\n  constructor(\n    protected stateService: StateService,\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.stateService.setCollapsedGroupings(Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return new Set(await this.stateService.getCollapsedGroupings());\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    return await this.organizationService.getAll();\n  }\n\n  async buildFolders(organizationId?: string): Promise<DynamicTreeNode<FolderView>> {\n    const storedFolders = await this.folderService.getAllDecrypted();\n    let folders: FolderView[];\n    if (organizationId != null) {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n      folders = storedFolders.filter(\n        (f) =>\n          orgCiphers.filter((oc) => oc.folderId == f.id).length > 0 ||\n          ciphers.filter((c) => c.folderId == f.id).length < 1\n      );\n    } else {\n      folders = storedFolders;\n    }\n    const nestedFolders = await this.folderService.getAllNested(folders);\n    return new DynamicTreeNode<FolderView>({\n      fullList: folders,\n      nestedList: nestedFolders,\n    });\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.SingleOrg);\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership);\n  }\n}\n","import { VaultFilter } from \"jslib-angular/modules/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"jslib-angular/modules/vault-filter/vault-filter.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { CollectionService } from \"jslib-common/abstractions/collection.service\";\nimport { FolderService } from \"jslib-common/abstractions/folder.service\";\nimport { OrganizationService } from \"jslib-common/abstractions/organization.service\";\nimport { PolicyService } from \"jslib-common/abstractions/policy.service\";\nimport { StateService } from \"jslib-common/abstractions/state.service\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"jslib-common/services/vaultTimeout.service\";\n\nimport { SafariApp } from \"../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    this.checkVaultTimeout();\n    if (this.platformUtilsService.isSafari()) {\n      this.checkSafari();\n    } else {\n      setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n    }\n  }\n\n  // This is a work-around to safari adding an arbitary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import { AuthService } from \"../abstractions/auth.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { PolicyType } from \"../enums/policyType\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (expired: boolean, userId?: string) => Promise<void> = null\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    this.checkVaultTimeout();\n    setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    if (await this.platformUtilsService.isViewOpen()) {\n      return;\n    }\n\n    for (const userId in this.stateService.accounts.getValue()) {\n      if (userId != null && (await this.shouldLock(userId))) {\n        await this.executeTimeoutAction(userId);\n      }\n    }\n  }\n\n  async lock(allowSoftLock = false, userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    if (await this.keyConnectorService.getUsesKeyConnector()) {\n      const pinSet = await this.isPinLockSet();\n      const pinLock =\n        (pinSet[0] && (await this.stateService.getDecryptedPinProtected()) != null) || pinSet[1];\n\n      if (!pinLock && !(await this.isBiometricLockSet())) {\n        await this.logOut(userId);\n      }\n    }\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n    }\n\n    await this.stateService.setEverBeenUnlocked(true, { userId: userId });\n    await this.stateService.setBiometricLocked(true, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n\n    await this.cryptoService.clearKey(false, userId);\n    await this.cryptoService.clearOrgKeys(true, userId);\n    await this.cryptoService.clearKeyPair(true, userId);\n    await this.cryptoService.clearEncKey(true, userId);\n\n    await this.folderService.clearCache(userId);\n    await this.cipherService.clearCache(userId);\n    await this.collectionService.clearCache(userId);\n\n    this.messagingService.send(\"locked\", { userId: userId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(false, userId);\n    }\n  }\n\n  async setVaultTimeoutOptions(timeout: number, action: string): Promise<void> {\n    await this.stateService.setVaultTimeout(timeout);\n\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const token = await this.tokenService.getToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const currentAction = await this.stateService.getVaultTimeoutAction();\n    if ((timeout != null || timeout === 0) && action === \"logOut\" && action !== currentAction) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      await this.tokenService.clearToken();\n    }\n\n    await this.stateService.setVaultTimeoutAction(action);\n\n    await this.tokenService.setToken(token);\n    await this.tokenService.setRefreshToken(refreshToken);\n    await this.tokenService.setClientId(clientId);\n    await this.tokenService.setClientSecret(clientSecret);\n\n    await this.cryptoService.toggleKey();\n  }\n\n  async isPinLockSet(): Promise<[boolean, boolean]> {\n    const protectedPin = await this.stateService.getProtectedPin();\n    const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n    return [protectedPin != null, pinProtectedKey != null];\n  }\n\n  async isBiometricLockSet(): Promise<boolean> {\n    return await this.stateService.getBiometricUnlock();\n  }\n\n  async getVaultTimeout(userId?: string): Promise<number> {\n    const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n\n    if (\n      await this.policyService.policyAppliesToUser(PolicyType.MaximumVaultTimeout, null, userId)\n    ) {\n      const policy = await this.policyService.getAll(PolicyType.MaximumVaultTimeout, userId);\n      // Remove negative values, and ensure it's smaller than maximum allowed value according to policy\n      let timeout = Math.min(vaultTimeout, policy[0].data.minutes);\n\n      if (vaultTimeout == null || timeout < 0) {\n        timeout = policy[0].data.minutes;\n      }\n\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (vaultTimeout !== timeout) {\n        await this.stateService.setVaultTimeout(timeout, { userId: userId });\n      }\n\n      return timeout;\n    }\n\n    return vaultTimeout;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEverBeenUnlocked(false, { userId: userId });\n    await this.stateService.setDecryptedPinProtected(null, { userId: userId });\n    await this.stateService.setProtectedPin(null, { userId: userId });\n  }\n\n  private async shouldLock(userId: string): Promise<boolean> {\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await this.getVaultTimeout(userId);\n    if (vaultTimeout == null || vaultTimeout < 0) {\n      return false;\n    }\n\n    const lastActive = await this.stateService.getLastActive({ userId: userId });\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: string): Promise<void> {\n    const timeoutAction = await this.stateService.getVaultTimeoutAction({ userId: userId });\n    timeoutAction === \"logOut\" ? await this.logOut(userId) : await this.lock(true, userId);\n  }\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { PasswordGenerationService } from \"jslib-common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { VaultTimeoutService } from \"jslib-common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  async init() {\n    BrowserApi.messageListener(\n      \"commands.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n          await this.processCommand(\n            msg.data.commandToRetry.msg.command,\n            msg.data.commandToRetry.sender\n          );\n        }\n\n        if (this.isVivaldi && msg.command === \"keyboardShortcutTriggered\" && msg.shortcut) {\n          await this.processCommand(msg.shortcut, sender);\n        }\n      }\n    );\n\n    if (!this.isVivaldi && chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case \"autofill_login\":\n        await this.autoFillLogin(sender ? sender.tab : null);\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock(true);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async autoFillLogin(tab?: chrome.tabs.Tab) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: \"autofill_login\" },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, \"autofill_cmd\");\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    this.main.openPopup();\n  }\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { EventService } from \"jslib-common/abstractions/event.service\";\nimport { PasswordGenerationService } from \"jslib-common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { TotpService } from \"jslib-common/abstractions/totp.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"jslib-common/enums/cipherRepromptType\";\nimport { EventType } from \"jslib-common/enums/eventType\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class ContextMenusBackground {\n  private readonly noopCommandSuffix = \"noop\";\n  private contextMenus: any;\n\n  constructor(\n    private main: MainBackground,\n    private cipherService: CipherService,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private authService: AuthService,\n    private eventService: EventService,\n    private totpService: TotpService\n  ) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  async init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener(\n      async (info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) => {\n        if (info.menuItemId === \"generate-password\") {\n          await this.generatePasswordToClipboard();\n        } else if (info.menuItemId === \"copy-identifier\") {\n          await this.getClickedElement(tab, info.frameId);\n        } else if (\n          info.parentMenuItemId === \"autofill\" ||\n          info.parentMenuItemId === \"copy-username\" ||\n          info.parentMenuItemId === \"copy-password\" ||\n          info.parentMenuItemId === \"copy-totp\"\n        ) {\n          await this.cipherAction(tab, info);\n        }\n      }\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          await this.cipherAction(\n            msg.data.commandToRetry.sender.tab,\n            msg.data.commandToRetry.msg.data\n          );\n        }\n      }\n    );\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async getClickedElement(tab: chrome.tabs.Tab, frameId: number) {\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, { command: \"getClickedElement\" }, { frameId: frameId });\n  }\n\n  private async cipherAction(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    const id = info.menuItemId.split(\"_\")[1];\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: this.noopCommandSuffix, data: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    let cipher: CipherView;\n    if (id === this.noopCommandSuffix) {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(tab.url);\n      cipher = ciphers.find((c) => c.reprompt === CipherRepromptType.None);\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find((c) => c.id === id);\n    }\n\n    if (cipher == null) {\n      return;\n    }\n\n    if (info.parentMenuItemId === \"autofill\") {\n      await this.startAutofillPage(tab, cipher);\n    } else if (info.parentMenuItemId === \"copy-username\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.username, { window: window });\n    } else if (info.parentMenuItemId === \"copy-password\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.password, { window: window });\n      this.eventService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (info.parentMenuItemId === \"copy-totp\") {\n      const totpValue = await this.totpService.getCode(cipher.login.totp);\n      this.platformUtilsService.copyToClipboard(totpValue, { window: window });\n    }\n  }\n\n  private async startAutofillPage(tab: chrome.tabs.Tab, cipher: CipherView) {\n    this.main.loginToAutoFill = cipher;\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, {\n      command: \"collectPageDetails\",\n      tab: tab,\n      sender: \"contextMenu\",\n    });\n  }\n}\n","import { NotificationsService } from \"jslib-common/abstractions/notifications.service\";\nimport { VaultTimeoutService } from \"jslib-common/abstractions/vaultTimeout.service\";\n\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: any;\n  private idleTimer: number = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private stateService: StateService,\n    private notificationsService: NotificationsService\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  async init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(async (newState: string) => {\n        if (newState === \"locked\") {\n          // If the screen is locked or the screensaver activates\n          const timeout = await this.stateService.getVaultTimeout();\n          if (timeout === -2) {\n            // On System Lock vault timeout option\n            const action = await this.stateService.getVaultTimeoutAction();\n            if (action === \"logOut\") {\n              await this.vaultTimeoutService.logOut();\n            } else {\n              await this.vaultTimeoutService.lock(true);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      window.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { AppIdService } from \"jslib-common/abstractions/appId.service\";\nimport { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CryptoService } from \"jslib-common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"jslib-common/abstractions/cryptoFunction.service\";\nimport { I18nService } from \"jslib-common/abstractions/i18n.service\";\nimport { LogService } from \"jslib-common/abstractions/log.service\";\nimport { MessagingService } from \"jslib-common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { StateService } from \"jslib-common/abstractions/state.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { Utils } from \"jslib-common/misc/utils\";\nimport { EncString } from \"jslib-common/models/domain/encString\";\nimport { SymmetricCryptoKey } from \"jslib-common/models/domain/symmetricCryptoKey\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst EncryptionAlgorithm = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private privateKey: ArrayBuffer = null;\n  private publicKey: ArrayBuffer = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private i18nService: I18nService,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateService: StateService,\n    private logService: LogService,\n    private authService: AuthService\n  ) {\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        BrowserApi.reloadExtension(null);\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(\"startDesktop\");\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted.buffer,\n              this.privateKey,\n              EncryptionAlgorithm\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              this.stateService.setBiometricFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.messagingService.send(\"showDialog\", {\n              text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n              title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n              confirmText: this.i18nService.t(\"ok\"),\n              type: \"error\",\n            });\n            break;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.showWrongUserDialog();\n            break;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(reason);\n      });\n    });\n  }\n\n  showWrongUserDialog() {\n    this.messagingService.send(\"showDialog\", {\n      text: this.i18nService.t(\"nativeMessagingWrongUserDesc\"),\n      title: this.i18nService.t(\"nativeMessagingWrongUserTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"error\",\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = await this.stateService.getUserId();\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = resolve;\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      this.port.postMessage(message);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.messagingService.send(\"showDialog\", {\n        text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n        title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n        confirmText: this.i18nService.t(\"ok\"),\n        type: \"error\",\n      });\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret)\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        await this.stateService.setBiometricAwaitingAcceptance(null);\n\n        if (message.response === \"not enabled\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotEnabledDesc\"),\n            title: this.i18nService.t(\"biometricsNotEnabledTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        } else if (message.response === \"not supported\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotSupportedDesc\"),\n            title: this.i18nService.t(\"biometricsNotSupportedTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        }\n\n        const enabled = await this.stateService.getBiometricUnlock();\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.stateService.setBiometricUnlock(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          await this.cryptoService.setKey(\n            new SymmetricCryptoKey(Utils.fromB64ToArray(message.keyB64).buffer)\n          );\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            await this.cryptoService.getFingerprint(await this.stateService.getUserId());\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKey();\n            this.showWrongUserDialog();\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          await this.stateService.setBiometricLocked(false);\n          this.runtimeBackground.processMessage({ command: \"unlocked\" }, null, null);\n        }\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: await this.stateService.getUserId(),\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = (\n      await this.cryptoService.getFingerprint(await this.stateService.getUserId(), this.publicKey)\n    ).join(\" \");\n\n    this.messagingService.send(\"showDialog\", {\n      html: `${this.i18nService.t(\n        \"desktopIntegrationVerificationText\"\n      )}<br><br><strong>${fingerprint}</strong>`,\n      title: this.i18nService.t(\"desktopSyncVerificationTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"warning\",\n    });\n  }\n}\n","export enum NotificationQueueMessageType {\n  AddLogin = 0,\n  ChangePassword = 1,\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { FolderService } from \"jslib-common/abstractions/folder.service\";\nimport { PolicyService } from \"jslib-common/abstractions/policy.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { CipherType } from \"jslib-common/enums/cipherType\";\nimport { PolicyType } from \"jslib-common/enums/policyType\";\nimport { Utils } from \"jslib-common/misc/utils\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { LoginUriView } from \"jslib-common/models/view/loginUriView\";\nimport { LoginView } from \"jslib-common/models/view/loginView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport AddChangePasswordQueueMessage from \"./models/addChangePasswordQueueMessage\";\nimport AddLoginQueueMessage from \"./models/addLoginQueueMessage\";\nimport AddLoginRuntimeMessage from \"./models/addLoginRuntimeMessage\";\nimport ChangePasswordRuntimeMessage from \"./models/changePasswordRuntimeMessage\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\nimport { NotificationQueueMessageType } from \"./models/notificationQueueMessageType\";\n\nexport default class NotificationBackground {\n  private notificationQueue: (AddLoginQueueMessage | AddChangePasswordQueueMessage)[] = [];\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private stateService: StateService\n  ) {}\n\n  async init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    BrowserApi.messageListener(\n      \"notification.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender) => {\n        await this.processMessage(msg, sender);\n      }\n    );\n\n    this.cleanupNotificationQueue();\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"unlockCompleted\":\n        if (msg.data.target !== \"notification.background\") {\n          return;\n        }\n        await this.processMessage(msg.data.commandToRetry.msg, msg.data.commandToRetry.sender);\n        break;\n      case \"bgGetDataForTab\":\n        await this.getDataForTab(sender.tab, msg.responseCommand);\n        break;\n      case \"bgCloseNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n        break;\n      case \"bgAdjustNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", msg.data);\n        break;\n      case \"bgAddLogin\":\n        await this.addLogin(msg.login, sender.tab);\n        break;\n      case \"bgChangedPassword\":\n        await this.changedPassword(msg.data, sender.tab);\n        break;\n      case \"bgAddClose\":\n      case \"bgChangeClose\":\n        this.removeTabFromNotificationQueue(sender.tab);\n        break;\n      case \"bgAddSave\":\n      case \"bgChangeSave\":\n        if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n          const retryMessage: LockedVaultPendingNotificationsItem = {\n            commandToRetry: {\n              msg: msg,\n              sender: sender,\n            },\n            target: \"notification.background\",\n          };\n          await BrowserApi.tabSendMessageData(\n            sender.tab,\n            \"addToLockedVaultPendingNotifications\",\n            retryMessage\n          );\n          await BrowserApi.tabSendMessageData(sender.tab, \"promptForLogin\");\n          return;\n        }\n        await this.saveOrUpdateCredentials(sender.tab, msg.folder);\n        break;\n      case \"bgNeverSave\":\n        await this.saveNever(sender.tab);\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"notificationBar\": {\n            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);\n            await BrowserApi.tabSendMessageData(msg.tab, \"notificationBarPageDetails\", {\n              details: msg.details,\n              forms: forms,\n            });\n            break;\n          }\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes\n  }\n\n  private doNotificationQueueCheck(tab: chrome.tabs.Tab): void {\n    if (tab == null) {\n      return;\n    }\n\n    const tabDomain = Utils.getDomain(tab.url);\n    if (tabDomain == null) {\n      return;\n    }\n\n    for (let i = 0; i < this.notificationQueue.length; i++) {\n      if (\n        this.notificationQueue[i].tabId !== tab.id ||\n        this.notificationQueue[i].domain !== tabDomain\n      ) {\n        continue;\n      }\n\n      if (this.notificationQueue[i].type === NotificationQueueMessageType.AddLogin) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"add\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      } else if (this.notificationQueue[i].type === NotificationQueueMessageType.ChangePassword) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"change\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      }\n      break;\n    }\n  }\n\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tabId === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  private async addLogin(loginInfo: AddLoginRuntimeMessage, tab: chrome.tabs.Tab) {\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    let normalizedUsername = loginInfo.username;\n    if (normalizedUsername != null) {\n      normalizedUsername = normalizedUsername.toLowerCase();\n    }\n\n    const disabledAddLogin = await this.stateService.getDisableAddLoginNotification();\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab, true);\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername\n    );\n    if (usernameMatches.length === 0) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab);\n    } else if (\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      const disabledChangePassword =\n        await this.stateService.getDisableChangedPasswordNotification();\n      if (disabledChangePassword) {\n        return;\n      }\n      this.pushChangePasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginRuntimeMessage,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async changedPassword(changeData: ChangePasswordRuntimeMessage, tab: chrome.tabs.Tab) {\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      this.pushChangePasswordToQueue(null, loginDomain, changeData.newPassword, tab, true);\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, tab);\n    }\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        (queueMessage.type !== NotificationQueueMessageType.AddLogin &&\n          queueMessage.type !== NotificationQueueMessageType.ChangePassword)\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const changePasswordMessage = queueMessage as AddChangePasswordQueueMessage;\n        const cipher = await this.getDecryptedCipherById(changePasswordMessage.cipherId);\n        if (cipher == null) {\n          return;\n        }\n        await this.updateCipher(cipher, changePasswordMessage.newPassword);\n        return;\n      }\n\n      if (queueMessage.type === NotificationQueueMessageType.AddLogin) {\n        if (!queueMessage.wasVaultLocked) {\n          await this.createNewCipher(queueMessage as AddLoginQueueMessage, folderId);\n          BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n          return;\n        }\n\n        // If the vault was locked, check if a cipher needs updating instead of creating a new one\n        const addLoginMessage = queueMessage as AddLoginQueueMessage;\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(addLoginMessage.uri);\n        const usernameMatches = ciphers.filter(\n          (c) =>\n            c.login.username != null && c.login.username.toLowerCase() === addLoginMessage.username\n        );\n\n        if (usernameMatches.length >= 1) {\n          await this.updateCipher(usernameMatches[0], addLoginMessage.password);\n          return;\n        }\n\n        await this.createNewCipher(addLoginMessage, folderId);\n        BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n      }\n    }\n  }\n\n  private async createNewCipher(queueMessage: AddLoginQueueMessage, folderId: string) {\n    const loginModel = new LoginView();\n    const loginUri = new LoginUriView();\n    loginUri.uri = queueMessage.uri;\n    loginModel.uris = [loginUri];\n    loginModel.username = queueMessage.username;\n    loginModel.password = queueMessage.password;\n    const model = new CipherView();\n    model.name = Utils.getHostname(queueMessage.uri) || queueMessage.domain;\n    model.name = model.name.replace(/^www\\./, \"\");\n    model.type = CipherType.Login;\n    model.login = loginModel;\n\n    if (!Utils.isNullOrWhitespace(folderId)) {\n      const folders = await this.folderService.getAllDecrypted();\n      if (folders.some((x) => x.id === folderId)) {\n        model.folderId = folderId;\n      }\n    }\n\n    const cipher = await this.cipherService.encrypt(model);\n    await this.cipherService.saveWithServer(cipher);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      return await cipher.decrypt();\n    }\n    return null;\n  }\n\n  private async updateCipher(cipher: CipherView, newPassword: string) {\n    if (cipher != null && cipher.type === CipherType.Login) {\n      cipher.login.password = newPassword;\n      const newCipher = await this.cipherService.encrypt(cipher);\n      await this.cipherService.saveWithServer(newCipher);\n    }\n  }\n\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  private async getDataForTab(tab: chrome.tabs.Tab, responseCommand: string) {\n    const responseData: any = {};\n    if (responseCommand === \"notificationBarGetFoldersList\") {\n      responseData.folders = await this.folderService.getAllDecrypted();\n    }\n\n    await BrowserApi.tabSendMessageData(tab, responseCommand, responseData);\n  }\n\n  private async allowPersonalOwnership(): Promise<boolean> {\n    return !(await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership));\n  }\n}\n","import { EnvironmentService } from \"jslib-common/abstractions/environment.service\";\nimport { I18nService } from \"jslib-common/abstractions/i18n.service\";\nimport { LogService } from \"jslib-common/abstractions/log.service\";\nimport { MessagingService } from \"jslib-common/abstractions/messaging.service\";\nimport { NotificationsService } from \"jslib-common/abstractions/notifications.service\";\nimport { SystemService } from \"jslib-common/abstractions/system.service\";\nimport { Utils } from \"jslib-common/misc/utils\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsItem[] = [];\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private i18nService: I18nService,\n    private notificationsService: NotificationsService,\n    private systemService: SystemService,\n    private environmentService: EnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = async (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any\n    ) => {\n      await this.processMessage(msg, sender, sendResponse);\n    };\n\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n    if (this.main.isPrivateMode) {\n      (window as any).bitwardenBackgroundMessageListener = backgroundMessageListener;\n    }\n  }\n\n  async processMessage(msg: any, sender: any, sendResponse: any) {\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsItem;\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          await BrowserApi.closeLoginTab();\n\n          item = this.lockedVaultPendingNotifications.pop();\n          if (item.commandToRetry.sender?.tab?.id) {\n            await BrowserApi.focusSpecifiedTab(item.commandToRetry.sender.tab.id);\n          }\n        }\n\n        await this.main.setIcon();\n        await this.main.refreshBadgeAndMenu(false);\n        this.notificationsService.updateConnection(msg.command === \"unlocked\");\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item\n          );\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => await this.main.refreshBadgeAndMenu(), 2000);\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"promptForLogin\":\n        await BrowserApi.createNewTab(\"popup/index.html?uilocation=popout\", true, true);\n        break;\n      case \"showDialogResolve\":\n        this.platformUtilsService.resolveDialogPromise(msg.dialogId, msg.confirmed);\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadgeAndMenu();\n        break;\n      case \"bgReseedStorage\":\n        await this.main.reseedStorage();\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case \"autofill_cmd\": {\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === \"autofill_cmd\"\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n            }\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"authResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        try {\n          BrowserApi.createNewTab(\n            \"popup/index.html?uilocation=popout#/sso?code=\" +\n              encodeURIComponent(msg.code) +\n              \"&state=\" +\n              encodeURIComponent(msg.state)\n          );\n        } catch {\n          this.logService.error(\"Unable to open sso popout tab\");\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        const params =\n          `webAuthnResponse=${encodeURIComponent(msg.data)};` +\n          `remember=${encodeURIComponent(msg.remember)}`;\n        BrowserApi.createNewTab(\n          `popup/index.html?uilocation=popout#/2fa;${params}`,\n          undefined,\n          false\n        );\n        break;\n      }\n      case \"reloadPopup\":\n        this.messagingService.send(\"reloadPopup\");\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          dialogId: \"emailVerificationRequired\",\n          title: this.i18nService.t(\"emailVerificationRequired\"),\n          text: this.i18nService.t(\"emailVerificationRequiredDesc\"),\n          confirmText: this.i18nService.t(\"ok\"),\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier, { window: window });\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async autofillPage() {\n    const totpCode = await this.autofillService.doAutoFill({\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n}\n","import MainBackground from \"./main.background\";\nimport NotificationBackground from \"./notification.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground\n  ) {}\n\n  private focusedWindowId: number;\n\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    chrome.windows.onFocusChanged.addListener(async (windowId: number) => {\n      if (windowId === null || windowId < 0) {\n        return;\n      }\n\n      this.focusedWindowId = windowId;\n      this.main.messagingService.send(\"windowChanged\");\n    });\n\n    chrome.tabs.onActivated.addListener(async (activeInfo: chrome.tabs.TabActiveInfo) => {\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onReplaced.addListener(async (addedTabId: number, removedTabId: number) => {\n      if (this.main.onReplacedRan) {\n        return;\n      }\n      this.main.onReplacedRan = true;\n\n      await this.notificationBackground.checkNotificationQueue();\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onUpdated.addListener(\n      async (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => {\n        if (this.focusedWindowId > 0 && tab.windowId != this.focusedWindowId) {\n          return;\n        }\n\n        if (!tab.active) {\n          return;\n        }\n\n        if (this.main.onUpdatedRan) {\n          return;\n        }\n        this.main.onUpdatedRan = true;\n\n        await this.notificationBackground.checkNotificationQueue(tab);\n        await this.main.refreshBadgeAndMenu();\n        this.main.messagingService.send(\"tabChanged\");\n      }\n    );\n  }\n}\n","import { AuthService } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService } from \"jslib-common/abstractions/cipher.service\";\nimport { PlatformUtilsService } from \"jslib-common/abstractions/platformUtils.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { UriMatchType } from \"jslib-common/enums/uriMatchType\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: any[] = [];\n  private webRequest: any;\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService\n  ) {\n    this.webRequest = (window as any).chrome.webRequest;\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  async init() {\n    if (!this.webRequest || !this.webRequest.onAuthRequired) {\n      return;\n    }\n\n    this.webRequest.onAuthRequired.addListener(\n      async (details: any, callback: any) => {\n        if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        this.pendingAuthRequests.push(details.requestId);\n\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"]\n    );\n\n    this.webRequest.onCompleted.addListener((details: any) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      }\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchType.Host\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: any) {\n    const i = this.pendingAuthRequests.indexOf(details.requestId);\n    if (i > -1) {\n      this.pendingAuthRequests.splice(i, 1);\n    }\n  }\n}\n","import MainBackground from \"./background/main.background\";\n\nconst bitwardenMain = ((window as any).bitwardenMain = new MainBackground());\nbitwardenMain.bootstrap().then(() => {\n  // Finished bootstrapping\n});\n","import { ApiService as ApiServiceAbstraction } from \"jslib-common/abstractions/api.service\";\nimport { AppIdService as AppIdServiceAbstraction } from \"jslib-common/abstractions/appId.service\";\nimport { AuditService as AuditServiceAbstraction } from \"jslib-common/abstractions/audit.service\";\nimport { AuthService as AuthServiceAbstraction } from \"jslib-common/abstractions/auth.service\";\nimport { CipherService as CipherServiceAbstraction } from \"jslib-common/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"jslib-common/abstractions/collection.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"jslib-common/abstractions/crypto.service\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"jslib-common/abstractions/cryptoFunction.service\";\nimport { EnvironmentService as EnvironmentServiceAbstraction } from \"jslib-common/abstractions/environment.service\";\nimport { EventService as EventServiceAbstraction } from \"jslib-common/abstractions/event.service\";\nimport { ExportService as ExportServiceAbstraction } from \"jslib-common/abstractions/export.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"jslib-common/abstractions/fileUpload.service\";\nimport { FolderService as FolderServiceAbstraction } from \"jslib-common/abstractions/folder.service\";\nimport { I18nService as I18nServiceAbstraction } from \"jslib-common/abstractions/i18n.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"jslib-common/abstractions/keyConnector.service\";\nimport { LogService as LogServiceAbstraction } from \"jslib-common/abstractions/log.service\";\nimport { MessagingService as MessagingServiceAbstraction } from \"jslib-common/abstractions/messaging.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"jslib-common/abstractions/notifications.service\";\nimport { OrganizationService as OrganizationServiceAbstraction } from \"jslib-common/abstractions/organization.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"jslib-common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"jslib-common/abstractions/platformUtils.service\";\nimport { PolicyService as PolicyServiceAbstraction } from \"jslib-common/abstractions/policy.service\";\nimport { ProviderService as ProviderServiceAbstraction } from \"jslib-common/abstractions/provider.service\";\nimport { SearchService as SearchServiceAbstraction } from \"jslib-common/abstractions/search.service\";\nimport { SendService as SendServiceAbstraction } from \"jslib-common/abstractions/send.service\";\nimport { SettingsService as SettingsServiceAbstraction } from \"jslib-common/abstractions/settings.service\";\nimport { StorageService as StorageServiceAbstraction } from \"jslib-common/abstractions/storage.service\";\nimport { SyncService as SyncServiceAbstraction } from \"jslib-common/abstractions/sync.service\";\nimport { SystemService as SystemServiceAbstraction } from \"jslib-common/abstractions/system.service\";\nimport { TokenService as TokenServiceAbstraction } from \"jslib-common/abstractions/token.service\";\nimport { TotpService as TotpServiceAbstraction } from \"jslib-common/abstractions/totp.service\";\nimport { TwoFactorService as TwoFactorServiceAbstraction } from \"jslib-common/abstractions/twoFactor.service\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"jslib-common/abstractions/userVerification.service\";\nimport { UsernameGenerationService as UsernameGenerationServiceAbstraction } from \"jslib-common/abstractions/usernameGeneration.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"jslib-common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"jslib-common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"jslib-common/enums/cipherRepromptType\";\nimport { CipherType } from \"jslib-common/enums/cipherType\";\nimport { StateFactory } from \"jslib-common/factories/stateFactory\";\nimport { GlobalState } from \"jslib-common/models/domain/globalState\";\nimport { CipherView } from \"jslib-common/models/view/cipherView\";\nimport { ApiService } from \"jslib-common/services/api.service\";\nimport { AppIdService } from \"jslib-common/services/appId.service\";\nimport { AuditService } from \"jslib-common/services/audit.service\";\nimport { AuthService } from \"jslib-common/services/auth.service\";\nimport { CipherService } from \"jslib-common/services/cipher.service\";\nimport { CollectionService } from \"jslib-common/services/collection.service\";\nimport { ConsoleLogService } from \"jslib-common/services/consoleLog.service\";\nimport { ContainerService } from \"jslib-common/services/container.service\";\nimport { EnvironmentService } from \"jslib-common/services/environment.service\";\nimport { EventService } from \"jslib-common/services/event.service\";\nimport { ExportService } from \"jslib-common/services/export.service\";\nimport { FileUploadService } from \"jslib-common/services/fileUpload.service\";\nimport { FolderService } from \"jslib-common/services/folder.service\";\nimport { KeyConnectorService } from \"jslib-common/services/keyConnector.service\";\nimport { NotificationsService } from \"jslib-common/services/notifications.service\";\nimport { OrganizationService } from \"jslib-common/services/organization.service\";\nimport { PasswordGenerationService } from \"jslib-common/services/passwordGeneration.service\";\nimport { PolicyService } from \"jslib-common/services/policy.service\";\nimport { ProviderService } from \"jslib-common/services/provider.service\";\nimport { SearchService } from \"jslib-common/services/search.service\";\nimport { SendService } from \"jslib-common/services/send.service\";\nimport { SettingsService } from \"jslib-common/services/settings.service\";\nimport { StateMigrationService } from \"jslib-common/services/stateMigration.service\";\nimport { SyncService } from \"jslib-common/services/sync.service\";\nimport { SystemService } from \"jslib-common/services/system.service\";\nimport { TokenService } from \"jslib-common/services/token.service\";\nimport { TotpService } from \"jslib-common/services/totp.service\";\nimport { TwoFactorService } from \"jslib-common/services/twoFactor.service\";\nimport { UserVerificationService } from \"jslib-common/services/userVerification.service\";\nimport { UsernameGenerationService } from \"jslib-common/services/usernameGeneration.service\";\nimport { WebCryptoFunctionService } from \"jslib-common/services/webCryptoFunction.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { Account } from \"../models/account\";\nimport { PopupUtilsService } from \"../popup/services/popup-utils.service\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../services/abstractions/autofill.service\";\nimport { StateService as StateServiceAbstraction } from \"../services/abstractions/state.service\";\nimport AutofillService from \"../services/autofill.service\";\nimport { BrowserCryptoService } from \"../services/browserCrypto.service\";\nimport BrowserMessagingService from \"../services/browserMessaging.service\";\nimport BrowserMessagingPrivateModeBackgroundService from \"../services/browserMessagingPrivateModeBackground.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\nimport BrowserStorageService from \"../services/browserStorage.service\";\nimport I18nService from \"../services/i18n.service\";\nimport { StateService } from \"../services/state.service\";\nimport { VaultFilterService } from \"../services/vaultFilter.service\";\nimport VaultTimeoutService from \"../services/vaultTimeout.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport ContextMenusBackground from \"./contextMenus.background\";\nimport IdleBackground from \"./idle.background\";\nimport IconDetails from \"./models/iconDetails\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport NotificationBackground from \"./notification.background\";\nimport RuntimeBackground from \"./runtime.background\";\nimport TabsBackground from \"./tabs.background\";\nimport WebRequestBackground from \"./webRequest.background\";\n\nexport default class MainBackground {\n  messagingService: MessagingServiceAbstraction;\n  storageService: StorageServiceAbstraction;\n  secureStorageService: StorageServiceAbstraction;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: EnvironmentServiceAbstraction;\n  settingsService: SettingsServiceAbstraction;\n  cipherService: CipherServiceAbstraction;\n  folderService: FolderServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutServiceAbstraction;\n  syncService: SyncServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  exportService: ExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  stateMigrationService: StateMigrationService;\n  systemService: SystemServiceAbstraction;\n  eventService: EventServiceAbstraction;\n  policyService: PolicyServiceAbstraction;\n  popupUtilsService: PopupUtilsService;\n  sendService: SendServiceAbstraction;\n  fileUploadService: FileUploadServiceAbstraction;\n  organizationService: OrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  twoFactorService: TwoFactorServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private sidebarAction: any;\n  private buildingContextMenu: boolean;\n  private menuOptionsLoaded: any[] = [];\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n\n  constructor(public isPrivateMode: boolean = false) {\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        this.notificationsService.updateConnection(false);\n      }\n      await this.setIcon();\n      await this.refreshBadgeAndMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.reloadProcess();\n      }\n    };\n\n    const logoutCallback = async (expired: boolean, userId?: string) =>\n      await this.logout(expired, userId);\n\n    this.messagingService = isPrivateMode\n      ? new BrowserMessagingPrivateModeBackgroundService()\n      : new BrowserMessagingService();\n    this.storageService = new BrowserStorageService();\n    this.secureStorageService = new BrowserStorageService();\n    this.logService = new ConsoleLogService(false);\n    this.stateMigrationService = new StateMigrationService(\n      this.storageService,\n      this.secureStorageService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.stateService = new StateService(\n      this.storageService,\n      this.secureStorageService,\n      this.logService,\n      this.stateMigrationService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.platformUtilsService = new BrowserPlatformUtilsService(\n      this.messagingService,\n      this.stateService,\n      (clipboardValue, clearMs) => {\n        if (this.systemService != null) {\n          this.systemService.clearClipboard(clipboardValue, clearMs);\n        }\n      },\n      async () => {\n        if (this.nativeMessagingBackground != null) {\n          const promise = this.nativeMessagingBackground.getResponse();\n\n          try {\n            await this.nativeMessagingBackground.send({ command: \"biometricUnlock\" });\n          } catch (e) {\n            return Promise.reject(e);\n          }\n\n          return promise.then((result) => result.response === \"unlocked\");\n        }\n      }\n    );\n    this.i18nService = new I18nService(BrowserApi.getUILanguage(window));\n    this.cryptoFunctionService = new WebCryptoFunctionService(window);\n    this.cryptoService = new BrowserCryptoService(\n      this.cryptoFunctionService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService\n    );\n    this.tokenService = new TokenService(this.stateService);\n    this.appIdService = new AppIdService(this.storageService);\n    this.environmentService = new EnvironmentService(this.stateService);\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      (expired: boolean) => this.logout(expired)\n    );\n    this.settingsService = new SettingsService(this.stateService);\n    this.fileUploadService = new FileUploadService(this.logService, this.apiService);\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.settingsService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      () => this.searchService,\n      this.logService,\n      this.stateService\n    );\n    this.folderService = new FolderService(\n      this.cryptoService,\n      this.apiService,\n      this.i18nService,\n      this.cipherService,\n      this.stateService\n    );\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateService\n    );\n    this.searchService = new SearchService(this.cipherService, this.logService, this.i18nService);\n    this.sendService = new SendService(\n      this.cryptoService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      this.cryptoFunctionService,\n      this.stateService\n    );\n    this.organizationService = new OrganizationService(this.stateService);\n    this.policyService = new PolicyService(\n      this.stateService,\n      this.organizationService,\n      this.apiService\n    );\n    this.keyConnectorService = new KeyConnectorService(\n      this.stateService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.cryptoFunctionService,\n      logoutCallback\n    );\n    this.vaultFilterService = new VaultFilterService(\n      this.stateService,\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService\n    );\n\n    this.twoFactorService = new TwoFactorService(this.i18nService, this.platformUtilsService);\n\n    // eslint-disable-next-line\n    const that = this;\n    const backgroundMessagingService = new (class extends MessagingServiceAbstraction {\n      // AuthService should send the messages to the background not popup.\n      send = (subscriber: string, arg: any = {}) => {\n        const message = Object.assign({}, { command: subscriber }, arg);\n        that.runtimeBackground.processMessage(message, that, null);\n      };\n    })();\n    this.authService = new AuthService(\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.appIdService,\n      this.platformUtilsService,\n      backgroundMessagingService,\n      this.logService,\n      this.keyConnectorService,\n      this.environmentService,\n      this.stateService,\n      this.twoFactorService,\n      this.i18nService\n    );\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.cryptoService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.tokenService,\n      this.policyService,\n      this.keyConnectorService,\n      this.stateService,\n      this.authService,\n      lockedCallback,\n      logoutCallback\n    );\n    this.providerService = new ProviderService(this.stateService);\n    this.syncService = new SyncService(\n      this.apiService,\n      this.settingsService,\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.collectionService,\n      this.messagingService,\n      this.policyService,\n      this.sendService,\n      this.logService,\n      this.keyConnectorService,\n      this.stateService,\n      this.organizationService,\n      this.providerService,\n      logoutCallback\n    );\n    this.eventService = new EventService(\n      this.apiService,\n      this.cipherService,\n      this.stateService,\n      this.logService,\n      this.organizationService\n    );\n    this.passwordGenerationService = new PasswordGenerationService(\n      this.cryptoService,\n      this.policyService,\n      this.stateService\n    );\n    this.totpService = new TotpService(\n      this.cryptoFunctionService,\n      this.logService,\n      this.stateService\n    );\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.stateService,\n      this.totpService,\n      this.eventService,\n      this.logService\n    );\n    this.containerService = new ContainerService(this.cryptoService);\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n    this.exportService = new ExportService(\n      this.folderService,\n      this.cipherService,\n      this.apiService,\n      this.cryptoService,\n      this.cryptoFunctionService\n    );\n    this.notificationsService = new NotificationsService(\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.logService,\n      this.stateService,\n      this.authService\n    );\n    this.popupUtilsService = new PopupUtilsService(isPrivateMode);\n\n    this.userVerificationService = new UserVerificationService(\n      this.cryptoService,\n      this.i18nService,\n      this.apiService\n    );\n\n    const systemUtilsServiceReloadCallback = () => {\n      const forceWindowReload =\n        this.platformUtilsService.isSafari() ||\n        this.platformUtilsService.isFirefox() ||\n        this.platformUtilsService.isOpera();\n      BrowserApi.reloadExtension(forceWindowReload ? window : null);\n      return Promise.resolve();\n    };\n\n    this.systemService = new SystemService(\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.stateService\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.sidebarAction = this.isSafari\n      ? null\n      : typeof opr !== \"undefined\" && opr.sidebarAction\n      ? opr.sidebarAction\n      : (window as any).chrome.sidebarAction;\n\n    // Background\n    this.runtimeBackground = new RuntimeBackground(\n      this,\n      this.autofillService,\n      this.platformUtilsService as BrowserPlatformUtilsService,\n      this.i18nService,\n      this.notificationsService,\n      this.systemService,\n      this.environmentService,\n      this.messagingService,\n      this.logService\n    );\n    this.nativeMessagingBackground = new NativeMessagingBackground(\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.runtimeBackground,\n      this.i18nService,\n      this.messagingService,\n      this.appIdService,\n      this.platformUtilsService,\n      this.stateService,\n      this.logService,\n      this.authService\n    );\n    this.commandsBackground = new CommandsBackground(\n      this,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.vaultTimeoutService,\n      this.authService\n    );\n    this.notificationBackground = new NotificationBackground(\n      this.autofillService,\n      this.cipherService,\n      this.authService,\n      this.policyService,\n      this.folderService,\n      this.stateService\n    );\n\n    this.tabsBackground = new TabsBackground(this, this.notificationBackground);\n    this.contextMenusBackground = new ContextMenusBackground(\n      this,\n      this.cipherService,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.authService,\n      this.eventService,\n      this.totpService\n    );\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.stateService,\n      this.notificationsService\n    );\n    this.webRequestBackground = new WebRequestBackground(\n      this.platformUtilsService,\n      this.cipherService,\n      this.authService\n    );\n\n    this.usernameGenerationService = new UsernameGenerationService(\n      this.cryptoService,\n      this.stateService,\n      this.apiService\n    );\n  }\n\n  async bootstrap() {\n    this.containerService.attachToWindow(window);\n\n    await this.stateService.init();\n\n    await (this.vaultTimeoutService as VaultTimeoutService).init(true);\n    await (this.i18nService as I18nService).init();\n    await (this.eventService as EventService).init(true);\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    await this.commandsBackground.init();\n\n    this.twoFactorService.init();\n\n    await this.tabsBackground.init();\n    await this.contextMenusBackground.init();\n    await this.idleBackground.init();\n    await this.webRequestBackground.init();\n\n    if (this.platformUtilsService.isFirefox() && !this.isPrivateMode) {\n      // Set Private Mode windows to the default icon - they do not share state with the background page\n      const privateWindows = await BrowserApi.getPrivateModeWindows();\n      privateWindows.forEach(async (win) => {\n        await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n        await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n      });\n\n      BrowserApi.onWindowCreated(async (win) => {\n        if (win.incognito) {\n          await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n          await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n        }\n      });\n    }\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        await this.environmentService.setUrlsFromStorage();\n        await this.setIcon();\n        this.fullSync(true);\n        setTimeout(() => this.notificationsService.init(), 2500);\n        resolve();\n      }, 500);\n    });\n  }\n\n  async setIcon() {\n    if ((!chrome.browserAction && !this.sidebarAction) || this.isPrivateMode) {\n      return;\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    let suffix = \"\";\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      suffix = \"_gray\";\n    } else if (authStatus === AuthenticationStatus.Locked) {\n      suffix = \"_locked\";\n    }\n\n    await this.actionSetIcon(chrome.browserAction, suffix);\n    await this.actionSetIcon(this.sidebarAction, suffix);\n  }\n\n  async refreshBadgeAndMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    const menuDisabled = await this.stateService.getDisableContextMenuItem();\n    if (!menuDisabled) {\n      await this.buildContextMenu();\n    } else {\n      await this.contextMenusRemoveAll();\n    }\n\n    if (forLocked) {\n      await this.loadMenuAndUpdateBadgeForNoAccessState(!menuDisabled);\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.contextMenuReady(tab, !menuDisabled);\n    }\n  }\n\n  async logout(expired: boolean, userId?: string) {\n    await this.eventService.uploadEvents(userId);\n\n    await Promise.all([\n      this.eventService.clearEvents(userId),\n      this.syncService.setLastSync(new Date(0), userId),\n      this.cryptoService.clearKeys(userId),\n      this.settingsService.clear(userId),\n      this.cipherService.clear(userId),\n      this.folderService.clear(userId),\n      this.collectionService.clear(userId),\n      this.policyService.clear(userId),\n      this.passwordGenerationService.clear(userId),\n      this.vaultTimeoutService.clear(userId),\n      this.keyConnectorService.clear(),\n      this.vaultFilterService.clear(),\n    ]);\n\n    await this.stateService.clean({ userId: userId });\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      this.messagingService.send(\"doneLoggingOut\", { expired: expired, userId: userId });\n    }\n\n    await this.setIcon();\n    await this.refreshBadgeAndMenu(true);\n    await this.reseedStorage();\n    this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.reloadProcess();\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    const currentVaultTimeout = await this.stateService.getVaultTimeout();\n    if (currentVaultTimeout == null) {\n      return;\n    }\n\n    const getStorage = (): Promise<any> =>\n      new Promise((resolve) => {\n        chrome.storage.local.get(null, (o: any) => resolve(o));\n      });\n\n    const clearStorage = (): Promise<void> =>\n      new Promise((resolve) => {\n        chrome.storage.local.clear(() => resolve());\n      });\n\n    const storage = await getStorage();\n    await clearStorage();\n\n    for (const key in storage) {\n      // eslint-disable-next-line\n      if (!storage.hasOwnProperty(key)) {\n        continue;\n      }\n      await this.storageService.save(key, storage[key]);\n    }\n  }\n\n  private async buildContextMenu() {\n    if (!chrome.contextMenus || this.buildingContextMenu) {\n      return;\n    }\n\n    this.buildingContextMenu = true;\n    await this.contextMenusRemoveAll();\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"root\",\n      contexts: [\"all\"],\n      title: \"Bitwarden\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"autofill\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"autoFill\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-username\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyUsername\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyPassword\"),\n    });\n\n    if (await this.stateService.getCanAccessPremium()) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp\",\n        parentId: \"root\",\n        contexts: [\"all\"],\n        title: this.i18nService.t(\"copyVerificationCode\"),\n      });\n    }\n\n    await this.contextMenusCreate({\n      type: \"separator\",\n      parentId: \"root\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"generate-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"generatePasswordCopied\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-identifier\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyElementIdentifier\"),\n    });\n\n    this.buildingContextMenu = false;\n  }\n\n  private async contextMenuReady(tab: any, contextMenuEnabled: boolean) {\n    await this.loadMenuAndUpdateBadge(tab.url, tab.id, contextMenuEnabled);\n    this.onUpdatedRan = this.onReplacedRan = false;\n  }\n\n  private async loadMenuAndUpdateBadge(url: string, tabId: number, contextMenuEnabled: boolean) {\n    if (!url || (!chrome.browserAction && !this.sidebarAction)) {\n      return;\n    }\n\n    this.actionSetBadgeBackgroundColor(chrome.browserAction);\n    this.actionSetBadgeBackgroundColor(this.sidebarAction);\n\n    this.menuOptionsLoaded = [];\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.Unlocked) {\n      try {\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(url);\n        ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n        if (contextMenuEnabled) {\n          ciphers.forEach((cipher) => {\n            this.loadLoginContextMenuOptions(cipher);\n          });\n        }\n\n        const disableBadgeCounter = await this.stateService.getDisableBadgeCounter();\n        let theText = \"\";\n\n        if (!disableBadgeCounter) {\n          if (ciphers.length > 0 && ciphers.length <= 9) {\n            theText = ciphers.length.toString();\n          } else if (ciphers.length > 0) {\n            theText = \"9+\";\n          }\n        }\n\n        if (contextMenuEnabled && ciphers.length === 0) {\n          await this.loadNoLoginsContextMenuOptions(this.i18nService.t(\"noMatchingLogins\"));\n        }\n\n        this.sidebarActionSetBadgeText(theText, tabId);\n        this.browserActionSetBadgeText(theText, tabId);\n\n        return;\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    await this.loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled);\n  }\n\n  private async loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled: boolean) {\n    if (contextMenuEnabled) {\n      const authed = await this.stateService.getIsAuthenticated();\n      await this.loadNoLoginsContextMenuOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\")\n      );\n    }\n\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach((tab) => {\n        if (tab.id != null) {\n          this.browserActionSetBadgeText(\"\", tab.id);\n          this.sidebarActionSetBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  private async loadLoginContextMenuOptions(cipher: any) {\n    if (\n      cipher == null ||\n      cipher.type !== CipherType.Login ||\n      cipher.reprompt !== CipherRepromptType.None\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n    if (cipher.login.username && cipher.login.username !== \"\") {\n      title += \" (\" + cipher.login.username + \")\";\n    }\n    await this.loadContextMenuOptions(title, cipher.id, cipher);\n  }\n\n  private async loadNoLoginsContextMenuOptions(noLoginsMessage: string) {\n    await this.loadContextMenuOptions(noLoginsMessage, \"noop\", null);\n  }\n\n  private async loadContextMenuOptions(title: string, idSuffix: string, cipher: any) {\n    if (\n      !chrome.contextMenus ||\n      this.menuOptionsLoaded.indexOf(idSuffix) > -1 ||\n      (cipher != null && cipher.type !== CipherType.Login)\n    ) {\n      return;\n    }\n\n    this.menuOptionsLoaded.push(idSuffix);\n\n    if (cipher == null || (cipher.login.password && cipher.login.password !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"autofill_\" + idSuffix,\n        parentId: \"autofill\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (cipher == null || (cipher.login.username && cipher.login.username !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-username_\" + idSuffix,\n        parentId: \"copy-username\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (\n      cipher == null ||\n      (cipher.login.password && cipher.login.password !== \"\" && cipher.viewPassword)\n    ) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-password_\" + idSuffix,\n        parentId: \"copy-password\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    if (canAccessPremium && (cipher == null || (cipher.login.totp && cipher.login.totp !== \"\"))) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp_\" + idSuffix,\n        parentId: \"copy-totp\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n  }\n\n  private sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n      this.scheduleNextSync();\n    } else {\n      this.scheduleNextSync();\n    }\n  }\n\n  private scheduleNextSync() {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n\n    this.syncTimeout = setTimeout(async () => await this.fullSync(), 5 * 60 * 1000); // check every 5 minutes\n  }\n\n  // Browser API Helpers\n\n  private contextMenusRemoveAll() {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.removeAll(() => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private contextMenusCreate(options: any) {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.create(options, () => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private async actionSetIcon(theAction: any, suffix: string, windowId?: number): Promise<any> {\n    if (!theAction || !theAction.setIcon) {\n      return;\n    }\n\n    const options: IconDetails = {\n      path: {\n        19: \"images/icon19\" + suffix + \".png\",\n        38: \"images/icon38\" + suffix + \".png\",\n      },\n    };\n\n    if (this.platformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n      await theAction.setIcon(options);\n    } else if (this.platformUtilsService.isSafari()) {\n      // Workaround since Safari 14.0.3 returns a pending promise\n      // which doesn't resolve within a reasonable time.\n      theAction.setIcon(options);\n    } else {\n      return new Promise<void>((resolve) => {\n        theAction.setIcon(options, () => resolve());\n      });\n    }\n  }\n\n  private actionSetBadgeBackgroundColor(action: any) {\n    if (action && action.setBadgeBackgroundColor) {\n      action.setBadgeBackgroundColor({ color: \"#294e5f\" });\n    }\n  }\n\n  private browserActionSetBadgeText(text: string, tabId: number) {\n    if (chrome.browserAction && chrome.browserAction.setBadgeText) {\n      chrome.browserAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private sidebarActionSetBadgeText(text: string, tabId: number) {\n    if (!this.sidebarAction) {\n      return;\n    }\n\n    if (this.sidebarAction.setBadgeText) {\n      this.sidebarAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    } else if (this.sidebarAction.setTitle) {\n      let title = \"Bitwarden\";\n      if (text && text !== \"\") {\n        title += \" [\" + text + \"]\";\n      }\n\n      this.sidebarAction.setTitle({\n        title: title,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private async reloadProcess(): Promise<void> {\n    const accounts = this.stateService.accounts.getValue();\n    if (accounts != null) {\n      for (const userId of Object.keys(accounts)) {\n        if ((await this.authService.getAuthStatus(userId)) === AuthenticationStatus.Unlocked) {\n          return;\n        }\n      }\n    }\n    await this.systemService.startProcessReload();\n  }\n}\n","export abstract class MessagingService {\n  send: (subscriber: string, arg?: any) => void;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t352: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(88941)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","AuthenticationStatus","CipherRepromptType","CipherType","StateVersion","ThemeType","DeviceType","AccountFactory","constructor","accountConstructor","this","create","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","EnvironmentUrls","base","api","identity","icons","notifications","events","webVault","keyConnector","WindowState","GlobalState","theme","System","window","stateVersion","One","environmentUrls","DeviceRequest","appId","platformUtilsService","type","getDevice","name","getDeviceString","identifier","pushToken","TokenRequestTwoFactor","provider","token","remember","BaseResponse","response","getResponseProperty","propertyName","exactName","undefined","otherCasePropertyName","charAt","toUpperCase","toLowerCase","length","slice","BillingResponse","super","invoices","transactions","balance","paymentSource","BillingSourceResponse","map","t","BillingTransactionResponse","i","BillingInvoiceResponse","cardBrand","description","needsVerification","url","pdfUrl","number","paid","date","amount","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","hasNoHistory","BillingPaymentResponse","OrganizationConnectionResponse","configType","organizationId","enabled","rawConfig","config","nodeURL","Utils","static","inited","isNode","process","release","isBrowser","isMobileBrowser","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","str","Uint8Array","Buffer","from","binaryString","atob","bytes","charCodeAt","fromB64ToArray","fromUrlB64ToB64","parseInt","substr","strUtf8","unescape","encodeURIComponent","arr","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromB64toUrlB64","fromBufferToB64","b64Str","replace","encodedString","apply","decodeURIComponent","escape","Array","prototype","call","x","join","urlB64Str","output","fromB64ToUtf8","utfStr","fromBufferToUrlB64","fromUtf8ToArray","c","r","Math","random","RegExp","test","uriString","getUrl","hostname","host","trim","startsWith","httpUrl","indexOf","tldEndingRegex","getUrlObject","tldjs","isValid","validIpAddress","urlDomain","getDomain","domain","search","Map","split","forEach","pair","parts","set","i18nService","prop","a","b","collator","compare","localeCompare","target","source","Object","assign","obj","filter","k","Number","isNaN","s","ipString","win","mobile","navigator","userAgent","vendor","opera","match","URL","hasProtocol","anchor","document","createElement","href","regexpEmojiPresentation","init","TokenRequest","twoFactor","device","alterIdentityTokenHeaders","headers","setTwoFactor","toIdentityToken","clientId","scope","client_id","deviceType","deviceIdentifier","deviceName","twoFactorToken","twoFactorProvider","twoFactorRemember","ApiTokenRequest","clientSecret","grant_type","client_secret","ApiKeyResponse","apiKey","revisionDate","Date","AttachmentResponse","fileName","key","size","sizeName","CardApi","data","cardholderName","brand","expMonth","expYear","FieldApi","value","linkedId","IdentityApi","title","firstName","middleName","lastName","address1","address2","address3","city","state","postalCode","country","company","email","phone","ssn","username","passportNumber","licenseNumber","LoginUriApi","uri","LoginApi","password","passwordRevisionDate","totp","autofillOnPageLoad","uris","u","SecureNoteApi","PasswordHistoryResponse","lastUsedDate","CipherResponse","folderId","notes","favorite","edit","viewPassword","organizationUseTotp","collectionIds","deletedDate","login","card","secureNote","fields","f","attachments","passwordHistory","h","reprompt","None","AttachmentUploadDataResponse","attachmentId","fileUploadType","cipherResponse","cipherMiniResponse","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","SelectionReadOnlyResponse","readOnly","hidePasswords","CollectionResponse","externalId","CollectionDetailsResponse","CollectionGroupDetailsResponse","groups","GlobalDomainResponse","domains","excluded","DomainsResponse","globalEquivalentDomains","equivalentDomains","d","EmergencyAccessGranteeDetailsResponse","granteeId","status","waitTimeDays","creationDate","EmergencyAccessGrantorDetailsResponse","grantorId","EmergencyAccessTakeoverResponse","keyEncrypted","kdf","kdfIterations","EmergencyAccessViewResponse","ciphers","ErrorResponse","identityResponse","errorModel","responseErrorModel","message","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","isNullOrWhitespace","statusCode","getSingleMessage","hasOwnProperty","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","push","EventResponse","userId","providerId","cipherId","collectionId","groupId","policyId","organizationUserId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","FolderResponse","GroupResponse","accessAll","GroupDetailsResponse","collections","IdentityCaptchaResponse","siteKey","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","resetMasterPassword","privateKey","forcePasswordReset","apiUseKeyConnector","keyConnectorUrl","IdentityTwoFactorResponse","twoFactorProviders2","captchaToken","twoFactorProviders","KeyConnectorUserKeyResponse","ListResponse","dr","continuationToken","SsoType","OpenIdConnectRedirectBehavior","Saml2BindingType","Saml2NameIdFormat","Saml2SigningBehavior","SsoConfigApi","keyConnectorEnabled","authority","metadataAddress","redirectBehavior","getClaimsFromUserInfoEndpoint","additionalScopes","additionalUserIdClaimTypes","additionalEmailClaimTypes","additionalNameClaimTypes","acrValues","expectedReturnAcrValue","spNameIdFormat","spOutboundSigningAlgorithm","spSigningBehavior","spMinIncomingSigningAlgorithm","spWantAssertionsSigned","spValidateCertificates","idpEntityId","idpBindingType","idpSingleSignOnServiceUrl","idpSingleLogoutServiceUrl","idpX509PublicCert","idpOutboundSigningAlgorithm","idpAllowUnsolicitedAuthnResponse","idpDisableOutboundLogoutRequests","idpWantAuthnRequestsSigned","view","OpenIdConnect","openId","Saml2","saml","idpAllowOutboundLogoutRequests","OrganizationSsoResponse","urls","SsoUrls","callbackPath","signedOutCallbackPath","spEntityId","spMetadataUrl","spAcsUrl","OrganizationApiKeyInformationResponse","keyType","OrganizationAutoEnrollStatusResponse","resetPasswordEnabled","KeysResponse","publicKey","OrganizationKeysResponse","PlanResponse","product","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","baseSeats","baseStorageGb","maxCollections","maxUsers","hasAdditionalSeatsOption","maxAdditionalSeats","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","hasTotp","has2fa","hasApi","hasSso","hasResetPassword","usersGetPremium","upgradeSortOrder","displaySortOrder","legacyYear","disabled","stripePlanId","stripeSeatPlanId","stripeStoragePlanId","stripePremiumAccessPlanId","basePrice","seatPrice","additionalStoragePricePerGb","premiumAccessOptionPrice","OrganizationResponse","businessName","businessAddress1","businessAddress2","businessAddress3","businessCountry","businessTaxNumber","billingEmail","plan","planType","seats","maxAutoscaleSeats","maxStorageGb","useGroups","useDirectory","useEvents","useTotp","use2fa","useApi","useResetPassword","hasPublicAndPrivateKeys","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","SubscriptionResponse","storageName","storageGb","license","expiration","usingInAppPurchase","subscription","upcomingInvoice","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","items","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","quantity","interval","sponsoredSubscriptionItem","OrganizationSubscriptionResponse","OrganizationUserBulkPublicKeyResponse","OrganizationUserBulkResponse","error","PermissionsApi","accessEventLogs","accessImportExport","accessReports","manageAllCollections","manageAssignedCollections","createNewCollections","editAnyCollection","deleteAnyCollection","editAssignedCollections","deleteAssignedCollections","manageCiphers","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","OrganizationUserResponse","permissions","resetPasswordEnrolled","OrganizationUserUserDetailsResponse","twoFactorEnabled","usesKeyConnector","OrganizationUserDetailsResponse","OrganizationUserResetPasswordDetailsReponse","resetPasswordKey","encryptedPrivateKey","ProfileOrganizationResponse","usePolicies","useSso","useKeyConnector","selfHost","ssoBound","providerName","familySponsorshipFriendlyName","familySponsorshipAvailable","planProductType","familySponsorshipLastSyncDateString","familySponsorshipLastSyncDate","familySponsorshipValidUntilString","familySponsorshipValidUntil","familySponsorshipToDelete","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","organizations","providers","providerOrganizations","emailVerified","masterPasswordHint","premium","culture","securityStamp","o","PaymentResponse","userProfile","paymentIntentClientSecret","success","PolicyResponse","PreloginResponse","ProviderOrganizationResponse","settings","ProviderOrganizationOrganizationDetailsResponse","organizationName","ProviderResponse","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","ProviderUserResponse","ProviderUserUserDetailsResponse","SendFileApi","SendTextApi","text","hidden","SendAccessResponse","file","expirationDate","creatorIdentifier","SendFileDownloadDataResponse","SendResponse","accessId","maxAccessCount","accessCount","deletionDate","disable","hideEmail","SendFileUploadDataResponse","sendResponse","SyncResponse","folders","policies","sends","profile","p","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","TwoFactorAuthenticatorResponse","TwoFactorDuoResponse","secretKey","integrationKey","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","attestation","authenticatorSelection","challenge","fromUrlB64ToArray","excludeCredentials","extensions","pubKeyCredParams","rp","timeout","user","TwoFactorYubiKeyResponse","key1","key2","key3","key4","key5","nfc","UserKeyResponse","HtmlStorageLocation","ApiService","tokenService","environmentService","appIdService","logoutCallback","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","WindowsDesktop","MacOsDesktop","LinuxDesktop","postIdentityToken","request","Headers","Accept","identityToken","getClientType","fetch","Request","getIdentityUrl","body","qsStringify","credentials","getCredentials","cache","method","responseJson","isJsonResponse","json","TwoFactorProviders2","clearTwoFactorToken","reject","refreshIdentityToken","doAuthRefresh","getProfile","send","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postPrelogin","isDev","getApiUrl","postEmailToken","postEmail","postPassword","setPassword","postSetKeyConnectorKey","postSecurityStamp","deleteAccount","getAccountRevisionDate","postPasswordHint","postRegister","postPremium","postIapCheck","postReinstatePremium","postCancelPremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountKeys","postAccountKey","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountVerifyPassword","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","postAccountRequestOTP","postAccountVerifyOTP","postConvertToKeyConnector","getUserBillingHistory","getUserBillingPayment","getFolder","postFolder","putFolder","deleteFolder","getSend","postSendAccess","apiUrl","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","sendId","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","getCipher","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","path","postImportCiphers","postImportOrganizationCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionDetails","getUserCollections","getCollections","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteCollectionUser","getGroupDetails","getGroups","getGroupUsers","postGroup","putGroup","putGroupUsers","deleteGroup","deleteGroupUser","getPolicy","getPolicies","getPoliciesByToken","getPoliciesByInvitedUser","putPolicy","getOrganizationUser","getOrganizationUserGroups","getOrganizationUsers","getOrganizationUserResetPasswordDetails","getOrganizationAutoEnrollStatus","postOrganizationUserInvite","postOrganizationUserReinvite","postManyOrganizationUserReinvite","postOrganizationUserAccept","postOrganizationUserConfirm","postOrganizationUsersPublicKey","postOrganizationUserBulkConfirm","putOrganizationUser","putOrganizationUserGroups","putOrganizationUserResetPasswordEnrollment","putOrganizationUserResetPassword","deleteOrganizationUser","deleteManyOrganizationUsers","getPlans","postImportDirectory","postPublicImportDirectory","getTaxRates","getSettingsDomains","putSettingsDomains","getSync","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","deviceResponse","rawId","getClientExtensionResults","AttestationObject","attestationObject","clientDataJson","clientDataJSON","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getEmergencyAccessTrusted","getEmergencyAccessGranted","getEmergencyAccess","getEmergencyGrantorPolicies","putEmergencyAccess","deleteEmergencyAccess","postEmergencyAccessInvite","postEmergencyAccessReinvite","postEmergencyAccessAccept","postEmergencyAccessConfirm","postEmergencyAccessInitiate","postEmergencyAccessApprove","postEmergencyAccessReject","postEmergencyAccessTakeover","postEmergencyAccessPassword","postEmergencyAccessView","getOrganization","getOrganizationBilling","getOrganizationSubscription","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","getOrganizationLicense","getOrganizationTaxInfo","getOrganizationSso","postOrganization","putOrganization","putOrganizationTaxInfo","postLeaveOrganization","postOrganizationLicense","postOrganizationLicenseUpdate","postOrganizationApiKey","getOrganizationApiKeyInformation","postOrganizationRotateApiKey","postOrganizationSso","postOrganizationUpgrade","postOrganizationUpdateSubscription","postOrganizationSeat","postOrganizationStorage","postOrganizationPayment","postOrganizationVerifyBank","postOrganizationCancel","postOrganizationReinstate","deleteOrganization","getOrganizationKeys","postOrganizationKeys","postProviderSetup","getProvider","putProvider","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","start","end","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","getActiveBearerToken","Authorization","getEventsUrl","JSON","stringify","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","getUserKeyFromKeyConnector","handleError","postUserKeyToKeyConnector","getKeyConnectorAlive","getToken","tokenNeedsRefresh","getApplicationVersion","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","getRefreshToken","doRefreshToken","getClientId","getClientSecret","doApiTokenRefresh","decodedToken","decodeToken","tokenResponse","setTokens","getAppId","deviceRequest","tokenRequest","setToken","authed","hasResponse","alterHeaders","requestUrl","requestInit","FormData","tokenError","isTextResponse","Message","params","hasBaseUrl","typeHeader","get","AppIdService","storageService","makeAndGetAppId","getAnonymousAppId","existingId","htmlStorageLocation","Local","guid","newGuid","save","AuditService","cryptoFunctionService","apiService","passwordLeaked","hashBytes","hash","fromBufferToHex","hashStart","hashEnding","find","v","breachedAccounts","limit","throttleKey","AuthenticationType","KeySuffixOptions","TwoFactorProviderType","propertyKey","descriptor","originalMethod","allThrottles","throttles","getThrottles","argsThrottleKey","queue","exec","onFinally","splice","delete","val","catch","err","EncryptionPair","DataEncryptionPair","AccountData","passwordGenerationHistory","AccountKeys","cryptoSymmetricKey","organizationKeys","providerKeys","AccountProfile","pinProtected","vaultTimeoutAction","AccountTokens","tokens","AuthResult","requiresCaptcha","requiresTwoFactor","KeysRequest","LogInStrategy","cryptoService","messagingService","logService","stateService","twoFactorService","captchaBypassToken","logInTwoFactor","captchaResponse","startLogIn","clearSelectedProvider","processTwoFactorResponse","processCaptchaResponse","processTokenResponse","onSuccessfulLogin","buildDeviceRequest","buildTwoFactor","userProvidedTwoFactor","storedTwoFactorToken","getTwoFactorToken","Remember","saveAccountInformation","accountInformation","addAccount","sub","hasPremiumPersonally","kdfType","result","setTwoFactorToken","setEncKey","setEncPrivateKey","createKeyPairForOldAccount","setBiometricLocked","setProviders","makeKeyPair","encryptedString","HashPurpose","ApiLogInStrategy","keyConnectorService","getKeyConnectorUrl","getAndSetKey","logIn","setApiKeyClientId","setApiKeyClientSecret","PasswordTokenRequest","masterPasswordHash","fromUtf8ToUrlB64","PasswordLogInStrategy","authService","setKey","setKeyHash","localHashedPassword","masterPassword","makePreloginKey","hashPassword","LocalAuthorization","hashedPassword","SsoTokenRequest","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLogInStrategy","newSsoUser","convertNewSsoUserToKeyConnector","orgId","redirectUrl","PreloginRequest","AuthService","logInStrategy","strategy","clearState","Password","Sso","Api","saveState","logOut","callback","authingWithApiKey","authingWithSso","authingWithPassword","getAuthStatus","getIsAuthenticated","LoggedOut","hasKeyStored","Auto","getEverBeenUnlocked","getKey","hasKeyInMemory","Unlocked","Locked","preloginResponse","makeKey","startSessionTimeout","clearSessionTimeout","sessionTimeout","setTimeout","clearTimeout","FieldType","UriMatchType","EncryptionType","sequentialize","cacheKey","caches","getCache","argsCacheKey","AttachmentData","CardData","FieldData","IdentityData","LoginUriData","LoginData","PasswordHistoryData","SecureNoteData","CipherData","Login","SecureNote","Card","Identity","ph","AttachmentView","fileSize","EncString","encryptedStringOrType","iv","mac","encType","encryptionType","headerPieces","encPieces","AesCbc128_HmacSha256_B64","AesCbc256_B64","AesCbc256_HmacSha256_B64","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","decrypt","decryptedValue","containerService","getCryptoService","getOrgKey","decryptToUtf8","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","self","theProp","mapProp","all","SymmetricCryptoKey","encKey","macKey","keyB64","encKeyB64","macKeyB64","LoginLinkedId","CardLinkedId","IdentityLinkedId","Attachment","orgKey","decValue","decryptToBytes","toAttachmentData","LinkedMetadata","_i18nKey","i18nKey","linkedFieldOption","linkedFieldOptions","ItemView","CardView","_brand","_number","_subTitle","maskedCode","repeat","maskedNumber","subTitle","count","exp","formatYear","year","toCardData","IdentityView","_firstName","_lastName","fullName","fullAddress","address","fullAddressPart2","addressPart2","LoginView","l","hasUris","maskedPassword","canLaunch","some","launchUri","SecureNoteView","n","CipherView","localData","hasPasswordHistory","hasAttachments","hasOldAttachments","hasFields","passwordRevisionDisplayDate","isDeleted","linkedFieldValue","linkedFieldI18nKey","FieldView","newField","showValue","showCount","maskedValue","Field","toFieldData","toIdentityData","CanLaunchWhitelist","LoginUriView","_uri","_domain","_hostname","_host","_canLaunch","RegularExpression","getHostname","getHost","hostnameOrUri","hostOrUri","isWebsite","LoginUri","toLoginUriData","toLoginData","toISOString","PasswordHistoryView","toPasswordHistoryData","toSecureNoteData","Cipher","model","reduce","promise","attachment","decAttachment","field","decField","decPh","toCipherData","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","has","addCiphers","sort","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","clear","lastUsedIndex","max","cipher","lastLaunched","y","valueOf","getNextIndex","CipherBulkDeleteRequest","ids","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherCollectionsRequest","CipherCreateRequest","CipherShareRequest","DomainMatchBlacklist","Set","CipherService","settingsService","fileUploadService","searchService","sortedCiphersCache","sortCiphersByLastUsed","getDecryptedCipherCache","getDecryptedCiphers","setDecryptedCipherCache","setDecryptedCiphers","clearIndex","indexCiphers","clearCache","clearDecryptedCiphersState","encrypt","originalCipher","existingCipher","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","encryptObjProperty","encryptCipherData","encryptFields","encryptPasswordHistories","encryptAttachments","attachmentsModel","encAttachments","fieldsModel","encFields","encField","encryptField","fieldModel","Boolean","phModels","encPhs","encPh","encryptPasswordHistory","phModel","getEncryptedCiphers","getLocalData","getAll","getAllDecrypted","getUserId","indexedEntityId","decCiphers","hasKey","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","eqDomainsPromise","getEquivalentDomains","eqDomains","matches","eqDomain","concat","matchingDomains","getDefaultUriMatch","domainUrlHost","Host","urlHost","Exact","StartsWith","Never","getAllFromApiForOrganization","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","getTime","setLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","getNeverDomains","setNeverDomains","saveWithServer","upsert","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","reader","FileReader","readAsArrayBuffer","onload","evt","cData","saveAttachmentRawWithServer","onerror","filename","encFileName","dataEncKey","makeEncKey","encData","encryptToBytes","adminRequest","uploadDataResponse","uploadCipherAttachment","legacyServerAttachmentFileUpload","fd","blob","Blob","append","filepath","contentType","saveCollectionsWithServer","setEncryptedCiphers","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","sortCiphersByLastUsedThenName","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","attachmentView","attachmentResponse","buf","arrayBuffer","decBuf","decryptFromBytes","theObj","modelProp","loginUri","lastUsed","autofillOnPageLoadDefault","getAutoFillOnPageLoadDefault","clearSortedCiphers","TreeNode","node","parent","children","ServiceUtils","nodeTree","partIndex","delimiter","partName","nestedTraverse","newPartName","getTreeNodeObject","CollectionData","CollectionView","Collection","CollectionService","setDecryptedCollections","collection","decryptMany","decCollections","getSortFunction","getEncryptedCollections","decryptedCollections","getDecryptedCollections","getAllNested","nodes","collectionCopy","getNested","setEncryptedCollections","LogLevelType","ConsoleLogService","timersMap","debug","write","Debug","info","Info","warning","Warning","level","console","log","warn","time","label","hrtime","timeEnd","elapsed","ContainerService","attachToWindow","attachToGlobal","bitwardenContainerService","EnvironmentService","urlsSubject","Subject","activeAccount","subscribe","setUrlsFromStorage","baseUrl","getNotificationsUrl","notificationsUrl","getWebVaultUrl","webVaultUrl","getSendUrl","getIconsUrl","iconsUrl","identityUrl","eventsUrl","getEnvironmentUrls","envUrls","setUrls","formatUrl","setEnvironmentUrls","next","getUrls","EventData","EventRequest","EventService","cipherService","organizationService","checkOnInterval","uploadEvents","setInterval","collect","eventType","uploadImmediately","orgIds","eventCollection","getEventCollection","event","setEventCollection","clearEvents","KdfType","PBKDF2_SHA256","CardExport","FieldExport","Text","IdentityExport","LoginUriExport","LoginExport","toView","toDomain","SecureNoteType","EventType","SecureNoteExport","Generic","CipherExport","values","build","CipherWithIdExport","CollectionExport","CollectionWithIdExport","EventExport","humanReadableMessage","appIcon","appName","userName","userEmail","ip","FolderView","Folder","FolderExport","FolderWithIdExport","FileUploadType","ExportService","folderService","getExport","format","getOrganizationExport","getEncryptedExport","getDecryptedExport","getPasswordProtectedExport","clearText","salt","randomBytes","makePinKey","encKeyValidation","encText","jsonDoc","encrypted","passwordProtected","encKeyValidation_DO_NOT_EDIT","getOrganizationEncryptedExport","getOrganizationDecryptedExport","getEventExport","getFileName","extension","now","getFullYear","padNumber","getMonth","getDate","getHours","getMinutes","getSeconds","decFolders","foldersMap","exportCiphers","buildCommonCipher","collectionPromises","decCol","cipherPromises","decCipher","collectionsMap","num","width","padCharacter","numString","login_uri","login_username","login_password","login_totp","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","toUTCString","searchParams","blobResponse","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","fromUtf8ToB64","blockIdList","xml","version","Version","month","day","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadSendFile","uploadData","Direct","Azure","FolderData","FolderRequest","FolderService","setDecryptedFolders","getEncryptedFolders","decryptedFolders","getDecryptedFolders","noneFolder","folderCopy","setEncryptedFolders","updates","cId","OrganizationUserType","SetKeyConnectorKeyRequest","orgIdentifier","KeyConnectorUserKeyRequest","KeyConnectorService","setUsesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","organization","keyConnectorRequest","handleKeyConnectorError","userKeyResponse","keyArr","Admin","Owner","isProviderUser","getEmail","pubKey","privKey","setPasswordRequest","setConvertAccountRequired","setConvertAccountToKeyConnector","getConvertAccountRequired","getConvertAccountToKeyConnector","removeConvertAccountRequired","NotificationType","NotificationResponse","contextId","payload","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrgKeys","SyncSettings","LogOut","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","OrganizationUserStatusType","Permissions","NotificationsService","syncService","connected","inactive","reconnectTimer","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","withHubProtocol","on","processNotification","onclose","reconnect","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","notification","isAuthenticated","payloadUserId","UserId","myUserId","syncUpsertCipher","syncDeleteCipher","syncUpsertFolder","syncDeleteFolder","fullSync","syncUpsertSend","syncDeleteSend","min","floor","Organization","canAccess","Confirmed","isManager","Manager","isAdmin","isOwner","canAccessEventLogs","canAccessImportExport","canAccessReports","canCreateNewCollections","canEditAnyCollection","canDeleteAnyCollection","canViewAllCollections","canEditAssignedCollections","canDeleteAssignedCollections","canViewAssignedCollections","canManageGroups","canManageSso","canManagePolicies","canManageUsers","canManageUsersPassword","isExemptFromPolicies","hasAnyPermission","includes","AccessEventLogs","AccessImportExport","AccessReports","CreateNewCollections","EditAnyCollection","DeleteAnyCollection","EditAssignedCollections","DeleteAssignedCollections","ManageGroups","ManageOrganization","ManagePolicies","ManageUsers","ManageUsersPassword","ManageSso","ManageBilling","canManageBilling","hasProvider","OrganizationService","getOrganizations","getByIdentifier","setOrganizations","canManageSponsorships","hasOrganizations","PolicyType","EEFLongWordList","GeneratedPasswordHistory","PasswordGeneratorPolicyOptions","defaultType","minLength","useUppercase","useLowercase","useNumbers","numberCount","useSpecial","specialCount","minNumberWords","capitalize","includeNumber","inEffect","DefaultOptions","ambiguous","minNumber","uppercase","minUppercase","lowercase","minLowercase","special","minSpecial","numWords","wordSeparator","PasswordGenerationService","policyService","generatePassword","options","generatePassphrase","sanitizePasswordLength","positions","shuffleArray","allCharSet","lowercaseCharSet","uppercaseCharSet","numberCharSet","specialCharSet","positionChars","randomCharIndex","randomNumber","listLength","wordList","wordIndex","appendRandomNumberToRandomWord","getOptions","getPasswordGenerationOptions","setPasswordGenerationOptions","enforcedOptions","enforcePasswordGeneratorPoliciesOnOptions","enforcedPolicyOptions","getPasswordGeneratorPolicyOptions","PasswordGenerator","currentPolicy","useUpper","useLower","minNumbers","saveOptions","getHistory","getDecryptedPasswordGenerationHistory","getEncryptedPasswordGenerationHistory","decrypted","decryptHistory","setDecryptedPasswordGenerationHistory","addHistory","currentHistory","matchesPrevious","unshift","pop","newHistory","encryptHistory","setEncryptedPasswordGenerationHistory","passwordStrength","userInputs","globalUserInputs","finalUserInputs","normalizeOptions","index","history","array","j","forGeneration","minUppercaseCalc","minLowercaseCalc","minNumberCalc","minSpecialCalc","PolicyData","MasterPasswordPolicyOptions","minComplexity","requireUpper","requireLower","requireNumbers","requireSpecial","Policy","ResetPasswordPolicyOptions","autoEnrollEnabled","ProviderUserStatusType","ProviderUserType","PolicyService","setDecryptedPolicies","decryptedPolicies","getDecryptedPolicies","diskPolicies","getEncryptedPolicies","policy","getPolicyForOrganization","policyType","org","setEncryptedPolicies","getMasterPasswordPoliciesForInvitedUsers","mapPoliciesFromToken","getMasterPasswordPolicyOptions","MasterPassword","evaluateMasterPassword","newPassword","toLocaleLowerCase","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","policiesResponse","policyAppliesToUser","policyFilter","filteredPolicies","policySet","Accepted","isExcemptFromPolicies","MaximumVaultTimeout","Provider","isProviderAdmin","canCreateOrganizations","ProviderAdmin","ProviderService","getProviders","SendType","SearchService","indexing","searchableMinLength","locale","isSearchable","query","builder","lunr","Builder","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","add","searchCiphers","results","isArray","every","getIndexForSearch","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","searchSends","joined","protocolIndex","queryIndex","substring","SendFileData","SendTextData","SendData","File","SendFileView","SendTextView","maskedText","SendView","urlB64Key","maxAccessCountReached","expired","pendingDelete","SendFile","SendText","Send","cryptoKey","makeSendKey","SendRequest","fileLength","SendService","setDecryptedSends","fileData","passwordHash","pbkdf2","ArrayBuffer","encryptFileData","parseFile","getEncryptedSends","decSends","getDecryptedSends","sendData","legacyServerSendFileUpload","setEncryptedSends","removePasswordWithServer","Keys","SettingsService","setSettings","getSettingsKey","setEquivalentDomains","setSettingsKey","getSettings","TokenService","decoded","fromUrlB64ToUtf8","parse","clientIdClientSecret","setRefreshToken","setClientId","setClientSecret","getApiKeyClientId","getApiKeyClientSecret","setAccessToken","getAccessToken","clearToken","storedToken","getDecodedToken","getTokenExpirationDate","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","msRemaining","round","minutes","getEmailVerified","email_verified","getName","getPremium","getIssuer","iss","amr","v1Keys","alwaysShowDock","autoConfirmFingerprints","autoFillOnPageLoadDefault","biometricAwaitingAcceptance","biometricFingerprintValidated","biometricText","biometricUnlock","clearClipboard","collapsedGroupings","convertAccountToKeyConnector","defaultUriMatch","disableAddLoginNotification","disableAutoBiometricsPrompt","disableAutoTotpCopy","disableBadgeCounter","disableChangedPasswordNotification","disableContextMenuItem","disableFavicon","disableGa","dontShowCardsCurrentTab","dontShowIdentitiesCurrentTab","enableAlwaysOnTop","enableAutoFillOnPageLoad","enableBiometric","enableBrowserIntegration","enableBrowserIntegrationFingerprint","enableCloseToTray","enableFullWidth","enableGravatars","enableMinimizeToTray","enableStartToTray","enableTray","encOrgKeys","encPrivate","encProviderKeys","entityId","entityType","installedVersion","keyHash","lastActive","mainWindowSize","minimizeOnCopyToClipboard","neverDomains","noAutoPromptBiometricsText","openAtLogin","passwordGenerationOptions","protectedPin","ssoCodeVerifier","ssoIdentifier","ssoState","stamp","usesConnector","vaultTimeout","rememberedEmail","v1KeyPrefixes","lastSync","partialKeys","StateMigrationService","secureStorageService","stateFactory","needsMigration","currentStateVersion","getCurrentStateVersion","Latest","migrate","migrateStateFrom1To2","Two","migrateStateFrom2To3","Three","migrateStateFrom3To4","clearV1Keys","clearingUserId","keyPrefix","globals","noAutoPromptBiometrics","ssoOrganizationIdentifier","defaultAccount","accountSettings","autoConfirmFingerPrints","biometricLocked","enableGravitars","addEditCipherInfo","apiKeyClientSecret","cryptoMasterKey","cryptoMasterKeyAuto","cryptoMasterKeyB64","cryptoMasterKeyBiometric","legacyEtmKey","apiKeyClientId","authenticationStatus","everBeenUnlocked","accountActivity","keySuffix","remove","authenticatedUserIds","account","getGlobals","Four","OrganizationData","ProviderData","SyncService","collectionService","sendService","providerService","syncInProgress","getLastSync","setLastSync","toJSON","forceSync","allowThrowOnError","syncStarted","syncCompleted","needsSync","needsSyncing","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","syncPolicies","isEdit","localFolder","remoteFolder","shouldUpdate","localCipher","checkCollections","remoteCipher","localSend","remoteSend","successfully","getSecurityStamp","setProviderKeys","setOrgKeys","setSecurityStamp","setEmailVerified","setForcePasswordReset","SystemService","reloadCallback","reloadInterval","clearClipboardTimeout","clearClipboardTimeoutFunction","startProcessReload","getDecryptedPinProtected","getBiometricLocked","cancelProcessReload","doRefresh","getLastActive","biometricLockedFingerprintValidated","getBiometricFingerprintValidated","clearInterval","clipboardValue","timeoutMs","getClearClipboard","clearSeconds","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","clearPendingClipboard","B32Chars","SteamChars","TotpService","getCode","period","alg","digits","keyB32","isOtpAuth","isSteamAuth","getQueryParams","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","fromHexToArray","keyBytes","b32ToBytes","sign","offset","otp","fullCode","trunc","pow","getTimeInterval","isAutoCopyEnabled","getDisableAutoTotpCopy","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","signature","hmac","TwoFactorProviders","Authenticator","priority","Yubikey","Duo","OrganizationDuo","Email","WebAuthn","TwoFactorService","selectedTwoFactorProviderType","getSupportedProviders","twoFactorProvidersData","supportsDuo","supportsWebAuthn","getDefaultProvider","webAuthnSupported","providerType","providerPriority","_value","setSelectedProvider","clearProviders","VerificationType","VerifyOTPRequest","OTP","SecretVerificationRequest","UserVerificationService","buildRequest","verification","requestClass","alreadyHashed","validateInput","secret","verifyUser","compareAndUpdateKeyHash","requestOTP","wordCapitalize","wordIncludeNumber","subaddressType","catchallType","forwardedService","forwardedAnonAddyDomain","UsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","word","zeroPad","subaddressEmail","atIndex","emailBeginning","emailEnding","subaddressString","randomString","website","catchallDomain","startString","forwardedSimpleLoginApiKey","generateSimpleLoginAlias","forwardedAnonAddyApiToken","generateAnonAddyAlias","forwardedFirefoxApiToken","generateFirefoxRelayAlias","getUsernameGenerationOptions","setUsernameGenerationOptions","charSet","redirect","Authentication","note","alias","apiToken","websiteNote","generated_for","full_address","DecryptParameters","WebCryptoFunctionService","crypto","subtle","algorithm","iterations","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","importKey","deriveBits","hkdf","ikm","outputByteSize","hkdfParams","hkdfExpand","prk","hashLen","infoBuf","infoArr","runningOkmLength","previousT","okm","md","valueBytes","toByteString","update","fromByteStringToArray","digest","valueBuf","signingAlgorithm","mac1","mac2","arr1","arr2","hmacFast","getBytes","compareFast","rand","Uint32Array","putInt32","aesEncrypt","aesDecryptFastParameters","meta","encKeyByteString","macKeyByteString","macData","aesDecryptFast","parameters","dataBuffer","decipher","finish","aesDecrypt","rsaEncrypt","rsaParams","rsaDecrypt","rsaExtractPublicKey","impPrivateKey","jwkPrivateKey","exportKey","jwkPublicKeyParams","kty","ext","impPublicKey","rsaGenerateKeyPair","modulusLength","publicExponent","keyPair","generateKey","getRandomValues","fromBufferToByteString","SafariApp","command","resolveNow","BrowserApi","isSafariApi","messageId","MAX_SAFE_INTEGER","browser","runtime","sendNativeMessage","responseData","tabsQueryFirst","active","windowId","chrome","windows","WINDOW_ID_CURRENT","currentWindow","tabsQuery","tabs","tab","tabSendMessage","sendMessage","lastError","incognito","onCreated","addListener","getBackgroundPage","getManifest","getViews","extensionPage","onMessage","msg","sender","windowType","tabToClose","tabId","highlighted","isWebExtensionsApi","isFirefoxOnAndroid","finally","close","blobData","blobOptions","sendMessageToApp","msSaveOrOpenBlob","msSaveBlob","createObjectURL","download","appendChild","click","removeChild","i18n","getUILanguage","location","reload","w","application","connectNative","isChromeApi","permission","getPlatformInfo","BrowserComponentState","BrowserGroupingsComponentState","BrowserSendComponentState","AccountSettings","Account","groupings","sendType","PopupUtilsService","privateMode","inSidebar","inTab","inPopout","inPopup","inPrivateMode","getContentScrollY","scrollingContainer","getElementsByTagName","scrollTop","setContentScrollY","scrollY","popOut","hrefParts","bodyRect","querySelector","getBoundingClientRect","height","closePopup","AutofillScript","documentUUID","script","properties","metadata","autosubmit","AutoFillConstants","UsernameFieldNames","PasswordFieldIgnoreList","ExcludedAutofillTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","EmailFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","AutofillService","totpService","eventService","getFormsWithPasswordFields","pageDetails","formData","passwordFields","loadPasswordFields","formKey","forms","formPasswordFields","pf","form","uf","findUsernameField","passwords","doAutoFill","totpPromise","getActiveTab","canAccessPremium","getCanAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","fillNewPassword","delay_between_operations","skipLastUsed","frameId","Cipher_ClientAutofilled","doAutoFillActiveTab","fromCommand","lastLaunchedCipher","totpCode","getTabFromCurrentWindow","filledFields","fieldNames","hasValue","opid","viewable","tagName","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","setFillScriptForFocus","passwordFieldsForForm","passField","elementNumber","fieldIsFuzzyMatch","fillFields","forCustomFieldsOnly","isExcludedType","attr","isFieldMatch","makeScriptAction","selectInfo","siOptions","option","fieldAttrsContain","maxLength","colonIndex","fullMonth","fullYear","partYear","makeScriptActionWithValue","containsVal","doesContain","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","excludedTypes","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","valueIsLikePassword","cleanedValue","readonly","htmlID","htmlName","placeholder","autoCompleteType","passwordField","withoutForm","usernameField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","property","separator","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","EncArrayBuffer","EncryptedObject","CryptoService","platformUtilService","setCryptoMasterKey","storeKey","setDecryptedCryptoSymmetricKey","setEncryptedCryptoSymmetricKey","encPrivateKey","setDecryptedPrivateKey","setEncryptedPrivateKey","orgs","providerOrgs","orgKeys","providerOrg","providerKey","getProviderKey","setDecryptedOrganizationKeys","setEncryptedOrganizationKeys","setDecryptedProviderKeys","setEncryptedProviderKeys","inMemoryKey","getCryptoMasterKey","symmetricKey","getKeyFromStorage","retrieveKeyFromStorage","validateKey","clearSecretKeyStore","getKeyHash","storedKeyHash","localKeyHash","serverKeyHash","ServerAuthorization","getEncKey","getEncKeyHelper","getPublicKey","inMemoryPublicKey","getPrivateKey","setPublicKey","decryptedPrivateKey","getDecryptedPrivateKey","getEncryptedPrivateKey","getFingerprint","keyFingerprint","userFingerprint","hashPhrase","getOrgKeys","decryptedOrganizationKeys","getDecryptedOrganizationKeys","getEncryptedOrganizationKeys","getProviderKeys","decryptedProviderKeys","getDecryptedProviderKeys","getEncryptedProviderKeys","Biometric","getCryptoMasterKeyAuto","hasCryptoMasterKeyBiometric","hasEncKey","getEncryptedCryptoSymmetricKey","clearKey","clearSecretStorage","setLegacyEtmKey","clearStoredKey","setCryptoMasterKeyAuto","setCryptoMasterKeyBiometric","clearKeyHash","clearEncKey","memoryOnly","clearKeyPair","keysToClear","clearOrgKeys","clearProviderKeys","clearPinProtectedKey","setEncryptedPinProtected","clearKeys","toggleKey","makeKeyFromPin","pin","protectedKeyCs","pinProtectedKey","getEncryptedPinProtected","pinKey","decKey","makeShareKey","shareKey","stretchKey","keyMaterial","sendKey","hashPurpose","theKey","getKeyForEncryption","buildEncKey","remakeEncKey","plainValue","plainBuf","encObj","encValue","macLen","encBytes","privateKeyValue","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","encString","aesDecryptToBytes","aesDecryptToUtf8","encBuf","ctBytes","ivBytes","macBytes","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","shouldStoreKey","getVaultTimeout","getBiometricUnlock","supportsSecureStorage","getCryptoMasterKeyBiometric","keyForEnc","resolveLegacyKey","fastParams","computedMac","legacyKey","getLegacyEtmKey","newKey","minimumEntropy","entropyPerWord","hashArr","phrase","hashNumber","remainder","mod","divide","encKeyEnc","getDecryptedCryptoSymmetricKey","decEncKey","encKeyCipher","symmetricCryptoKey","ClientType","BrowserCryptoService","authenticateBiometric","BrowserMessagingService","subscriber","arg","BrowserMessagingPrivateModeBackgroundService","bitwardenPopupMainMessageListener","DialogPromiseExpiration","BrowserPlatformUtilsService","clipboardWriteCallback","biometricCallback","showDialogResolves","passwordDialogResolves","deviceCache","prefersColorSchemeDark","matchMedia","FirefoxExtension","opr","addons","OperaExtension","EdgeExtension","VivaldiExtension","ChromeExtension","SafariExtension","Browser","isFirefox","isChrome","isEdge","isOpera","isVivaldi","isSafari","isIE","isMacAppStore","isViewOpen","isPopupOpen","sidebarView","sidebarViewName","lockTimeout","createNewTab","saveFile","downloadFile","PublicKeyCredential","showToast","showDialog","confirmText","cancelText","bodyIsHtml","dialogId","html","doc","clearMs","clipboard","writeText","clipboardData","setData","queryCommandSupported","textarea","textContent","style","position","select","execCommand","readText","focus","resolveDialogPromise","confirmed","resolvePasswordDialogPromise","canceled","resolveObj","tryResolve","supportsBiometric","os","getBrowserInfo","sidebarAction","getDefaultSystemTheme","Dark","Light","onDefaultSystemThemeChange","addEventListener","getEffectiveTheme","getTheme","BrowserStorageService","chromeStorageApi","storage","local","keyedObj","I18nService","systemLanguage","localesDirectory","getLocalesJson","supportedTranslationLocales","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","translate","messagesObj","formattedLocale","locales","placeholders","placeProp","content","replaceToken","replaceContent","getMessage","StorageLocation","State","accounts","authenticatedAccounts","StateService","stateMigrationService","useAccountCache","BehaviorSubject","createGlobals","hasBeenInited","accountDiskCache","initAccountState","syncAccountFromDisk","storedActiveUser","activeUserId","pushAccounts","diskAccount","getAccountFromDisk","setAccountEnvironmentUrls","scaffoldNewAccountStorage","setLastActive","setActiveUser","clearDecryptedDataForActiveUser","clean","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","dynamicallySetActiveUser","removeAccountFromDisk","removeAccountFromMemory","getTimeoutBasedStorageOptions","getAccount","saveAccount","getAddEditCipherInfo","setAddEditCipherInfo","getAlwaysShowDock","defaultOnDiskOptions","setAlwaysShowDock","saveGlobals","getAutoConfirmFingerPrints","setAutoConfirmFingerprints","setAutoFillOnPageLoadDefault","getBiometricAwaitingAcceptance","setBiometricAwaitingAcceptance","setBiometricFingerprintValidated","getBiometricText","setBiometricText","setBiometricUnlock","defaultOnDiskLocalOptions","setClearClipboard","getCollapsedGroupings","setCollapsedGroupings","defaultSecureStorageOptions","saveSecureStorageKey","getCryptoMasterKeyB64","setCryptoMasterKeyB64","setDecodedToken","setDecryptedPinProtected","setDefaultUriMatch","getDisableAddLoginNotification","setDisableAddLoginNotification","getDisableAutoBiometricsPrompt","setDisableAutoBiometricsPrompt","setDisableAutoTotpCopy","getDisableBadgeCounter","setDisableBadgeCounter","getDisableChangedPasswordNotification","setDisableChangedPasswordNotification","getDisableContextMenuItem","setDisableContextMenuItem","getDisableFavicon","setDisableFavicon","getDisableGa","setDisableGa","getDontShowCardsCurrentTab","setDontShowCardsCurrentTab","getDontShowIdentitiesCurrentTab","setDontShowIdentitiesCurrentTab","setEmail","getEnableAlwaysOnTop","accountPreference","globalPreference","setEnableAlwaysOnTop","getEnableAutoFillOnPageLoad","setEnableAutoFillOnPageLoad","getEnableBiometric","enableBiometrics","setEnableBiometric","getEnableBrowserIntegration","setEnableBrowserIntegration","getEnableBrowserIntegrationFingerprint","setEnableBrowserIntegrationFingerprint","getEnableCloseToTray","setEnableCloseToTray","getEnableFullWidth","setEnableFullWidth","getEnableGravitars","setEnableGravitars","getEnableMinimizeToTray","setEnableMinimizeToTray","getEnableStartToTray","setEnableStartToTray","getEnableTray","setEnableTray","defaultOnDiskMemoryOptions","getEntityId","setEntityId","getEntityType","setEntityType","getGlobalEnvironmentUrls","setEverBeenUnlocked","getForcePasswordReset","getInstalledVersion","setInstalledVersion","getKdfIterations","setKdfIterations","getKdfType","setKdfType","getLocale","setLocale","getMainWindowSize","setMainWindowSize","getMinimizeOnCopyToClipboard","setMinimizeOnCopyToClipboard","getNoAutoPromptBiometrics","setNoAutoPromptBiometrics","getNoAutoPromptBiometricsText","setNoAutoPromptBiometricsText","getOpenAtLogin","setOpenAtLogin","getOrganizationInvitation","organizationInvitation","setOrganizationInvitation","usernameGenerationOptions","getGeneratorOptions","generatorOptions","setGeneratorOptions","getProtectedPin","setProtectedPin","getRememberedEmail","setRememberedEmail","getSsoCodeVerifier","setSsoCodeVerifier","getSsoOrgIdentifier","setSsoOrganizationIdentifier","getSsoState","setSsoState","setTheme","setVaultTimeout","getVaultTimeoutAction","accountVaultTimeoutAction","globalVaultTimeoutAction","setVaultTimeoutAction","getStateVersion","setStateVersion","getWindow","setWindow","useMemory","storageLocation","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","useSecureStorage","getAccountFromMemory","getUserIdFromMemory","cachedAccount","Memory","Both","Disk","saveAccountToMemory","saveAccountToDisk","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","storedAccount","pruneInMemoryAccounts","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","persistentAccountInformation","timeoutAction","getBrowserGroupingComponentState","setBrowserGroupingComponentState","getBrowserCipherComponentState","setBrowserCipherComponentState","getBrowserSendComponentState","setBrowserSendComponentState","getBrowserSendTypeComponentState","setBrowserSendTypeComponentState","VaultFilter","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","cipherType","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","DynamicTreeNode","hasId","fullList","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildFolders","storedFolders","orgCiphers","oc","nestedFolders","nestedList","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","PersonalOwnership","VaultFilterService","vaultFilter","allVaults","myVault","getVaultFilter","setVaultFilter","filterCipherForSelectedVault","VaultTimeoutService","lockedCallback","loggedOutCallback","startCheck","checkVaultTimeout","getValue","shouldLock","executeTimeoutAction","lock","allowSoftLock","pinSet","isPinLockSet","isBiometricLockSet","setVaultTimeoutOptions","action","currentAction","authStatus","vaultTimeoutSeconds","checkSafari","CommandsBackground","main","passwordGenerationService","vaultTimeoutService","messageListener","processCommand","commandToRetry","shortcut","commands","onCommand","generatePasswordToClipboard","autoFillLogin","openPopup","getTabFromCurrentWindowId","retryMessage","tabSendMessageData","collectPageDetailsForContentScript","ContextMenusBackground","noopCommandSuffix","contextMenus","onClicked","menuItemId","getClickedElement","parentMenuItemId","cipherAction","startAutofillPage","Cipher_ClientCopiedPassword","totpValue","loginToAutoFill","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","newState","onStateChanged","setDetectionInterval","pollIdle","handler","queryState","NativeMessagingBackground","runtimeBackground","resolver","secureSetupResolve","onAdded","reloadExtension","connect","port","connecting","connectedCallback","disconnect","sharedSecret","validatingFingerprint","showFingerprintDialog","showWrongUserDialog","onDisconnect","timestamp","postMessage","encryptMessage","secureCommunication","getResponse","rawMessage","abs","processMessage","sendUnencrypted","fingerprint","NotificationQueueMessageType","NotificationBackground","autofillService","notificationQueue","cleanupNotificationQueue","getDataForTab","responseCommand","addLogin","changedPassword","removeTabFromNotificationQueue","saveOrUpdateCredentials","saveNever","checkNotificationQueue","doNotificationQueueCheck","currentTab","expires","tabDomain","AddLogin","typeData","isVaultLocked","wasVaultLocked","ChangePassword","loginInfo","loginDomain","normalizedUsername","disabledAddLogin","allowPersonalOwnership","pushAddLoginToQueue","usernameMatches","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","queueMessage","changePasswordMessage","getDecryptedCipherById","updateCipher","createNewCipher","addLoginMessage","loginModel","newCipher","RuntimeBackground","systemService","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","onInstalled","reason","checkOnInstalled","backgroundMessageListener","isPrivateMode","bitwardenBackgroundMessageListener","closeLoginTab","focusSpecifiedTab","setIcon","refreshBadgeAndMenu","logout","reseedStorage","autofillTimeout","autofillPage","vaultUrl","referrer","TabsBackground","notificationBackground","onFocusChanged","focusedWindowId","onActivated","activeInfo","onReplaced","addedTabId","removedTabId","onReplacedRan","onUpdated","changeInfo","onUpdatedRan","WebRequestBackground","pendingAuthRequests","webRequest","onAuthRequired","requestId","resolveAuthCredentials","onCompleted","completeAuthRequest","onErrorOccurred","authCredentials","bitwardenMain","menuOptionsLoaded","nativeMessagingBackground","vaultFilterService","that","backgroundMessagingService","reloadProcess","auditService","exportService","popupUtilsService","userVerificationService","forceWindowReload","commandsBackground","tabsBackground","contextMenusBackground","idleBackground","webRequestBackground","usernameGenerationService","bootstrap","getPrivateModeWindows","actionSetIcon","browserAction","onWindowCreated","suffix","forLocked","menuDisabled","contextMenusRemoveAll","buildContextMenu","loadMenuAndUpdateBadgeForNoAccessState","contextMenuReady","buildingContextMenu","contextMenusCreate","contexts","parentId","contextMenuEnabled","loadMenuAndUpdateBadge","actionSetBadgeBackgroundColor","loadLoginContextMenuOptions","theText","loadNoLoginsContextMenuOptions","sidebarActionSetBadgeText","browserActionSetBadgeText","getActiveTabs","loadContextMenuOptions","noLoginsMessage","idSuffix","sanitizeContextMenuTitle","override","syncInternal","lastSyncAgo","scheduleNextSync","syncTimeout","removeAll","theAction","setBadgeBackgroundColor","color","setBadgeText","setTitle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","definition","defineProperty","enumerable","globalThis","Function","Symbol","toStringTag","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}